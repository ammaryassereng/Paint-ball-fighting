	;/////////////////////////////////////////////////////////////////////////////////////
	;///////////////////////////////////////MACROS///////////////////////////////////////

Print Macro x,y,z,size,color
	                          mov   si,@data                   	;moves to si the location in memory of the data segment
	                          mov   ah,13h                     	;service to print string in graphic mode
	                          mov   al,0                       	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                          mov   bh,0
	                          mov   bl,color                   	;color of the text (white foreground and black background)
	                          mov   cx,size                    	;length of string
	                          mov   dh,y                       	;y coordinate
	                          mov   dl,x                       	;x coordinate
	                          mov   es,si                      	;moves to es the location in memory of the data segment
	                          mov   bp,offset z                	;mov bp the offset of t
endm Print

SENDING MACRO VALUE
LOCAL AGAIN
;PUSHA
;Check that Transmitter Holding Register is Empty
	mov dx,3FDH		; Line Status Register
AGAIN:
	In al,dx 			;Read Line Status
  	AND al,00100000b
  	JZ AGAIN

;If empty put the VALUE in Transmit data register
  	mov dx,3F8H		; Transmit data register
  	mov al,VALUE
  	out dx,al 
;POPA
ENDM SENDING

RECEIVING MACRO VALUE
LOCAL READ
LOCAL FINISHrec
	;PUSHA
  ;CHECK THAT DATA READY
  MOV DX,3FDH		; LINE STATUS REGISTER
  IN AL,DX 
  AND AL,00000001b
  JNZ READ 
  JMP FINISHrec

  READ:
  ;IF READY READ THE VALUE IN RECEIVE DATA REGISTER
	MOV DX,03F8H
	IN AL,DX 
	MOV VALUE,AL

  FINISHrec:
	;POPA
ENDM RECEIVING

Cursor MACRO X, Y
	MOV AH,2       ;move Cursor function
	MOV DH,Y	   ;DH = Y
	MOV DL,X       ;DL = X
	MOV BH,0 	   ;Display Page
	INT 10H        ;drX excution
ENDM Cursor

SCROLL MACRO X, Y, drX, drY
	MOV AX, 0601h    ; Scroll up function
	MOV CH, Y     ; Upper left corner CH=ROW, CL=column
	MOV CL, X
	MOV DH, drY   ; Bottom right corner DH=ROW, DL=column
	MOV DL, drX
	MOV BH, 07    
	INT 10H
ENDM SCROLL

;/////////////////////////////////////////////////////////////////////////////////////
.model huge
.386
.stack 64
.data

	;activationresflag                 db                   

	endflag                           db                   00H

	sendmsg                           db                   '                               ','$'

	Divisor                           DB                   '________________________________________________________________________________', '$'
	
	X_1                               DB                   00H
	Y_1                               DB                   00H
	drX1                              DB                   00H
	drY1                              DB                   00H
	X_2                               DB                   00H
	Y_2                               DB                   0DH
	drX2                              DB                   00H
	drY2                              DB                   0CH
	Space_chat                        DB                   ' ', '$'
	Char                              DB                   '$', '$'
	CharRecieved                      DB                   '$', '$'
	sent                              db                   00h
	rect                              db                   00h
	;/////////////////////////////////////////////////////////////////////////////////////
	;////////////////////////////////////GRAPHIC DATA////////////////////////////////////
	avaW                              equ                  48
	avaH                              equ                  48
	ava1                              DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 28, 27, 20, 218, 20, 19, 19, 244, 243, 20, 26, 30, 29, 23, 18, 16, 16, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 27, 29, 23, 18, 20, 20, 245, 224, 19, 24, 30, 31, 31, 26, 19, 16
	                                  DB                   16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 22, 26, 24, 18, 21, 25, 24, 20
	                                  DB                   19, 27, 31, 30, 27, 23, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17
	                                  DB                   21, 22, 20, 19, 25, 27, 27, 24, 23, 25, 27, 25, 20, 243, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 16, 16, 19, 164, 24, 23, 21, 19, 19, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 210, 18, 138, 138, 210, 209, 208, 137, 139, 211, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 209, 138, 164, 24, 25, 65, 65, 25, 164, 164, 164, 137, 208, 18, 18, 17, 17, 18, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 138, 65, 67, 67, 67, 67, 67, 67, 67, 67, 67, 66, 66
	                                  DB                   65, 164, 139, 212, 18, 16, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 138, 67, 91, 66, 65, 164
	                                  DB                   139, 164, 65, 66, 66, 66, 66, 66, 66, 66, 65, 65, 12, 139, 210, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   16, 18, 65, 67, 67, 66, 65, 164, 164, 164, 164, 66, 66, 66, 66, 66, 66, 66, 65, 65, 65, 65, 65, 140, 209, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 16, 210, 66, 67, 66, 66, 66, 66, 66, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 65, 12, 65, 65, 65, 164, 137, 17, 16, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 211, 66, 67, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 65, 12, 12, 12, 65
	                                  DB                   66, 65, 138, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 210, 66, 67, 66, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                                  DB                   66, 66, 66, 66, 65, 12, 12, 12, 65, 66, 65, 236, 18, 209, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 210, 65, 65, 164, 139, 164, 66
	                                  DB                   66, 66, 66, 66, 66, 66, 66, 65, 65, 66, 66, 66, 65, 12, 12, 64, 65, 65, 65, 65, 139, 210, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   16, 18, 25, 28, 24, 137, 139, 65, 66, 66, 66, 66, 66, 65, 25, 25, 164, 164, 66, 66, 66, 12, 65, 164, 138, 235, 164, 65, 65, 65, 140, 210, 16, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 16, 224, 23, 28, 28, 25, 164, 65, 66, 66, 66, 66, 24, 22, 24, 27, 27, 23, 164, 66, 66, 65, 65, 164, 209, 16, 137, 65, 66, 66, 65, 24
	                                  DB                   211, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 19, 20, 23, 30, 30, 24, 65, 66, 66, 66, 65, 22, 151, 173, 27, 31, 28, 23, 164, 66, 65, 65, 164
	                                  DB                   210, 16, 18, 164, 65, 64, 65, 66, 164, 209, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 19, 18, 18, 26, 30, 24, 164, 66, 67, 65, 24, 22, 246, 17, 19
	                                  DB                   28, 31, 27, 23, 65, 65, 65, 164, 235, 17, 17, 138, 65, 65, 12, 65, 66, 139, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 20, 18, 20, 27, 102, 23, 164
	                                  DB                   66, 67, 65, 164, 21, 246, 18, 19, 26, 31, 28, 24, 164, 65, 65, 164, 236, 18, 17, 209, 140, 66, 65, 65, 66, 164, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16
	                                  DB                   18, 21, 24, 26, 103, 27, 164, 65, 66, 66, 65, 23, 174, 245, 18, 20, 27, 101, 26, 23, 65, 65, 65, 164, 236, 18, 18, 17, 211, 12, 66, 66, 66, 139, 16, 16, 16, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 17, 18, 18, 20, 26, 102, 27, 24, 24, 66, 66, 66, 66, 25, 23, 149, 173, 25, 101, 103, 24, 164, 65, 65, 65, 12, 137, 17, 19, 18, 17, 137, 164, 65
	                                  DB                   140, 208, 16, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 20, 19, 17, 22, 25, 23, 164, 66, 66, 66, 66, 66, 66, 24, 24, 27, 102, 28, 24, 164, 65, 66, 65, 65, 12
	                                  DB                   137, 17, 224, 19, 18, 17, 210, 137, 17, 16, 17, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 20, 20, 18, 16, 186, 137, 164, 65, 66, 66, 65, 65, 65, 66, 25, 24, 25
	                                  DB                   22, 209, 139, 66, 66, 65, 65, 140, 210, 18, 224, 19, 19, 18, 17, 17, 17, 17, 18, 19, 17, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 20, 21, 19, 17, 17, 17, 234, 164, 66
	                                  DB                   67, 25, 137, 234, 24, 65, 164, 138, 17, 16, 139, 66, 66, 65, 65, 137, 17, 18, 19, 19, 19, 19, 224, 19, 18, 18, 224, 19, 17, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 19
	                                  DB                   20, 19, 19, 17, 16, 211, 12, 66, 67, 65, 236, 16, 209, 138, 138, 210, 17, 236, 25, 66, 65, 65, 140, 210, 17, 240, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 17, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 17, 17, 16, 19, 20, 19, 20, 18, 17, 211, 12, 65, 66, 66, 164, 17, 16, 16, 18, 234, 139, 65, 67, 66, 65, 65, 139, 209, 18, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 17, 0, 0, 0, 0, 0, 0, 0, 18, 19, 17, 18, 20, 20, 19, 237, 224, 18, 212, 140, 65, 66, 65, 236, 17, 16, 17, 137, 12, 66, 66, 65, 65, 65, 139, 18
	                                  DB                   18, 19, 19, 19, 19, 19, 19, 19, 232, 232, 19, 19, 17, 0, 0, 0, 0, 0, 0, 0, 18, 20, 18, 17, 19, 20, 19, 235, 19, 18, 17, 208, 139, 65, 65, 164, 210, 17, 18, 210
	                                  DB                   211, 137, 139, 12, 65, 65, 138, 18, 18, 19, 19, 19, 19, 19, 19, 19, 232, 19, 19, 19, 17, 0, 0, 0, 0, 0, 0, 0, 17, 20, 20, 18, 18, 20, 19, 19, 235, 19, 18, 17
	                                  DB                   17, 211, 140, 12, 137, 18, 18, 18, 17, 17, 18, 210, 137, 139, 211, 18, 223, 19, 19, 19, 19, 19, 19, 19, 232, 19, 237, 19, 17, 0, 0, 0, 0, 0, 0, 0, 16, 19, 21, 19
	                                  DB                   18, 20, 235, 19, 19, 235, 236, 19, 18, 17, 209, 137, 211, 18, 18, 19, 224, 18, 18, 17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 236, 19, 17, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 16, 17, 21, 21, 235, 236, 20, 19, 19, 19, 235, 20, 19, 18, 18, 17, 18, 18, 18, 19, 235, 235, 19, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 235, 236, 19, 16, 0, 0, 0, 0, 0, 0, 0, 16, 16, 19, 21, 21, 235, 20, 235, 19, 19, 19, 19, 235, 20, 19, 224, 18, 19, 19, 232, 232, 19, 237, 236, 235, 235, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 19, 19, 236, 20, 18, 16, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 20, 21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 235, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 235, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 20, 21, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 235, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 235, 20, 20, 18, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16
	                                  DB                   18, 20, 21, 236, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 235, 20, 236, 18, 16, 16, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 16, 16, 16, 18, 20, 20, 235, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 235, 19
	                                  DB                   18, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 17, 19, 20, 236, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 236, 236, 18, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 19, 18, 18, 19, 20, 235, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 19, 20, 20, 20, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 18, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   16, 17, 19, 21, 21, 236, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 236, 20, 19, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 20, 21, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 235, 20, 19, 17, 16, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 17, 19, 21, 21, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 236
	                                  DB                   20, 20, 224, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 17, 18, 19, 20, 21, 21, 20, 20, 236, 235, 235
	                                  DB                   235, 235, 236, 20, 20, 20, 20, 236, 19, 18, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 17
	                                  DB                   18, 18, 19, 236, 20, 20, 20, 236, 235, 235, 235, 19, 19, 19, 18, 18, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	ava2                              DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 26, 31, 31, 31, 24, 18, 17, 205, 231, 182, 16, 20, 29, 29, 20, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 23, 26, 29, 31, 26, 21, 20, 23, 25, 21, 17, 21, 29
	                                  DB                   23, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 20, 24, 26, 23
	                                  DB                   23, 24, 26, 27, 22, 18, 226, 23, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 17, 19, 19, 18, 21, 24, 25, 24, 245, 17, 17, 17, 16, 16, 16, 17, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 16, 17, 137, 140, 137, 18, 18, 209, 208, 210, 18, 17, 17, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 17, 17, 186, 209, 138, 164, 164, 164, 24, 24, 164, 24, 164, 164, 139, 236, 17, 16, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 17, 18, 211, 137, 139, 164, 24, 65, 65, 66, 66, 67, 67, 67
	                                  DB                   67, 67, 67, 66, 25, 164, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 209, 211, 139, 164, 12, 65, 66
	                                  DB                   67, 67, 66, 66, 67, 66, 66, 67, 67, 67, 67, 67, 67, 67, 164, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17
	                                  DB                   210, 139, 164, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 65, 65, 65, 65, 65, 66, 67, 91, 66, 137, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 17, 236, 164, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 65, 164, 164, 139, 24, 66, 66, 67, 66, 139, 16, 16, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 138, 65, 66, 65, 65, 12, 12, 65, 66, 66, 66, 66, 66, 66, 66, 66, 65, 24, 164, 164, 65, 66, 66, 66, 66, 163
	                                  DB                   16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 210, 210, 17, 137, 65, 66, 66, 65, 12, 164, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                                  DB                   65, 66, 66, 65, 65, 66, 66, 139, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 211, 138, 138, 65, 65, 65, 64, 12, 12, 12, 65, 66, 66, 66
	                                  DB                   65, 65, 65, 66, 66, 66, 66, 66, 66, 67, 25, 138, 164, 66, 66, 138, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 210, 139, 164, 65, 65, 164, 138
	                                  DB                   139, 12, 12, 12, 66, 67, 66, 164, 164, 24, 25, 65, 66, 66, 66, 66, 66, 66, 140, 137, 23, 28, 27, 20, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17
	                                  DB                   212, 164, 65, 65, 66, 65, 137, 17, 211, 12, 12, 65, 66, 66, 164, 23, 26, 28, 26, 24, 25, 66, 66, 66, 66, 65, 140, 23, 27, 28, 24, 19, 17, 17, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 17, 211, 12, 65, 65, 65, 66, 164, 208, 16, 209, 12, 65, 66, 66, 24, 23, 27, 29, 28, 24, 22, 163, 65, 66, 66, 66, 65, 24, 26, 30, 24, 136, 208
	                                  DB                   18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 208, 164, 65, 65, 65, 65, 65, 138, 185, 184, 136, 12, 65, 66, 65, 164, 26, 30, 29, 23, 136, 135, 21, 24, 66, 66
	                                  DB                   66, 65, 25, 103, 29, 136, 112, 208, 223, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 211, 65, 65, 12, 65, 66, 164, 208, 184, 184, 137, 65, 65, 65, 140, 23, 102, 31
	                                  DB                   26, 208, 112, 112, 20, 24, 66, 67, 66, 65, 25, 103, 29, 136, 183, 208, 245, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 210, 164, 66, 66, 66, 25, 236, 185, 184, 184
	                                  DB                   137, 65, 65, 65, 164, 23, 103, 31, 26, 207, 184, 232, 174, 23, 65, 66, 67, 66, 25, 26, 101, 25, 23, 21, 19, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 17, 138
	                                  DB                   65, 66, 25, 138, 185, 112, 184, 185, 137, 65, 65, 65, 65, 164, 24, 103, 102, 25, 22, 174, 24, 162, 137, 164, 66, 65, 138, 23, 102, 101, 27, 174, 18, 183, 183, 17, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 184, 184, 16, 17, 137, 139, 137, 185, 184, 112, 184, 185, 138, 65, 65, 65, 66, 25, 22, 24, 78, 103, 26, 25, 25, 137, 184, 137, 66, 138, 185, 233, 24, 27, 25, 19
	                                  DB                   184, 4, 208, 208, 0, 0, 0, 0, 0, 0, 0, 16, 184, 184, 184, 16, 184, 185, 184, 184, 112, 112, 112, 184, 211, 65, 65, 65, 66, 66, 164, 163, 24, 26, 26, 26, 24, 209, 184, 138
	                                  DB                   66, 138, 184, 184, 210, 138, 211, 185, 111, 12, 136, 232, 0, 0, 0, 0, 0, 0, 0, 16, 184, 112, 112, 184, 184, 184, 112, 112, 112, 112, 112, 184, 186, 139, 65, 64, 65, 66, 66, 65
	                                  DB                   25, 26, 66, 65, 138, 184, 208, 25, 67, 65, 137, 113, 113, 185, 184, 184, 111, 12, 136, 17, 16, 16, 0, 0, 0, 0, 0, 16, 184, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112
	                                  DB                   185, 235, 164, 65, 65, 66, 67, 66, 24, 140, 140, 138, 185, 184, 138, 67, 66, 66, 65, 164, 210, 16, 184, 112, 111, 12, 136, 17, 16, 16, 0, 0, 0, 0, 0, 16, 184, 112, 112, 112
	                                  DB                   112, 112, 112, 112, 112, 113, 113, 112, 184, 208, 164, 65, 64, 65, 67, 67, 164, 210, 208, 185, 16, 17, 164, 67, 66, 66, 66, 164, 208, 184, 112, 111, 136, 12, 208, 17, 17, 17, 0, 0
	                                  DB                   0, 0, 0, 184, 184, 112, 112, 112, 112, 111, 111, 111, 112, 111, 113, 112, 184, 185, 164, 65, 65, 65, 66, 66, 139, 185, 16, 184, 16, 210, 24, 66, 65, 65, 140, 210, 185, 111, 111, 111
	                                  DB                   136, 135, 17, 208, 136, 183, 0, 0, 0, 0, 0, 16, 184, 112, 112, 112, 112, 111, 111, 111, 111, 111, 111, 112, 184, 185, 164, 66, 66, 65, 164, 140, 137, 186, 184, 184, 185, 139, 66, 66
	                                  DB                   164, 137, 185, 184, 112, 111, 112, 111, 136, 136, 17, 136, 135, 17, 0, 0, 0, 0, 0, 16, 184, 111, 111, 112, 112, 111, 111, 111, 111, 111, 111, 111, 184, 185, 139, 164, 164, 137, 209, 186
	                                  DB                   185, 112, 112, 184, 137, 65, 65, 139, 210, 185, 184, 111, 111, 111, 112, 111, 136, 208, 136, 12, 136, 16, 0, 0, 0, 0, 0, 16, 184, 111, 111, 111, 112, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   112, 184, 209, 210, 209, 185, 184, 184, 112, 112, 112, 17, 236, 139, 137, 185, 184, 112, 111, 111, 111, 112, 111, 136, 135, 207, 12, 12, 208, 16, 0, 0, 0, 0, 0, 16, 184, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 184, 184, 184, 184, 112, 111, 112, 112, 184, 185, 208, 186, 184, 184, 112, 111, 111, 111, 111, 112, 136, 12, 12, 135, 12, 135, 17, 16, 0, 0
	                                  DB                   0, 0, 0, 16, 184, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 111, 111, 111, 112, 112, 112, 184, 112, 112, 112, 111, 111, 111, 111, 111, 111, 111, 136, 12
	                                  DB                   135, 12, 12, 136, 16, 16, 0, 0, 0, 0, 0, 16, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 136, 111, 136, 12, 135, 17, 16, 0, 0, 0, 0, 0, 0, 16, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112
	                                  DB                   112, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 184, 111, 12, 12, 208, 16, 16, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 184, 111, 12, 12, 208, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 136, 12, 12, 207, 16, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 16, 16, 17, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 12, 135, 208
	                                  DB                   16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 136, 12, 136, 17, 17, 208, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 136, 135, 135, 136, 136, 135, 136, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 111, 136, 12, 12, 136, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 16, 17, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 111, 136, 12, 12, 136, 17, 16, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 12, 12, 12, 208, 16, 16
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 111, 136
	                                  DB                   12, 12, 12, 136, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 17, 183, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 136, 136, 12, 12, 12, 136, 208, 17, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16
	                                  DB                   17, 17, 183, 183, 183, 111, 111, 111, 111, 111, 136, 136, 136, 136, 136, 207, 208, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 184, 183, 183, 208, 208, 207, 207, 208, 208, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	gunW                              equ                  56
	gunH                              equ                  36
	blugun                            DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18
	                                  DB                   18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 24, 24, 24, 24, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 24, 24, 24, 24, 24, 24, 18, 18, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 18, 24, 24, 24, 24, 24, 24, 24, 22, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 0, 18, 24, 24, 24, 24, 24, 24, 24, 22, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 17, 0, 0, 18, 24, 24
	                                  DB                   24, 24, 24, 24, 24, 22, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 0, 16, 16, 16, 16, 0, 0, 16, 16, 16, 16, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 16, 16, 17, 18, 19, 18, 0, 18, 24, 24, 24, 24, 24, 24, 24, 22, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16
	                                  DB                   17, 18, 17, 16, 16, 18, 223, 18, 16, 16, 18, 224, 18, 16, 16, 0, 0, 0, 0, 0, 16, 16, 17, 19, 19, 236, 20, 236, 236, 18, 24, 24, 24, 24, 24, 24, 24, 22, 18, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 0, 16, 18, 245, 20, 246, 17, 18, 245, 20, 245, 17, 17, 20, 20, 20, 18, 16, 0, 0, 0, 0, 16, 16, 17, 19, 235
	                                  DB                   235, 19, 18, 236, 236, 236, 24, 24, 24, 24, 24, 24, 24, 22, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 224, 20, 245, 20, 18, 223, 245, 245, 20
	                                  DB                   223, 18, 20, 245, 20, 224, 16, 16, 16, 16, 16, 16, 17, 19, 235, 235, 19, 17, 16, 16, 236, 236, 24, 24, 24, 24, 24, 24, 24, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 16, 16, 240, 20, 20, 18, 224, 20, 245, 20, 18, 223, 245, 245, 245, 18, 18, 20, 245, 20, 224, 16, 16, 16, 16, 16, 16, 17, 236, 236, 18, 16, 16, 16, 0, 16, 224, 24, 24
	                                  DB                   24, 24, 24, 24, 24, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21, 25, 24, 19, 223, 20, 245, 20, 18, 224, 245, 245, 245, 18, 18, 20, 245, 20, 18, 20, 22
	                                  DB                   22, 21, 21, 20, 17, 17, 18, 16, 16, 16, 0, 16, 16, 22, 24, 24, 24, 24, 24, 24, 18, 18, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 20, 24, 24, 19, 223
	                                  DB                   20, 245, 20, 18, 224, 20, 245, 245, 18, 18, 20, 245, 20, 18, 21, 25, 24, 24, 24, 24, 23, 19, 17, 16, 16, 16, 16, 16, 235, 24, 24, 24, 24, 24, 24, 24, 18, 0, 0, 0
	                                  DB                   0, 0, 16, 16, 16, 16, 16, 17, 17, 17, 16, 17, 18, 18, 17, 17, 17, 17, 17, 16, 17, 18, 17, 18, 17, 17, 18, 17, 17, 17, 18, 18, 18, 18, 17, 18, 19, 21, 22, 20
	                                  DB                   18, 17, 18, 21, 24, 24, 24, 24, 24, 24, 24, 18, 18, 0, 0, 0, 0, 0, 16, 17, 19, 20, 21, 22, 22, 22, 19, 16, 17, 17, 17, 18, 17, 17, 17, 17, 17, 17, 17, 17
	                                  DB                   17, 17, 17, 17, 17, 18, 17, 17, 17, 18, 18, 18, 17, 16, 19, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 19, 16, 16, 0, 0, 0, 0, 0, 16, 20, 25, 25, 25, 25
	                                  DB                   25, 25, 20, 17, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 236, 236, 235, 236, 236, 20, 18, 16, 21, 25, 24, 24, 24, 24, 24, 24, 24
	                                  DB                   24, 24, 18, 16, 0, 0, 0, 0, 0, 0, 16, 20, 25, 24, 24, 24, 24, 24, 224, 17, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 17, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 18, 16, 0, 0, 0, 0, 0, 0, 16, 20, 24, 24, 24, 24, 24, 24, 18, 18, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 19, 235, 19, 235, 235, 19, 235, 235, 19, 19, 19, 19, 19, 19, 19, 17, 20, 24, 24, 24, 24, 24, 24, 24, 24, 25, 24, 18, 16, 0, 0, 0, 0
	                                  DB                   0, 0, 16, 20, 25, 24, 24, 24, 24, 24, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 17, 20
	                                  DB                   24, 24, 24, 24, 24, 24, 24, 25, 22, 224, 16, 16, 0, 0, 0, 0, 0, 0, 16, 20, 25, 24, 24, 24, 24, 24, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 17
	                                  DB                   17, 17, 17, 17, 17, 17, 17, 18, 18, 19, 19, 19, 19, 19, 17, 20, 24, 24, 24, 24, 24, 24, 24, 20, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 16, 20, 25, 24, 24, 24
	                                  DB                   24, 24, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 235, 18, 16, 222, 245, 221, 245, 245, 245, 244, 221, 17, 18, 19, 19, 19, 19, 232, 16, 21, 24, 24, 24, 24, 24, 24, 19, 16
	                                  DB                   16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20, 24, 24, 24, 24, 24, 23, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 17, 172, 78, 79, 78, 78, 78, 78, 25, 18
	                                  DB                   217, 235, 19, 19, 236, 19, 17, 22, 25, 24, 24, 24, 25, 21, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20, 25, 24, 24, 24, 25, 24, 18, 19, 20, 21, 21, 21
	                                  DB                   21, 21, 21, 21, 21, 19, 18, 25, 77, 78, 78, 78, 78, 77, 26, 246, 21, 22, 22, 22, 22, 21, 20, 24, 26, 26, 26, 26, 24, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 16, 22, 26, 26, 26, 26, 26, 26, 20, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 21, 20, 26, 103, 78, 78, 78, 103, 102, 25, 20, 22, 22, 22, 22, 22, 21, 20, 25
	                                  DB                   26, 26, 26, 26, 21, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 224, 20, 22, 23, 24, 25, 25, 20, 20, 22, 22, 22, 22, 22, 22, 22, 22, 22, 21, 175, 102
	                                  DB                   102, 102, 102, 103, 103, 78, 172, 20, 22, 22, 22, 22, 22, 20, 21, 26, 26, 26, 26, 25, 223, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 17, 17
	                                  DB                   223, 19, 245, 245, 20, 21, 21, 21, 21, 21, 21, 21, 20, 19, 223, 172, 172, 174, 21, 245, 246, 18, 18, 246, 21, 21, 22, 22, 21, 20, 22, 26, 25, 25, 26, 24, 17, 16, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 17, 22, 22, 21, 20, 20, 20, 21, 245, 247, 223, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18
	                                  DB                   224, 224, 224, 224, 223, 223, 19, 245, 245, 245, 245, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 24, 26, 25, 25, 25
	                                  DB                   26, 24, 223, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 16, 16, 17, 17, 17, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 24, 26, 26, 26, 27, 27, 21, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 22, 25, 24, 25, 25, 20, 17, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 16, 16, 22, 25, 25, 23, 19, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 20, 22, 20, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	redgun                            DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18
	                                  DB                   18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 24, 24, 24, 24, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 24, 24, 24, 24, 24, 24, 18, 18, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 18, 22, 24, 24, 24, 24, 24, 24, 24, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 22, 24, 24, 24, 24, 24, 24, 24, 18, 0, 0, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 22, 24, 24, 24, 24
	                                  DB                   24, 24, 24, 18, 0, 0, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 22, 24, 24, 24, 24, 24, 24, 24, 18, 0, 18, 19, 18, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 0
	                                  DB                   0, 16, 16, 16, 16, 0, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 22, 24, 24, 24, 24, 24, 24, 24, 18, 236, 236, 20, 236
	                                  DB                   19, 19, 17, 16, 16, 0, 0, 0, 0, 0, 16, 16, 18, 224, 18, 16, 16, 18, 223, 18, 16, 16, 17, 18, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 18, 22, 24, 24, 24, 24, 24, 24, 24, 236, 236, 236, 18, 19, 235, 235, 19, 17, 16, 16, 0, 0, 0, 0, 16, 18, 20, 20, 20, 17, 17, 245, 20, 245, 18, 17, 246, 20
	                                  DB                   245, 18, 16, 0, 0, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 24, 24, 24, 24, 24, 24, 24, 236, 236, 16, 16, 17, 19, 235, 235, 19, 17, 16, 16, 16
	                                  DB                   16, 16, 16, 224, 20, 245, 20, 18, 223, 20, 245, 245, 223, 18, 20, 245, 20, 224, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 24, 24, 24, 24
	                                  DB                   24, 24, 24, 224, 16, 0, 16, 16, 16, 18, 236, 236, 17, 16, 16, 16, 16, 16, 16, 224, 20, 245, 20, 18, 18, 245, 245, 245, 223, 18, 20, 245, 20, 224, 18, 20, 20, 240, 16, 16
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 24, 24, 24, 24, 24, 24, 22, 16, 16, 0, 16, 16, 16, 18, 17, 17, 20, 21, 21, 22, 22, 20, 18, 20, 245, 20, 18
	                                  DB                   18, 245, 245, 245, 224, 18, 20, 245, 20, 223, 19, 24, 25, 21, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 24, 24, 24, 24, 24, 24, 24, 235, 16, 16, 16
	                                  DB                   16, 16, 17, 19, 23, 24, 24, 24, 24, 25, 21, 18, 20, 245, 20, 18, 18, 245, 245, 20, 224, 18, 20, 245, 20, 223, 19, 24, 24, 20, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 18, 18, 24, 24, 24, 24, 24, 24, 24, 21, 18, 17, 18, 20, 22, 21, 19, 18, 17, 18, 18, 18, 18, 17, 17, 17, 18, 17, 17, 18, 17, 18, 17, 16, 17, 17
	                                  DB                   17, 17, 17, 18, 18, 17, 16, 17, 17, 17, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 16, 16, 19, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 19, 16, 17, 18, 18, 18
	                                  DB                   17, 17, 17, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 17, 17, 17, 16, 19, 22, 22, 22, 21, 20, 19, 17, 16, 0, 0, 0, 0, 0, 0, 16, 18, 24
	                                  DB                   24, 24, 24, 24, 24, 24, 24, 24, 25, 21, 16, 18, 20, 236, 236, 235, 236, 236, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 17, 20, 25
	                                  DB                   25, 25, 25, 25, 25, 20, 16, 0, 0, 0, 0, 0, 0, 16, 18, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 20, 17, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 17, 224, 24, 24, 24, 24, 24, 25, 20, 16, 0, 0, 0, 0, 0, 0, 16, 18, 24, 25, 24, 24, 24, 24, 24, 24, 24
	                                  DB                   24, 20, 17, 19, 19, 19, 19, 19, 19, 19, 235, 235, 19, 235, 235, 19, 235, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 24, 24, 24, 24, 24, 24, 20, 16, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 16, 224, 22, 25, 24, 24, 24, 24, 24, 24, 24, 20, 17, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 18, 18, 24, 24, 24, 24, 24, 25, 20, 16, 0, 0, 0, 0, 0, 0, 16, 16, 16, 17, 20, 24, 24, 24, 24, 24, 24, 24, 20, 17, 19, 19, 19, 19, 19
	                                  DB                   18, 17, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 17, 24, 24, 24, 24, 24, 25, 20, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16
	                                  DB                   16, 16, 19, 24, 24, 24, 24, 24, 24, 21, 16, 232, 19, 19, 19, 19, 18, 16, 111, 4, 111, 111, 111, 111, 111, 111, 16, 18, 235, 19, 19, 19, 19, 19, 19, 19, 19, 18, 17, 24
	                                  DB                   24, 24, 24, 24, 25, 20, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 21, 25, 24, 24, 24, 25, 22, 17, 19, 236, 19, 19, 235, 217, 17, 4, 40, 4, 4, 4, 4
	                                  DB                   40, 4, 16, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 17, 23, 24, 24, 24, 24, 24, 20, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 24, 26, 26, 26
	                                  DB                   26, 24, 20, 21, 22, 22, 22, 22, 21, 19, 135, 12, 12, 12, 12, 12, 12, 135, 19, 20, 21, 21, 21, 21, 21, 21, 21, 21, 20, 19, 18, 24, 25, 24, 24, 24, 25, 20, 16, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21, 26, 26, 26, 26, 25, 20, 21, 22, 22, 22, 22, 22, 20, 160, 12, 12, 12, 12, 12, 12, 12, 20, 21, 23, 22, 22, 22
	                                  DB                   22, 22, 22, 22, 22, 21, 20, 26, 26, 26, 26, 26, 26, 22, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 223, 25, 26, 26, 26, 26, 21, 20, 22, 22, 22, 22
	                                  DB                   22, 20, 229, 135, 160, 160, 12, 12, 12, 12, 135, 244, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 20, 25, 25, 24, 23, 22, 20, 224, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 17, 24, 26, 25, 25, 26, 22, 20, 21, 22, 22, 21, 21, 246, 17, 17, 17, 18, 18, 224, 230, 230, 18, 17, 20, 21, 21, 21, 21, 21, 21, 21, 20, 245, 245, 19
	                                  DB                   223, 17, 17, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 19, 245, 245, 245, 245, 19, 223, 223, 224, 224, 224, 224, 18, 16, 16, 16, 16, 16, 16
	                                  DB                   16, 16, 16, 17, 223, 247, 245, 21, 20, 20, 20, 21, 22, 22, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16
	                                  DB                   16, 16, 16, 17, 17, 17, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 223, 24, 26, 25, 25, 25, 26, 24, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 21
	                                  DB                   27, 27, 26, 26, 26, 24, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 20, 25, 25, 24, 25, 22, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 19, 23, 25, 25, 22, 16, 16
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 20, 22, 20, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	roundW                            equ                  92
	roundH                            equ                  16
	round                             DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0
	                                  DB                   0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44
	                                  DB                   44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44
	                                  DB                   44, 0, 0, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0
	                                  DB                   0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44
	                                  DB                   44, 44, 44, 44, 44, 44, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44
	                                  DB                   44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44
	                                  DB                   0, 0, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 44, 44
	                                  DB                   44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 0, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44
	                                  DB                   44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0
	                                  DB                   44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44
	                                  DB                   44, 44, 44, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 0
	                                  DB                   0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0
	                                  DB                   0, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44
	                                  DB                   44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44
	                                  DB                   0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44
	                                  DB                   0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44
	                                  DB                   44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 44, 0, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 44
	                                  DB                   44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44
	                                  DB                   44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 0
	                                  DB                   0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44
	                                  DB                   44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44
	                                  DB                   44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0
	                                  DB                   44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0
	                                  DB                   0, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44
	                                  DB                   44, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0
	                                  DB                   0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 0, 44, 44, 44, 44, 44
	                                  DB                   0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44
	                                  DB                   44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	box                               DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 6, 6, 6, 6, 114, 6, 114, 114, 114, 114, 6, 6, 114, 114, 6, 114, 114, 6, 114, 114, 6, 6, 114, 6, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 187, 187, 114, 114, 114, 187, 187, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 187, 190, 114, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 114, 187, 187, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 187, 187, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 115, 187, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 114, 187, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 187, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 187, 187, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 187, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 114, 187, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 187, 114, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 114, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 187, 114, 114, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 114, 187, 187, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 187, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 187, 187, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 187, 187, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 114, 187, 187, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 187, 187, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 187, 186, 114, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 187, 114, 114, 114, 187, 187, 187, 114, 187, 6, 6, 6, 6, 6, 6, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 6, 114, 114, 114, 114, 114, 6, 114, 114, 114, 114, 114, 6, 114, 114, 114, 114, 114, 6, 114, 114, 6, 6, 6, 6, 6, 6, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0
	                                  DB                   0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0
	                                  DB                   0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0
	                                  DB                   0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0
	                                  DB                   0, 0, 0, 42, 42, 42, 42, 42, 42, 6, 42, 42, 6, 115, 6, 42, 42, 6, 115, 6, 6, 42, 42, 6, 115, 115, 6, 42, 42, 6, 115, 6, 42, 42, 42, 42, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 42, 42, 42, 42, 42, 6, 6, 114, 187, 187, 114, 6, 114, 187, 186, 187, 6, 6, 114, 187, 186, 187, 114, 6, 6, 187, 186, 186, 6, 42, 42, 42, 42, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 42, 42, 42, 42, 42, 6, 187, 187, 115, 6, 6, 187, 187, 114, 6, 6, 6, 187, 187, 114, 6, 42, 6, 187, 187, 114, 6, 6, 42, 42, 42, 42, 42, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 6, 114, 6, 115, 187, 187, 114, 6, 6, 114, 187, 187, 114, 6, 6, 115, 187, 187, 114, 6, 42, 6, 187, 6, 42, 42, 42, 42, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 42, 114, 187, 187, 115, 6, 6, 114, 187, 187, 114, 6, 6, 114, 187, 187, 114, 6, 42, 6, 187, 187, 114, 42, 42, 42, 42, 42, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 6, 187, 6, 6, 6, 114, 187, 187, 6, 6, 6, 114, 187, 187, 114, 6, 6, 6, 187, 187, 114, 6, 6, 42, 42, 42, 42, 42, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 42, 6, 6, 114, 187, 187, 6, 6, 6, 114, 187, 187, 6, 6, 6, 114, 187, 187, 114, 6, 6, 187, 114, 42, 42, 42, 42, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 42, 114, 186, 187, 6, 6, 6, 187, 187, 187, 6, 6, 6, 114, 187, 187, 114, 6, 6, 187, 187, 187, 6, 42, 42, 42, 42, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 6, 6, 42, 42, 42, 42, 6, 6, 6, 42, 42, 42, 6, 6, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	crkbox                            DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 6, 6, 6, 6, 114, 6, 114, 114, 114, 114, 6, 114, 114, 114, 6, 114, 6, 6, 114, 114, 6, 6, 6, 6, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 187, 187, 114, 114, 114, 208, 186, 114, 114, 114, 114, 187, 187, 187, 114, 114, 114, 187, 186, 114, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 114, 187, 187, 114, 114, 114, 209, 207, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 114, 114, 114, 187, 114, 114, 114, 114, 187, 207, 208, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 114, 208, 208, 114, 114, 114, 187, 209, 207, 209, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 114, 114, 209, 114, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 208, 207, 114, 187, 187, 209, 207, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 209, 114, 6, 6, 6, 6, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 18, 208, 114, 208, 208, 114, 114, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 209, 209, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 114, 187, 187, 207, 208, 208, 209, 114, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 208, 18, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 6, 187, 187, 114, 114, 207, 208, 187, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 207, 187, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 114, 187, 114, 114, 114, 114, 207, 187, 114, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 209, 208, 114, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 6, 6, 6, 6, 114, 114, 114, 114, 114, 114, 207, 209, 114, 114, 114, 114, 187, 114, 114, 114, 114, 114, 187, 18, 209, 114, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 114, 114, 114, 209, 207, 114, 114, 114, 187, 187, 114, 114, 114, 114, 114, 114, 208, 207, 114, 114, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 114, 187, 187, 208, 207, 114, 114, 187, 187, 114, 114, 114, 114, 114, 187, 208, 207, 209, 114, 114, 187, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 187, 187, 114, 208, 208, 114, 187, 187, 114, 114, 114, 114, 114, 209, 207, 206, 209, 114, 114, 187, 187, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 114, 187, 187, 114, 114, 207, 209, 114, 187, 114, 114, 114, 114, 114, 208, 202, 208, 114, 114, 114, 187, 187, 114, 6, 6, 6, 6, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 187, 186, 114, 114, 187, 207, 208, 187, 114, 114, 114, 114, 114, 207, 207, 208, 114, 114, 114, 187, 187, 114, 187, 6, 6, 6, 6, 6, 6, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 114, 114, 114, 6, 114, 18, 209, 6, 6, 114, 114, 6, 114, 18, 114, 6, 114, 114, 114, 114, 6, 114, 114, 6, 6, 6, 6, 6, 6, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 177, 114, 6, 6, 6, 6, 6, 210, 18, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 18, 6, 6, 6, 6, 6, 6, 208, 208, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0
	                                  DB                   0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 208, 17, 6, 42, 6, 6, 6, 6, 18, 208, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0
	                                  DB                   0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 177, 208, 42, 42, 42, 42, 42, 210, 176, 209, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0
	                                  DB                   0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 176, 208, 42, 42, 42, 42, 42, 114, 176, 208, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0
	                                  DB                   0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 6, 176, 208, 42, 42, 42, 42, 43, 6, 177, 18, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0
	                                  DB                   0, 0, 0, 42, 42, 42, 42, 42, 42, 6, 42, 42, 6, 115, 6, 114, 178, 209, 6, 6, 42, 42, 42, 114, 176, 18, 6, 42, 42, 6, 115, 6, 42, 42, 42, 42, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 42, 42, 42, 42, 42, 6, 6, 114, 187, 186, 114, 6, 6, 210, 177, 176, 208, 114, 6, 114, 114, 114, 207, 178, 114, 114, 187, 186, 6, 42, 42, 42, 42, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 42, 42, 42, 42, 42, 6, 187, 187, 115, 6, 6, 114, 187, 208, 114, 114, 18, 18, 18, 18, 114, 6, 6, 18, 178, 18, 6, 6, 42, 42, 42, 42, 42, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 6, 114, 6, 115, 187, 187, 115, 114, 207, 115, 114, 187, 114, 114, 209, 18, 18, 114, 6, 6, 209, 207, 208, 6, 43, 42, 42, 42, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 42, 114, 187, 187, 115, 6, 6, 207, 208, 187, 114, 6, 6, 6, 187, 114, 209, 208, 42, 6, 114, 186, 208, 210, 6, 42, 42, 42, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 6, 187, 6, 6, 6, 114, 209, 18, 114, 42, 6, 114, 187, 187, 115, 6, 6, 208, 187, 187, 114, 6, 6, 6, 6, 6, 42, 6, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 42, 6, 6, 114, 187, 114, 209, 207, 6, 114, 187, 187, 6, 6, 6, 114, 187, 208, 114, 6, 6, 187, 114, 42, 42, 42, 42, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 42, 114, 186, 187, 6, 6, 208, 18, 187, 187, 6, 6, 6, 114, 187, 187, 114, 114, 114, 187, 187, 187, 6, 42, 42, 42, 42, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 18, 114, 42, 42, 42, 42, 6, 6, 6, 42, 42, 114, 6, 6, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	samer00                           DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 18, 18, 17, 16, 16, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 18, 18, 18, 17, 17, 0, 0, 17, 18, 244, 21
	                                  DB                   21, 245, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 27, 28, 27, 27, 28, 23, 16, 0, 0, 16, 25, 31, 30, 30, 30, 22, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 23, 31, 31, 31, 31
	                                  DB                   21, 0, 0, 0, 0, 229, 28, 31, 31, 31, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 28, 31, 31, 18, 0, 0, 0, 0, 0, 174, 31, 31, 23, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 24, 27, 25, 224, 0, 0, 0, 0, 16, 163, 25, 27, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 25, 140, 17, 0, 0, 0, 0, 209, 67, 65
	                                  DB                   136, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 67, 66, 210, 0, 0, 0, 16, 164, 67, 66, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 67, 67
	                                  DB                   137, 0, 0, 0, 210, 66, 65, 65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 67, 65, 236, 16, 207, 17, 236, 164, 164, 137, 16, 17, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 137, 139, 211, 209, 18, 136, 136, 214, 209, 18, 17, 232, 136, 207, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 210, 211, 211, 209, 136, 136, 212, 236, 211, 18
	                                  DB                   136, 12, 136, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 209, 212, 212, 236, 211, 208, 136, 212, 236, 211, 18, 136, 12, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 211, 212
	                                  DB                   212, 212, 209, 209, 212, 236, 210, 18, 136, 39, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 137, 212, 212, 210, 211, 212, 212, 210, 209, 136, 137, 139, 208, 16, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 18, 187, 186, 186, 210, 211, 211, 210, 17, 111, 136, 66, 91, 66, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 22, 25, 26, 27, 26, 26, 24, 171, 136
	                                  DB                   136, 67, 66, 66, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21, 28, 25, 24, 22, 22, 22, 21, 171, 136, 111, 164, 66, 65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 244
	                                  DB                   18, 19, 244, 20, 20, 19, 18, 208, 39, 111, 66, 139, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 17, 21, 21, 20, 20, 20, 21, 245, 219, 207, 4, 161, 66, 17, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 139, 25, 137
	                                  DB                   16, 0, 0, 0, 0, 0, 17, 20, 21, 20, 20, 20, 21, 245, 222, 207, 111, 65, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 65, 164, 65, 65, 139, 138, 211, 17, 16, 16, 20, 21, 20, 20, 20, 21, 20, 223, 184
	                                  DB                   138, 68, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 209, 164, 65, 66, 65, 66, 67, 67, 66, 211, 16, 19, 21, 20, 20, 20, 21, 224, 18, 18, 20, 65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 0, 0, 18, 17, 21, 25, 212, 16, 17, 236, 139, 164, 19, 21, 20
	                                  DB                   20, 20, 21, 21, 20, 18, 27, 29, 245, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 16, 18, 247, 224, 224, 224, 19, 18, 17, 24, 173, 0, 0, 0, 0, 0, 16, 23, 30, 21, 20, 244, 18, 245, 19, 25, 31, 31, 27, 17, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 20, 223, 224, 18, 235, 20, 19, 24, 27, 21, 16
	                                  DB                   0, 0, 0, 0, 16, 23, 31, 24, 17, 22, 26, 22, 18, 30, 30, 28, 23, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 24, 20, 18, 19, 18, 18, 224, 18, 224, 24, 24, 17, 16, 0, 0, 0, 0, 0, 16, 22, 24, 18, 26, 26, 27, 23, 23, 25, 20
	                                  DB                   16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 28, 21, 18, 235, 20
	                                  DB                   78, 79, 21, 22, 27, 20, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 139, 139, 222, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 25, 23, 20, 22, 21, 173, 246, 224, 19, 18, 16, 0, 0, 0, 0, 16, 18, 138, 164, 164, 164
	                                  DB                   164, 139, 164, 137, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 16, 16, 17, 26, 22, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 24, 66, 67, 67, 67, 67, 67, 67, 66, 66, 65, 164, 138, 209, 16, 16, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   16, 65, 91, 66, 25, 139, 139, 164, 66, 66, 66, 66, 66, 66, 65, 65, 164, 236, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 67, 66, 66, 65, 65, 65, 164, 65, 66, 66, 66, 66, 66, 65, 12
	                                  DB                   65, 65, 164, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 235, 67, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 12, 12, 12, 65, 65, 210, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 67, 67, 65, 65, 66, 66, 66
	                                  DB                   66, 66, 66, 66, 66, 66, 66, 65, 12, 12, 64, 65, 65, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 65, 25, 138, 164, 66, 66, 66, 66, 66, 66, 164, 65, 66, 66, 65, 12, 64, 12, 12, 65, 65, 140, 210
	                                  DB                   16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   18, 26, 28, 23, 138, 65, 66, 66, 66, 65, 24, 26, 23, 139, 66, 66, 64, 65, 139, 17, 139, 66, 65, 65, 139, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 21, 28, 31, 24, 66, 66, 66, 65, 22, 172, 28, 31, 25, 163, 66
	                                  DB                   65, 65, 138, 16, 210, 65, 64, 65, 66, 139, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 17, 19, 17, 22, 31, 24, 65, 66, 66, 24, 152, 18, 17, 28, 31, 23, 164, 65, 65, 138, 17, 17, 140, 65, 12, 65, 65, 209, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 21, 17, 23, 101, 23, 65, 66, 66
	                                  DB                   24, 246, 19, 17, 25, 31, 24, 164, 65, 65, 139, 17, 18, 208, 65, 65, 12, 66, 212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 21, 27, 101, 25, 164, 66, 66, 66, 164, 172, 246, 20, 28, 101, 23, 164, 65, 65, 139, 17, 19, 17, 211, 65
	                                  DB                   66, 65, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 19
	                                  DB                   17, 24, 26, 24, 66, 66, 66, 67, 66, 22, 79, 102, 102, 24, 164, 66, 12, 65, 140, 17, 19, 19, 17, 211, 139, 18, 16, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 21, 18, 16, 137, 140, 65, 66, 66, 65, 66, 66, 24, 25, 24, 18, 25, 66
	                                  DB                   12, 65, 137, 17, 19, 19, 19, 18, 17, 17, 17, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 16, 16, 19, 20, 20, 17, 17, 16, 139, 67, 67, 137, 17, 24, 65, 139, 210, 16, 25, 66, 65, 164, 17, 224, 19, 19, 19, 19, 19, 232, 224, 19, 17, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 20, 19, 236, 17, 210, 65, 65, 66, 164
	                                  DB                   16, 17, 18, 18, 18, 24, 67, 65, 65, 138, 17, 19, 19, 19, 19, 19, 19, 19, 19, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 16, 20, 19, 19, 19, 17, 138, 65, 65, 65, 18, 16, 17, 211, 65, 67, 65, 12, 65, 137, 17, 19, 19, 19, 19, 19
	                                  DB                   19, 232, 19, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 20, 16, 232
	                                  DB                   20, 19, 235, 19, 16, 210, 164, 66, 164, 17, 224, 18, 210, 137, 140, 65, 66, 137, 17, 19, 19, 19, 19, 19, 19, 224, 19, 235, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21, 224, 17, 20, 19, 19, 235, 237, 17, 17, 137, 12, 211, 18, 19, 18, 17, 18, 210
	                                  DB                   138, 210, 18, 19, 19, 19, 19, 19, 19, 19, 19, 235, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 16, 19, 21, 19, 20, 19, 19, 19, 19, 236, 19, 17, 18, 209, 17, 19, 19, 19, 19, 18, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 235, 19, 16, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 21, 20, 20, 20, 19, 19, 19, 19, 19, 235
	                                  DB                   19, 240, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 236, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 20, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20
	                                  DB                   21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20, 21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 235, 20, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 16, 16, 16, 224, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 235, 19, 17, 16, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 19, 17, 19, 20, 235, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 232, 21, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 16
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   16, 18, 21, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 236, 20, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 20, 21, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 20, 19, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 20, 21, 20, 20, 19, 19, 19, 19, 19, 19, 235, 20, 20, 235, 18, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 19
	                                  DB                   235, 20, 20, 20, 20, 236, 19, 19, 224, 18, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 17, 17, 17, 17, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	samer01                           DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 18, 17, 16, 16, 17, 18, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 17, 17, 16, 17, 17, 16, 16, 17, 0, 0, 0, 17, 17, 224, 19, 18, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 25, 25, 25, 25, 26, 23, 17, 0, 0, 0, 21, 29, 28
	                                  DB                   29, 29, 24, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 25, 31, 31, 31, 31, 24, 16, 0, 0, 0, 19, 29, 31, 31, 31, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 28, 31, 31
	                                  DB                   19, 0, 0, 0, 0, 0, 224, 31, 31, 29, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 24, 31, 28, 20, 0, 0, 0, 0, 0, 233, 26, 31, 24, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 20, 24, 164, 18, 0, 0, 0, 0, 16, 164, 65, 164, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 66, 67, 137, 0, 0, 0, 0, 211, 67, 66
	                                  DB                   65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 66, 67, 139, 16, 0, 0, 16, 164, 66, 66, 139, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 67, 66
	                                  DB                   139, 16, 18, 0, 209, 64, 12, 64, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 65, 139, 210, 17, 136, 136, 211, 211, 211, 209, 18, 232, 208, 18, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 209, 235, 209, 209, 187, 136, 136, 212, 212, 211, 186, 209, 136, 12, 207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 212, 212, 236, 210, 209, 136, 212, 212, 211, 209
	                                  DB                   209, 136, 136, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 212, 212, 212, 212, 210, 209, 212, 212, 211, 18, 209, 12, 136, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 210, 137
	                                  DB                   212, 212, 210, 209, 137, 236, 211, 18, 136, 39, 208, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 16, 0, 0, 209, 137, 212, 187, 186, 186, 186, 187, 187, 209, 111, 138, 66, 65, 208, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 210, 65, 139, 16, 0, 17, 17, 210, 161, 23, 24, 24, 163, 235, 208, 111, 26, 91, 67, 140, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 66, 164, 24, 210, 0, 224, 26, 27, 27, 27, 26, 27, 25, 23, 159
	                                  DB                   112, 25, 67, 66, 140, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 17, 24, 66, 67, 140, 0, 20, 26, 21, 19, 224, 223, 224, 18, 218, 224, 4, 111, 164, 67, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 236, 164, 67, 139, 16, 222
	                                  DB                   20, 21, 21, 21, 21, 20, 243, 18, 136, 111, 164, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 164, 92, 138, 222, 21, 20, 20, 20, 21, 20, 243, 18, 4, 136, 66, 138, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 16, 25, 66, 224, 21, 20, 20, 20, 21, 20, 243, 232, 111, 164, 67, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 137, 19, 21, 20, 20, 20, 21, 20, 223, 16
	                                  DB                   208, 67, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 245, 20, 21, 20, 20, 20, 21, 19, 19, 22, 18, 164, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 30, 22
	                                  DB                   19, 21, 21, 21, 20, 18, 26, 31, 24, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 30, 24, 19, 245, 19, 19, 18, 24, 31, 29, 30, 21, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 22, 27, 18, 23, 26, 25, 18, 26, 31, 28, 23, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 17, 23, 26, 26, 25, 20, 23, 20
	                                  DB                   16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 139, 139, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 210, 163, 24, 65, 65
	                                  DB                   65, 25, 164, 139, 186, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 65, 67, 67, 66, 66, 67, 67, 67, 67, 67, 66, 65, 140, 138, 17, 16, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   16, 65, 67, 66, 65, 139, 138, 163, 66, 66, 66, 66, 66, 66, 65, 65, 65, 140, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 67, 66, 66, 65, 66, 66, 24, 65, 66, 66, 66, 66, 66, 66, 12
	                                  DB                   65, 65, 65, 138, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 211, 67, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 65, 12, 12, 65, 66, 164, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 67, 67, 65, 65, 66, 66, 66
	                                  DB                   66, 66, 66, 66, 66, 66, 66, 66, 12, 12, 64, 65, 66, 140, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 65, 25, 138, 139, 66, 66, 66, 66, 66, 66, 164, 164, 66, 66, 66, 65, 12, 65, 164, 12, 65, 164, 138
	                                  DB                   17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   18, 26, 29, 23, 138, 65, 66, 66, 66, 65, 23, 26, 25, 161, 65, 67, 65, 65, 12, 17, 209, 65, 65, 66, 65, 209, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 227, 21, 27, 31, 24, 66, 66, 66, 66, 163, 172, 26, 31, 29, 161, 65
	                                  DB                   65, 65, 12, 18, 16, 140, 65, 12, 65, 65, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 17, 19, 18, 21, 31, 24, 65, 66, 66, 24, 174, 19, 16, 25, 31, 26, 164, 66, 12, 12, 209, 17, 211, 65, 65, 12, 65, 164, 16, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 21, 17, 23, 101, 23, 65, 66, 66
	                                  DB                   25, 20, 19, 18, 22, 31, 26, 164, 65, 12, 12, 209, 224, 17, 139, 66, 12, 65, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 22, 26, 101, 79, 163, 66, 66, 66, 164, 172, 20, 18, 25, 101, 24, 164, 66, 12, 12, 209, 18, 18, 17, 12
	                                  DB                   66, 66, 139, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 19
	                                  DB                   17, 25, 26, 24, 66, 66, 66, 66, 66, 162, 25, 103, 101, 27, 163, 65, 65, 12, 65, 210, 18, 19, 18, 17, 139, 138, 16, 17, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 21, 18, 16, 137, 140, 66, 66, 66, 65, 66, 66, 23, 25, 25, 235, 139, 67
	                                  DB                   64, 65, 164, 18, 224, 19, 19, 18, 17, 17, 16, 18, 232, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 19, 20, 236, 17, 17, 16, 138, 67, 67, 163, 17, 24, 65, 140, 138, 16, 138, 66, 12, 65, 212, 17, 19, 19, 232, 19, 19, 19, 18, 232, 224, 16, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 20, 19, 235, 16, 210, 65, 65, 66, 25
	                                  DB                   16, 17, 18, 18, 16, 20, 66, 66, 12, 12, 209, 18, 19, 19, 19, 19, 19, 19, 19, 19, 224, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 17, 20, 19, 235, 19, 18, 139, 65, 65, 66, 211, 16, 17, 209, 164, 66, 66, 65, 65, 140, 18, 240, 19, 19, 19, 19
	                                  DB                   19, 19, 232, 19, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 20, 16, 19
	                                  DB                   20, 19, 236, 19, 16, 211, 65, 66, 164, 17, 18, 18, 137, 138, 140, 65, 66, 164, 17, 19, 19, 19, 19, 19, 19, 19, 232, 19, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21, 18, 17, 20, 19, 19, 235, 19, 17, 17, 138, 65, 138, 18, 19, 18, 17, 18, 211
	                                  DB                   139, 138, 17, 19, 19, 19, 19, 19, 19, 19, 19, 235, 232, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 16, 235, 21, 18, 20, 19, 19, 19, 19, 236, 18, 16, 209, 210, 17, 19, 19, 19, 224, 17, 17, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 236, 224, 16, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 21, 20, 20, 20, 19, 19, 19, 19, 19, 235
	                                  DB                   224, 18, 18, 224, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20, 20, 19, 235, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 232, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 20, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 21
	                                  DB                   20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 21, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 19, 235, 20, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 16, 16, 17, 20, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 235, 19, 18, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 17, 16, 19, 20, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 236, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20, 20, 19, 20, 235, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 224
	                                  DB                   16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   16, 20, 21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 236, 235, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 232, 21, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 20, 235, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 20, 21, 20, 235, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 232, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 19, 20
	                                  DB                   20, 20, 20, 20, 236, 236, 20, 20, 20, 19, 224, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 18, 18, 19, 19, 19, 224, 18, 18, 17, 16, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 17, 17, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	samer10                           DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 18, 18, 17, 16, 16, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 18, 17, 224, 20
	                                  DB                   20, 18, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 26, 27, 26, 26, 27, 22, 17, 0, 0, 16, 25, 30, 29, 30, 29, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 24, 31, 31, 31, 31
	                                  DB                   21, 0, 0, 0, 0, 21, 30, 31, 31, 31, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 28, 31, 30, 18, 0, 0, 0, 0, 0, 23, 31, 31, 23, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 24, 28, 25, 224, 0, 0, 0, 0, 16, 162, 26, 28, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 236, 25, 140, 17, 0, 0, 0, 0, 18, 66, 65
	                                  DB                   212, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 67, 66, 209, 0, 0, 0, 16, 164, 67, 66, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 67, 66
	                                  DB                   137, 0, 0, 0, 210, 66, 65, 65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 67, 66, 236, 16, 232, 17, 137, 164, 164, 137, 16, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 137, 164, 211, 209, 18, 136, 136, 214, 209, 209, 17, 232, 136, 207, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 210, 211, 211, 209, 136, 136, 212, 137, 210, 18
	                                  DB                   136, 12, 136, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 210, 212, 212, 236, 210, 208, 136, 212, 236, 210, 18, 136, 12, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 212, 212
	                                  DB                   212, 212, 209, 210, 212, 212, 210, 18, 136, 39, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 210, 137, 212, 212, 210, 211, 137, 212, 210, 209, 136, 136, 138, 17, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 18, 187, 186, 186, 209, 210, 209, 186, 17, 111, 136, 27, 67, 65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 161, 25, 26, 26, 26, 26, 24, 170, 111
	                                  DB                   137, 67, 66, 66, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 22, 28, 26, 24, 23, 23, 23, 22, 173, 136, 136, 24, 66, 65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 20
	                                  DB                   18, 19, 243, 244, 244, 224, 17, 208, 39, 111, 66, 139, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 21, 21, 20, 20, 20, 21, 245, 222, 207, 4, 162, 66, 17, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 17, 20, 21, 20, 20, 20, 21, 245, 222, 136, 111, 65, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 0, 0, 0, 16, 16, 20, 21, 20, 20, 20, 21, 20, 223, 184
	                                  DB                   6, 67, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 210, 164, 139, 209, 209, 138, 164, 236, 16, 19, 21, 20, 20, 20, 21, 19, 18, 17, 139, 65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 164, 65, 164, 67, 66, 68, 66, 223, 20, 20
	                                  DB                   21, 20, 21, 21, 20, 18, 27, 28, 246, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 65, 66, 24, 211, 235, 18, 173, 30, 21, 20, 244, 18, 244, 19, 25, 31, 31, 26, 17, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 210, 24
	                                  DB                   23, 16, 0, 0, 16, 24, 31, 23, 17, 22, 26, 21, 224, 30, 30, 28, 23, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 16, 175, 23, 16, 0, 0, 0, 16, 23, 24, 18, 26, 26, 27, 23, 24, 26, 20
	                                  DB                   16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 16, 18, 18, 18, 224, 19, 24, 24, 17, 0, 0, 0, 0, 16, 16, 16, 16, 140, 163, 246, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 246, 246, 19, 20, 224, 21, 26, 21, 0, 16, 18, 137, 139, 164, 164
	                                  DB                   140, 138, 164, 211, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78
	                                  DB                   78, 0, 0, 0, 0, 0, 0, 18, 20, 18, 224, 17, 17, 18, 237, 28, 245, 16, 164, 66, 67, 67, 67, 67, 67, 67, 66, 66, 65, 140, 138, 208, 16, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 78, 78, 78, 78, 0, 0, 16, 19, 19, 232, 18, 173, 25, 22, 22, 22
	                                  DB                   17, 164, 91, 66, 25, 163, 139, 24, 66, 66, 66, 66, 66, 66, 65, 65, 164, 211, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 150, 163, 21, 18, 235, 243, 78, 25, 223, 17, 0, 18, 67, 66, 66, 65, 65, 65, 164, 66, 66, 66, 66, 66, 66, 65, 12
	                                  DB                   65, 65, 164, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 24, 23, 25
	                                  DB                   20, 21, 22, 17, 0, 0, 0, 0, 235, 67, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 12, 12, 64, 65, 65, 208, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 175, 21, 20, 26, 243, 0, 0, 0, 0, 0, 210, 67, 67, 65, 65, 66, 66, 66
	                                  DB                   66, 66, 66, 66, 66, 66, 66, 65, 12, 12, 64, 65, 65, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 78, 78, 78, 78
	                                  DB                   78, 78, 78, 78, 78, 77, 79, 0, 16, 22, 17, 0, 0, 0, 0, 0, 210, 65, 25, 138, 164, 66, 66, 66, 66, 66, 66, 164, 65, 66, 66, 65, 12, 64, 12, 12, 65, 65, 139, 208
	                                  DB                   16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 77, 0, 16, 16, 0, 0, 0, 0, 0, 0
	                                  DB                   18, 26, 28, 22, 138, 65, 66, 66, 66, 65, 24, 25, 23, 163, 66, 66, 12, 65, 138, 17, 139, 66, 65, 65, 138, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78
	                                  DB                   78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 21, 29, 31, 24, 66, 66, 66, 65, 22, 172, 28, 31, 25, 164, 66
	                                  DB                   65, 65, 138, 16, 211, 65, 12, 65, 66, 138, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 17, 19, 17, 22, 31, 24, 65, 66, 66, 24, 152, 18, 17, 28, 31, 23, 164, 65, 65, 138, 17, 17, 140, 65, 12, 65, 65, 18, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 0, 0, 78, 78, 78, 0, 0, 78, 78, 0, 0, 0, 0, 0, 0, 0, 16, 17, 21, 17, 23, 101, 23, 65, 66, 66
	                                  DB                   24, 246, 19, 17, 25, 31, 24, 164, 65, 65, 138, 17, 18, 210, 65, 65, 12, 66, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 0, 0, 78
	                                  DB                   78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 21, 27, 101, 25, 164, 66, 66, 66, 23, 172, 19, 20, 28, 102, 23, 12, 65, 65, 139, 17, 19, 17, 137, 66
	                                  DB                   66, 12, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 0, 0, 0, 78, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 19
	                                  DB                   17, 25, 26, 24, 66, 66, 66, 67, 65, 22, 79, 102, 102, 24, 164, 66, 12, 65, 139, 17, 19, 240, 17, 212, 139, 17, 16, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78
	                                  DB                   78, 78, 78, 0, 0, 0, 0, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 21, 18, 16, 137, 140, 65, 66, 66, 65, 66, 66, 24, 25, 23, 208, 65, 66
	                                  DB                   12, 65, 137, 17, 19, 19, 19, 17, 17, 17, 17, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 16, 16, 19, 20, 20, 17, 17, 16, 139, 67, 67, 236, 17, 24, 25, 139, 209, 16, 25, 66, 65, 164, 17, 19, 19, 19, 19, 19, 19, 224, 224, 19, 17, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 20, 19, 236, 17, 211, 65, 65, 66, 164
	                                  DB                   16, 17, 18, 18, 18, 24, 67, 65, 65, 138, 17, 19, 19, 19, 19, 19, 19, 19, 19, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 16, 20, 19, 19, 19, 17, 138, 65, 65, 65, 18, 16, 17, 212, 65, 67, 65, 12, 65, 236, 17, 19, 19, 19, 19, 19
	                                  DB                   19, 232, 19, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 20, 16, 224
	                                  DB                   20, 19, 235, 19, 16, 210, 164, 66, 140, 17, 224, 18, 210, 137, 140, 65, 66, 137, 17, 19, 19, 19, 19, 19, 19, 224, 19, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21, 232, 17, 20, 19, 19, 235, 237, 17, 17, 137, 12, 211, 18, 19, 18, 17, 18, 211
	                                  DB                   138, 209, 18, 19, 19, 19, 19, 19, 19, 19, 235, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 16, 19, 21, 19, 20, 19, 19, 19, 19, 236, 19, 17, 18, 209, 17, 19, 19, 19, 19, 18, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 235, 19, 16, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 21, 20, 20, 20, 19, 19, 19, 19, 19, 235
	                                  DB                   19, 240, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 20, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20
	                                  DB                   21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 224, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20, 21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 235, 20, 224, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 16, 16, 16, 18, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 235, 19, 17, 16, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 19, 17, 19, 20, 235, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 224, 21, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 16
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   16, 18, 21, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 235, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 20, 21, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 235, 20, 19, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 20, 21, 20, 20, 19, 19, 19, 19, 19, 19, 235, 20, 20, 19, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 232
	                                  DB                   19, 20, 20, 20, 236, 235, 19, 19, 18, 18, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 17, 17, 17, 17, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	samer11                           DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 17, 17, 17, 17, 18, 0, 0, 0, 0, 0, 0, 0, 18, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 17, 16, 18, 19, 19, 17, 17, 0, 0, 0, 0, 0, 0, 18
	                                  DB                   27, 24, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 25, 27, 28, 29, 31, 24, 16, 0, 0, 0, 0, 0, 0, 16, 26, 31, 25, 18, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 26, 31, 31, 31, 31, 24
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 16, 21, 31, 31, 26, 18, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 232, 30, 31, 27, 16, 0, 0, 0, 0, 0, 0, 0, 245, 31, 31, 31, 31, 23, 16, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 18, 28, 29, 20, 16, 0, 0, 0, 0, 0, 0, 17, 24, 27, 30, 28, 25, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 162, 24, 140, 17, 0, 0, 0, 0, 0, 16, 25, 67
	                                  DB                   140, 234, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 91, 66, 211, 0, 0, 0, 0, 16, 139, 67, 66, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 67, 66, 139
	                                  DB                   0, 0, 0, 0, 211, 66, 65, 66, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 65, 65, 139, 17, 18, 207, 17, 138, 12, 164, 139, 17, 18, 18, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 17, 65, 164, 209, 209, 18, 136, 136, 211, 210, 209, 208, 136, 136, 136, 136, 207, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 137, 236, 211, 210, 209, 208, 211, 137, 212, 210, 18
	                                  DB                   136, 12, 136, 136, 136, 136, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 212, 236, 236, 209, 18, 236, 212, 212, 210, 18, 136, 136, 136, 136, 12, 136, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 211, 137
	                                  DB                   211, 208, 18, 211, 137, 212, 209, 18, 136, 136, 136, 136, 136, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 212, 211, 65, 64, 211, 210, 212, 209, 209, 136, 136, 136, 136, 207, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 18, 16, 164, 91, 66, 65, 210, 17, 17, 208, 136, 136, 136, 136, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20, 25, 67, 67, 66, 139, 150, 172, 136
	                                  DB                   136, 136, 136, 207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21, 29, 175, 138, 139, 164, 66, 20, 149, 136, 4, 136, 136, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 20
	                                  DB                   246, 246, 222, 223, 66, 12, 16, 208, 136, 136, 136, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 21, 21, 21, 21, 221, 21, 67, 139, 183, 39, 136, 136, 18, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 17, 21, 21, 20, 20, 21, 247, 65, 164, 183, 136, 12, 136, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 0, 0, 16, 0, 16, 20, 21, 20, 20, 21, 19, 17, 18, 18
	                                  DB                   208, 12, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 137, 164, 138, 208, 210, 139, 164, 236, 16, 19, 21, 20, 20, 20, 245, 24, 27, 25, 136, 39, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 65, 24, 25, 67, 66, 91, 65, 18, 21, 20
	                                  DB                   21, 20, 21, 20, 20, 29, 31, 28, 135, 4, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 164, 65, 66, 163, 18, 209, 17, 22, 30, 21, 20, 245, 18, 245, 19, 27, 31, 27, 135, 111, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 235, 24
	                                  DB                   162, 16, 0, 0, 16, 24, 31, 23, 17, 22, 26, 22, 17, 22, 30, 25, 208, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 16, 24, 22, 16, 0, 0, 0, 16, 23, 24, 18, 26, 25, 27, 24, 17, 230, 136
	                                  DB                   18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   16, 16, 18, 18, 19, 18, 20, 25, 23, 16, 0, 0, 16, 0, 16, 16, 16, 16, 140, 138, 223, 17, 183, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 246, 224, 19, 20, 18, 22, 26, 19, 0, 16, 18, 138, 163, 164, 164
	                                  DB                   164, 139, 164, 212, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78
	                                  DB                   78, 0, 0, 0, 0, 0, 16, 19, 246, 18, 18, 17, 17, 18, 21, 28, 18, 16, 164, 66, 67, 67, 67, 67, 67, 67, 66, 66, 65, 140, 138, 18, 16, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 0, 0, 0, 0, 0, 78, 78, 78, 78, 0, 0, 16, 19, 232, 210, 18, 24, 25, 21, 22, 21
	                                  DB                   16, 24, 91, 66, 65, 139, 138, 164, 66, 66, 66, 66, 66, 66, 65, 65, 164, 210, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 21, 24, 20, 18, 235, 21, 78, 172, 17, 17, 0, 209, 67, 66, 66, 65, 65, 65, 164, 66, 66, 66, 66, 66, 66, 65, 12
	                                  DB                   65, 66, 164, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 172, 24, 25
	                                  DB                   20, 22, 21, 16, 0, 0, 0, 0, 211, 67, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 12, 12, 12, 65, 65, 209, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 20, 20, 21, 26, 18, 0, 0, 0, 0, 0, 210, 67, 67, 65, 65, 66, 66, 66
	                                  DB                   66, 66, 66, 66, 66, 66, 66, 65, 12, 12, 65, 65, 65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 78, 78, 78, 78
	                                  DB                   78, 78, 78, 78, 78, 77, 172, 0, 17, 21, 16, 0, 0, 0, 0, 0, 209, 65, 65, 138, 164, 66, 66, 66, 66, 66, 66, 164, 65, 66, 66, 65, 12, 65, 12, 12, 65, 65, 139, 208
	                                  DB                   16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 77, 0, 16, 16, 0, 0, 0, 0, 0, 0
	                                  DB                   18, 26, 29, 23, 138, 65, 66, 66, 66, 65, 24, 26, 23, 139, 66, 66, 12, 65, 138, 16, 139, 66, 65, 65, 138, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 78
	                                  DB                   78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 227, 21, 28, 31, 24, 66, 66, 66, 65, 21, 23, 28, 31, 25, 163, 66
	                                  DB                   65, 65, 138, 16, 211, 65, 12, 65, 66, 138, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 17, 19, 18, 22, 31, 24, 65, 66, 66, 24, 152, 18, 17, 28, 31, 23, 164, 65, 65, 138, 17, 17, 140, 65, 12, 65, 65, 18, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 0, 78, 78, 78, 78, 0, 0, 78, 78, 0, 0, 0, 0, 0, 0, 0, 16, 17, 21, 17, 23, 101, 23, 65, 66, 66
	                                  DB                   24, 245, 19, 18, 26, 31, 24, 140, 65, 65, 138, 17, 18, 209, 65, 65, 12, 65, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 0, 0, 78
	                                  DB                   78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 21, 27, 101, 24, 164, 66, 66, 66, 164, 172, 245, 20, 28, 102, 23, 65, 65, 65, 139, 17, 19, 17, 212, 65
	                                  DB                   66, 164, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 0, 0, 0, 78, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 237
	                                  DB                   16, 24, 26, 24, 66, 66, 66, 67, 66, 22, 79, 102, 102, 24, 164, 66, 12, 65, 140, 17, 19, 19, 17, 211, 138, 17, 16, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   78, 78, 78, 0, 0, 0, 0, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 21, 18, 16, 137, 139, 65, 66, 66, 65, 66, 66, 24, 25, 23, 18, 65, 66
	                                  DB                   12, 65, 137, 17, 19, 19, 19, 18, 17, 17, 17, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 19, 20, 20, 17, 16, 16, 139, 67, 67, 137, 17, 164, 65, 139, 209, 16, 65, 66, 65, 140, 17, 19, 19, 19, 19, 19, 19, 232, 224, 19, 17, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 20, 19, 236, 17, 210, 65, 65, 66, 164
	                                  DB                   16, 17, 17, 18, 18, 25, 67, 65, 65, 138, 17, 19, 19, 19, 19, 19, 19, 19, 19, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 16, 20, 19, 19, 19, 17, 137, 65, 65, 65, 209, 16, 17, 211, 65, 67, 65, 65, 65, 137, 17, 19, 19, 19, 19, 19
	                                  DB                   19, 232, 19, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 20, 17, 19
	                                  DB                   20, 19, 235, 19, 17, 209, 164, 66, 164, 17, 240, 18, 209, 137, 140, 65, 66, 137, 17, 19, 19, 19, 19, 19, 19, 224, 19, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20, 19, 17, 20, 19, 19, 19, 235, 17, 17, 137, 12, 210, 17, 19, 18, 17, 17, 210
	                                  DB                   138, 209, 18, 19, 19, 19, 19, 19, 19, 19, 235, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 16, 19, 21, 19, 20, 19, 19, 19, 19, 236, 19, 17, 18, 18, 17, 19, 19, 19, 19, 18, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 237, 19, 16, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 21, 20, 20, 20, 19, 19, 19, 19, 19, 235
	                                  DB                   19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 20, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 235
	                                  DB                   21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 235, 21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 235, 20, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 16, 16, 16, 18, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 236, 19, 16, 16, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 19, 17, 19, 20, 235, 19, 19, 19
	                                  DB                   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 22, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 16
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   16, 17, 21, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 235, 21, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                                  DB                   19, 19, 235, 20, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 235, 21, 20, 20, 235, 19, 19, 19, 19, 235, 236, 20, 20, 19, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 18
	                                  DB                   19, 235, 236, 236, 235, 19, 19, 19, 18, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 17, 17, 17, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	tamer00                           DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 16
	                                  DB                   16, 16, 17, 18, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 17, 18, 17, 16, 17, 0, 0, 0, 17, 16, 16, 16, 16, 16, 17, 17, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 17, 24, 28, 28, 27, 28, 19, 0, 0, 0, 18, 23, 24, 24, 24, 24, 22, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 28, 31, 31, 31, 29, 232, 0, 0, 0, 17
	                                  DB                   27, 31, 31, 31, 31, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 30, 31, 31, 18, 0, 0, 0, 0, 0, 22, 31, 31, 27, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 26
	                                  DB                   31, 26, 18, 0, 0, 0, 0, 17, 22, 29, 31, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 235, 164, 65, 139, 16, 0, 0, 0, 0, 210, 24, 24, 19, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 17, 65, 67, 67, 18, 0, 0, 0, 16, 139, 67, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 140, 66, 66, 140, 16, 0, 0, 16
	                                  DB                   164, 67, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 65, 12, 164, 17, 0, 0, 16, 164, 67, 66, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 201, 224
	                                  DB                   18, 208, 209, 209, 209, 128, 202, 185, 234, 139, 65, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 9, 55, 207, 184, 208, 208, 208, 55, 203, 185, 183, 182, 232, 18, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 201, 9, 55, 207, 185, 208, 209, 208, 128, 203, 186, 207, 207, 208, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 128, 55, 202, 185, 208, 207, 208, 201, 206, 209
	                                  DB                   207, 207, 208, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 105, 55, 128, 185, 208, 207, 207, 208, 208, 207, 207, 207, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 65, 66, 154
	                                  DB                   1, 185, 185, 183, 184, 184, 184, 183, 208, 207, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 164, 67, 68, 25, 1, 202, 235, 23, 24, 24, 23, 160, 208, 16, 17, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 140, 66, 67, 164, 104, 174, 23, 24, 26, 25, 26, 27, 27, 26, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 67, 164, 1, 1, 17, 16, 16, 16, 16, 16, 183
	                                  DB                   229, 24, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 65, 24, 32, 128, 16, 183, 182, 182, 182, 182, 182, 183, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 66, 128
	                                  DB                   1, 16, 183, 182, 182, 182, 182, 182, 182, 182, 16, 0, 0, 0, 0, 0, 0, 18, 137, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 67, 24, 1, 17, 183, 182, 182, 182, 182, 182, 182, 17, 16, 0, 16, 16, 17, 16
	                                  DB                   137, 24, 66, 163, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 65, 67, 17, 16, 16, 182, 182, 182, 182, 182, 182, 17, 16, 210, 164, 65, 66, 66, 67, 25, 24, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 210, 16, 24, 224, 16, 182, 182, 182, 182
	                                  DB                   182, 18, 16, 163, 68, 66, 65, 138, 236, 66, 65, 138, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 27, 31, 27, 16, 182, 183, 183, 182, 16, 24, 24, 16, 209, 16, 16, 0, 0, 17, 24, 19, 16, 18, 16, 17
	                                  DB                   223, 17, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 22
	                                  DB                   30, 29, 31, 23, 16, 18, 18, 183, 16, 25, 31, 230, 16, 0, 0, 0, 0, 16, 25, 24, 224, 240, 20, 19, 224, 224, 247, 20, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 22, 27, 31, 24, 228, 26, 28, 159, 17, 29, 27, 17, 0, 0, 0, 0
	                                  DB                   0, 16, 21, 27, 23, 18, 240, 217, 217, 224, 18, 237, 19, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 21, 19, 26, 25, 25, 244, 17, 20, 16, 0, 0, 0, 0, 0, 0, 0, 16, 26, 24, 242, 234, 111, 208, 215, 235, 17, 22, 26, 18, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 164, 137, 16
	                                  DB                   17, 16, 17, 16, 16, 16, 0, 0, 0, 0, 0, 21, 24, 174, 21, 136, 136, 20, 21, 224, 24, 27, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 210, 138, 164, 24, 66, 66, 66, 66, 65, 24, 138, 16, 0, 0, 0, 0, 16, 16, 17, 17, 16
	                                  DB                   17, 19, 24, 23, 21, 20, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16
	                                  DB                   235, 140, 12, 66, 67, 67, 66, 66, 66, 66, 66, 66, 67, 67, 65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 22, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 137, 64, 66, 65, 65, 66, 66, 66, 66, 66, 66, 66, 67, 66, 65, 66, 67, 24
	                                  DB                   16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 17, 164, 66, 65, 12, 64, 66, 66, 66, 66, 66, 66, 65, 164, 139, 139, 65, 66, 66, 66, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 65, 65, 12, 64, 12, 65, 66, 66, 66, 66, 66, 66
	                                  DB                   66, 65, 24, 65, 66, 66, 66, 65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 64, 66, 65, 64, 12, 65, 66, 66, 66, 67, 66, 66, 66, 66, 66, 66, 67, 164, 65, 67, 66, 16, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 210, 164, 65, 65, 140, 139, 64, 12
	                                  DB                   65, 66, 66, 164, 140, 164, 65, 66, 66, 66, 66, 65, 137, 138, 26, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 138, 66, 65, 65, 64, 16, 184, 65, 12, 65, 67, 164, 23, 28, 28, 23, 65, 66, 66, 66, 65, 162, 28, 102, 23
	                                  DB                   17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 66
	                                  DB                   65, 12, 65, 139, 184, 113, 65, 12, 66, 164, 23, 31, 30, 22, 23, 164, 66, 66, 66, 65, 25, 31, 136, 112, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 164, 65, 12, 65, 65, 186, 184, 208, 65, 12, 66, 163, 28, 31, 162, 184, 111, 173
	                                  DB                   65, 66, 66, 164, 26, 101, 113, 112, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 12, 65, 65, 66, 138, 184, 112, 208, 65, 12, 65, 23, 78, 100, 158, 184, 183, 173, 25, 67, 66, 65, 25, 101, 22, 229, 21, 16, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 235, 65, 66, 139, 184, 112, 184, 209, 65, 12
	                                  DB                   66, 164, 24, 101, 27, 21, 24, 24, 210, 139, 67, 164, 21, 27, 101, 27, 209, 112, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 184, 16, 208, 209, 184, 112, 112, 184, 209, 65, 12, 65, 66, 161, 24, 103, 103, 24, 164, 185, 209, 66, 185, 185, 163, 25, 20
	                                  DB                   16, 136, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 184, 184, 112
	                                  DB                   184, 112, 112, 112, 112, 184, 164, 65, 64, 66, 66, 163, 23, 24, 65, 139, 184, 139, 67, 138, 184, 184, 186, 185, 112, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 211, 65, 12, 65, 66, 67, 66, 65, 139, 184
	                                  DB                   208, 66, 67, 66, 164, 137, 16, 112, 113, 12, 207, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 112, 112, 112, 112, 112, 112, 112, 111, 111, 112, 185, 65, 12, 65, 67, 65, 208, 184, 184, 16, 236, 67, 65, 65, 65, 209, 184, 111, 111, 12, 17, 17, 16, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 112, 112, 112, 111, 111, 112, 111, 111, 112, 184, 164
	                                  DB                   65, 65, 66, 65, 137, 17, 184, 16, 139, 65, 65, 164, 17, 184, 111, 112, 136, 135, 16, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 111, 112, 112, 111, 111, 111, 111, 111, 112, 184, 25, 65, 164, 137, 208, 184, 112, 112, 211, 66, 65, 137, 16, 112, 111, 111, 112
	                                  DB                   12, 208, 207, 12, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 111, 111, 112
	                                  DB                   111, 111, 111, 111, 111, 112, 184, 210, 208, 184, 184, 184, 112, 112, 16, 140, 139, 185, 184, 112, 111, 111, 111, 111, 135, 208, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 184, 184, 112, 112, 111, 112, 112, 184, 185
	                                  DB                   184, 112, 111, 111, 111, 111, 112, 136, 12, 12, 12, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 111, 111, 111, 111, 111, 111, 111, 12, 136, 12, 12, 16, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 112, 112, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 136, 12, 208, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 136
	                                  DB                   64, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 136, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 136, 135, 17, 16, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 16, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 136, 12, 208, 208, 135, 17, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 136, 12, 12, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 111, 12, 12, 17
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 111, 12, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 111, 111, 111, 111, 111, 111, 111, 111, 112, 111, 111
	                                  DB                   136, 12, 12, 135, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183, 183, 111, 111, 111, 136, 136, 136, 135, 135, 136, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16
	                                  DB                   16, 16, 17, 17, 17, 208, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	tamer01                           DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 16, 16, 17, 17, 18, 0, 0, 0, 17, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 17
	                                  DB                   17, 16, 16, 18, 0, 0, 0, 17, 16, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 26, 26, 25, 23, 18, 0, 0, 0, 18, 22, 22, 22, 22, 21, 20, 17, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 21, 31, 31, 31, 31, 28, 17, 0, 0, 0, 18, 29, 31, 31, 31, 31, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 26, 31, 31, 28, 16, 0, 0, 0, 0, 16
	                                  DB                   24, 31, 31, 28, 21, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 31, 31, 24, 16, 0, 0, 0, 0, 16, 24, 31, 31, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 24
	                                  DB                   24, 24, 209, 0, 0, 0, 0, 17, 20, 25, 26, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 187, 66, 92, 164, 16, 0, 0, 0, 16, 139, 66, 140, 16, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 210, 65, 66, 66, 208, 0, 0, 0, 16, 65, 67, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 140, 66, 66, 164, 16, 0, 0, 17
	                                  DB                   65, 67, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 18, 17, 209, 139, 137, 137, 18, 223, 18, 18, 140, 65, 66, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 128, 128, 128
	                                  DB                   185, 183, 182, 183, 229, 55, 206, 185, 17, 209, 139, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 128, 9, 128, 185, 208, 207, 208, 230, 1, 208, 183, 207, 208, 208, 18, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 128, 9, 128, 185, 208, 207, 208, 206, 128, 208, 209, 207, 209, 208, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 55, 55, 208, 185, 207, 209, 207, 201, 208, 207
	                                  DB                   207, 207, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 139, 153, 55, 202, 185, 207, 207, 208, 208, 207, 207, 207, 207, 18, 0, 0, 16, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 65, 67, 14, 152
	                                  DB                   1, 184, 184, 183, 208, 183, 184, 184, 184, 208, 18, 0, 0, 236, 66, 138, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 66, 66, 67, 23, 1, 166, 23, 27, 28, 27, 27, 26, 23, 18, 0, 0, 17, 164, 164, 66
	                                  DB                   138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 17, 65, 66, 65, 129, 105, 162, 21, 21, 21, 159, 23, 25, 27, 27, 17, 0, 137, 66, 66, 66, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 139, 66, 105, 55, 105, 16, 16, 16, 183, 16, 16, 16
	                                  DB                   16, 206, 16, 211, 66, 65, 164, 137, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 66, 23, 32, 105, 16, 183, 182, 182, 182, 182, 182, 182, 16, 137, 67, 66, 16, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 65, 65, 1
	                                  DB                   105, 16, 183, 182, 182, 182, 182, 182, 182, 183, 67, 66, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 67, 23, 104, 16, 182, 182, 182, 182, 182, 182, 182, 208, 66, 18, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 17, 67, 164, 16, 16, 17, 182, 182, 182, 182, 182, 182, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 208, 16, 158, 27, 17, 183, 182, 182, 182, 182
	                                  DB                   16, 21, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 22, 31, 31, 25, 16, 182, 183, 183, 182, 16, 26, 31, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 25
	                                  DB                   29, 29, 31, 20, 16, 21, 231, 16, 16, 29, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 23, 27, 30, 21, 24, 26, 29, 20, 205, 28, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 16, 19, 17, 21, 26, 140, 163, 223, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 24, 18, 16
	                                  DB                   18, 18, 18, 17, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 209, 137, 140, 164, 65, 66, 66, 66, 66, 66, 65, 139, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18
	                                  DB                   139, 12, 65, 66, 67, 66, 66, 66, 66, 66, 66, 66, 67, 67, 66, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 140, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 67, 66, 65, 66, 67, 25
	                                  DB                   16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 137, 65, 65, 65, 12, 65, 66, 66, 66, 66, 66, 66, 65, 139, 138, 139, 65, 66, 66, 66, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 139, 66, 65, 12, 12, 12, 66, 66, 66, 66, 66, 66, 66
	                                  DB                   66, 65, 24, 65, 66, 66, 66, 66, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 137, 66, 65, 65, 12, 12, 65, 66, 66, 66, 67, 66, 66, 66, 66, 66, 66, 67, 164, 65, 67, 66, 16, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 138, 65, 65, 65, 139, 164, 65, 12
	                                  DB                   65, 66, 66, 164, 140, 164, 66, 66, 66, 66, 66, 65, 137, 138, 25, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 64, 66, 65, 65, 138, 16, 137, 65, 12, 66, 66, 139, 24, 28, 27, 164, 65, 66, 66, 66, 24, 139, 28, 102, 23
	                                  DB                   17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 65, 65
	                                  DB                   12, 65, 65, 208, 184, 138, 65, 12, 66, 163, 25, 31, 29, 23, 173, 164, 66, 66, 66, 65, 25, 31, 135, 111, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 66, 12, 12, 65, 140, 184, 184, 138, 65, 65, 65, 22, 31, 31, 232, 112, 136, 23
	                                  DB                   65, 66, 66, 164, 26, 100, 112, 4, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 16, 138, 66, 12, 65, 65, 17, 112, 184, 138, 65, 65, 12, 23, 101, 29, 208, 112, 207, 172, 65, 67, 66, 65, 25, 101, 20, 183, 21, 16, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18, 65, 66, 65, 210, 184, 112, 184, 139, 65, 12
	                                  DB                   65, 162, 78, 102, 24, 17, 24, 24, 137, 24, 67, 65, 22, 103, 101, 78, 19, 184, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 184, 16, 208, 138, 208, 184, 112, 112, 184, 140, 65, 12, 66, 164, 150, 78, 101, 102, 24, 164, 184, 137, 66, 184, 208, 23, 26, 163
	                                  DB                   16, 136, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 112, 16, 184, 184
	                                  DB                   184, 112, 112, 112, 184, 212, 65, 12, 65, 67, 164, 161, 23, 23, 65, 139, 184, 163, 67, 208, 184, 113, 114, 185, 112, 136, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 112, 112, 112, 112, 112, 112, 112, 111, 112, 184, 164, 65, 65, 66, 66, 66, 66, 66, 163, 184
	                                  DB                   209, 66, 67, 65, 138, 111, 16, 183, 112, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 16, 184, 112, 112, 112, 112, 112, 112, 112, 111, 112, 184, 138, 65, 12, 66, 67, 164, 208, 113, 184, 16, 139, 67, 65, 65, 66, 212, 184, 111, 111, 12, 208, 16, 16, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 112, 112, 112, 111, 111, 111, 112, 111, 112, 184, 211, 65
	                                  DB                   12, 65, 66, 65, 208, 16, 184, 16, 140, 65, 65, 65, 209, 184, 111, 111, 111, 12, 16, 136, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 111, 112, 112, 111, 111, 111, 111, 111, 111, 184, 210, 66, 65, 65, 139, 137, 208, 184, 184, 209, 66, 65, 164, 17, 184, 111, 111, 112
	                                  DB                   136, 136, 17, 12, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 111, 111, 112, 111
	                                  DB                   111, 111, 111, 111, 111, 184, 209, 140, 137, 185, 184, 184, 112, 112, 184, 164, 24, 210, 16, 112, 111, 111, 111, 112, 12, 17, 135, 12, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 184, 184, 184, 112, 112, 111, 112, 184, 17, 209
	                                  DB                   184, 184, 112, 113, 111, 111, 112, 136, 160, 136, 64, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 16, 16, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 111, 111, 111, 112, 112, 184, 112, 112, 111, 111, 111, 111, 111, 111, 12, 12, 12, 12, 183, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 112, 112, 112, 111, 111, 111, 111, 111, 111, 111, 111, 136, 111, 111, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 184
	                                  DB                   12, 12, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 12, 12, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 112, 111, 12, 135, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 136, 12, 136, 16, 208, 183, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 136, 135, 136, 12, 135, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 184, 136, 64, 136
	                                  DB                   16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 111, 12, 12, 207, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112
	                                  DB                   112, 111, 12, 12, 160, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 136, 136, 12, 12, 135, 208, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17
	                                  DB                   183, 183, 111, 111, 136, 136, 136, 136, 208, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 17, 17, 17, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	tamer10                           DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 16
	                                  DB                   16, 16, 17, 18, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 17, 18, 18, 16, 17, 0, 0, 0, 17, 16, 16, 16, 16, 16, 17, 17, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 17, 24, 28, 28, 27, 28, 20, 0, 0, 0, 17, 23, 24, 24, 24, 24, 23, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 27, 31, 31, 31, 30, 19, 0, 0, 0, 16
	                                  DB                   26, 31, 31, 31, 31, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 30, 31, 31, 224, 0, 0, 0, 0, 0, 21, 31, 31, 27, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 25
	                                  DB                   31, 26, 18, 0, 0, 0, 0, 0, 21, 29, 31, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 164, 65, 164, 16, 0, 0, 0, 0, 209, 164, 24, 19, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 17, 65, 67, 67, 209, 0, 0, 0, 0, 138, 67, 65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 139, 66, 66, 164, 16, 0, 0, 16
	                                  DB                   140, 67, 66, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 65, 12, 64, 18, 0, 0, 16, 164, 67, 66, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 201, 225
	                                  DB                   18, 208, 209, 209, 209, 128, 224, 185, 210, 139, 65, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 9, 55, 206, 184, 208, 208, 186, 128, 128, 185, 183, 182, 232, 18, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 201, 55, 55, 202, 185, 208, 207, 186, 128, 202, 186, 207, 209, 208, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 1, 9, 202, 185, 208, 207, 208, 201, 206, 209
	                                  DB                   207, 207, 208, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 200, 55, 128, 185, 208, 207, 207, 208, 208, 207, 207, 207, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 65, 66, 157
	                                  DB                   1, 185, 185, 183, 184, 184, 184, 183, 208, 207, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 140, 67, 67, 26, 1, 202, 235, 23, 24, 24, 24, 161, 207, 16, 17, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 139, 66, 67, 164, 104, 175, 23, 24, 26, 25, 26, 27, 27, 26, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 67, 164, 1, 1, 17, 16, 16, 16, 16, 16, 17
	                                  DB                   205, 24, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 164, 24, 1, 128, 16, 183, 182, 182, 182, 182, 182, 183, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 66, 128
	                                  DB                   1, 17, 183, 182, 182, 182, 182, 182, 182, 182, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 67, 24, 1, 17, 183, 182, 182, 182, 182, 182, 182, 183, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 64, 67, 18, 16, 16, 182, 182, 182, 182, 182, 182, 17, 16, 210, 208, 16, 0, 16, 210, 210, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 136, 16, 24, 19, 16, 182, 182, 182, 182
	                                  DB                   182, 18, 16, 138, 67, 66, 164, 164, 164, 66, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 26, 31, 28, 17, 183, 182, 183, 182, 16, 23, 25, 16, 164, 65, 65, 67, 164, 65, 138, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21
	                                  DB                   30, 29, 31, 24, 16, 18, 207, 17, 16, 24, 31, 20, 16, 0, 16, 138, 65, 65, 235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21, 27, 31, 24, 229, 26, 28, 157, 16, 29, 28, 18, 0, 0, 0, 16
	                                  DB                   23, 20, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 16, 240, 21, 224, 25, 65, 24, 20, 17, 20, 16, 0, 0, 0, 0, 18, 26, 20, 16, 19, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 164, 137, 16
	                                  DB                   17, 16, 16, 16, 16, 16, 0, 17, 24, 25, 20, 18, 19, 224, 246, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 210, 138, 164, 24, 66, 66, 66, 66, 65, 24, 138, 16, 0, 22, 25, 232, 18, 243, 224, 223, 246
	                                  DB                   247, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16
	                                  DB                   235, 140, 12, 66, 67, 67, 66, 66, 66, 66, 66, 66, 67, 67, 65, 16, 174, 26, 21, 230, 183, 18, 18, 18, 20, 232, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 137, 64, 66, 65, 65, 66, 66, 66, 66, 66, 66, 66, 67, 66, 65, 66, 67, 24
	                                  DB                   16, 18, 149, 160, 39, 111, 18, 235, 18, 19, 195, 112, 40, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 17, 164, 66, 65, 12, 64, 66, 66, 66, 66, 66, 66, 65, 164, 139, 139, 65, 66, 66, 66, 16, 0, 16, 16, 208, 135, 21, 20, 18, 23, 25, 111, 40, 4, 4, 4
	                                  DB                   4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 65, 65, 12, 64, 12, 65, 66, 66, 66, 66, 66, 66
	                                  DB                   66, 65, 24, 65, 66, 66, 66, 66, 17, 0, 0, 0, 0, 16, 22, 23, 22, 27, 22, 4, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 64, 66, 65, 64, 12, 65, 66, 66, 66, 67, 66, 66, 66, 66, 66, 66, 67, 164, 65, 67, 66, 16, 0, 0, 0, 0, 0, 20, 26
	                                  DB                   18, 197, 136, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 210, 164, 65, 65, 140, 139, 64, 12
	                                  DB                   65, 66, 66, 164, 140, 164, 65, 66, 66, 66, 66, 65, 137, 138, 26, 24, 16, 0, 0, 0, 0, 0, 16, 18, 16, 0, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
	                                  DB                   4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 138, 66, 65, 65, 64, 16, 184, 65, 12, 65, 67, 164, 23, 28, 28, 23, 65, 66, 66, 66, 65, 162, 28, 102, 23
	                                  DB                   17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 66
	                                  DB                   65, 12, 65, 139, 184, 113, 65, 12, 66, 164, 23, 31, 30, 22, 23, 164, 66, 66, 66, 65, 25, 31, 136, 112, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4
	                                  DB                   4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 16, 164, 65, 12, 65, 65, 186, 184, 208, 65, 12, 66, 163, 28, 31, 162, 112, 111, 173
	                                  DB                   65, 66, 66, 164, 26, 101, 113, 112, 223, 16, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 12, 65, 65, 66, 138, 184, 112, 208, 65, 12, 65, 23, 78, 31, 158, 184, 183, 173, 25, 67, 66, 65, 25, 101, 22, 229, 21, 16, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 235, 65, 66, 139, 184, 112, 184, 209, 65, 12
	                                  DB                   66, 164, 24, 101, 27, 21, 24, 24, 210, 139, 67, 164, 21, 27, 101, 27, 209, 112, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 4, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 184, 16, 208, 209, 184, 112, 112, 184, 209, 65, 12, 65, 66, 161, 24, 103, 103, 24, 164, 185, 208, 66, 185, 185, 163, 25, 20
	                                  DB                   16, 136, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 184, 184, 112
	                                  DB                   184, 112, 112, 112, 112, 184, 164, 65, 64, 66, 66, 163, 23, 24, 65, 139, 184, 139, 67, 138, 184, 184, 186, 185, 112, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   4, 4, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 112, 112, 112, 112, 112, 112, 112, 112, 184, 211, 65, 12, 65, 66, 67, 66, 65, 139, 184
	                                  DB                   208, 66, 67, 66, 164, 137, 16, 112, 111, 12, 207, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 112, 112, 112, 112, 112, 112, 112, 111, 111, 112, 185, 65, 12, 65, 67, 65, 208, 184, 184, 16, 236, 67, 65, 65, 65, 209, 184, 111, 111, 12, 17, 17, 16, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 112, 112, 112, 111, 111, 112, 111, 111, 112, 184, 164
	                                  DB                   65, 65, 66, 65, 137, 17, 184, 16, 139, 65, 65, 164, 17, 184, 111, 112, 136, 135, 16, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 111, 112, 112, 111, 111, 111, 111, 111, 112, 184, 25, 65, 164, 138, 208, 184, 112, 112, 211, 66, 65, 137, 16, 112, 111, 111, 112
	                                  DB                   12, 207, 207, 12, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 111, 111, 112
	                                  DB                   111, 111, 111, 111, 111, 112, 184, 210, 208, 184, 184, 184, 112, 112, 16, 140, 139, 185, 184, 112, 111, 111, 111, 111, 135, 208, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 184, 184, 112, 112, 111, 112, 112, 185, 185
	                                  DB                   184, 112, 111, 111, 111, 111, 112, 136, 12, 160, 12, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 111, 111, 111, 111, 111, 111, 111, 12, 136, 12, 12, 16, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 112, 112, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 111, 12, 208, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 136
	                                  DB                   64, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 136, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 136, 135, 17, 16, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 16, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 136, 12, 208, 208, 135, 17, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 136, 12, 12, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 111, 12, 12, 17
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 111, 12, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 111, 111, 111, 111, 111, 111, 111, 111, 112, 111, 111
	                                  DB                   136, 12, 12, 135, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183, 183, 111, 111, 111, 136, 136, 136, 135, 135, 136, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16
	                                  DB                   16, 16, 17, 17, 17, 208, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	tamer11                           DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 17
	                                  DB                   17, 0, 0, 0, 0, 0, 0, 0, 0, 18, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 17, 17, 24, 21, 0, 0, 0, 0, 0, 0, 0, 17, 16, 17, 17, 16, 17, 18, 18
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 18, 17, 18, 26, 31, 22, 0, 0, 0, 0, 0, 0, 0, 18, 24, 27, 26, 24, 22, 244, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 223, 28, 31, 28, 16, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   18, 29, 31, 31, 31, 31, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 28, 31, 31, 31, 24, 17, 0, 0, 0, 0, 0, 0, 0, 22, 31, 31, 28, 21, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 28, 31, 31, 31
	                                  DB                   28, 17, 0, 0, 0, 0, 0, 0, 0, 16, 26, 31, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 224, 22, 24, 24, 66, 17, 0, 0, 0, 0, 0, 0, 17, 164, 26, 22, 17, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 16, 138, 66, 91, 25, 16, 0, 0, 0, 0, 0, 138, 66, 66, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 65, 65, 66, 139, 16, 0, 0, 0
	                                  DB                   16, 164, 66, 67, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 65, 65, 65, 209, 0, 0, 0, 18, 65, 65, 65, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 201, 224, 128
	                                  DB                   127, 137, 137, 137, 210, 105, 223, 185, 17, 140, 66, 164, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 128, 128, 128, 55, 9, 55, 202, 184, 183, 208, 208, 128, 203, 185, 183, 18, 164, 138, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 18, 128, 9, 55, 128, 33, 55, 207, 185, 208, 207, 207, 186, 185, 208, 209, 207, 208, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 128, 9, 128, 128, 55, 202, 185, 208, 207, 207, 208, 16, 208
	                                  DB                   232, 209, 208, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 33, 33, 128, 55, 202, 185, 208, 232, 208, 209, 139, 210, 208, 209, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 9, 128, 55
	                                  DB                   128, 185, 184, 183, 209, 65, 67, 66, 208, 208, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 128, 33, 9, 128, 18, 234, 201, 140, 67, 66, 67, 236, 16, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 18, 128, 9, 9, 1, 22, 24, 162, 66, 65, 66, 24, 25, 26, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 128, 9, 9, 128, 17, 16, 65, 65, 16, 208, 17
	                                  DB                   20, 25, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 9, 9, 1, 16, 139, 67, 232, 17, 182, 182, 183, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 9, 9
	                                  DB                   1, 209, 68, 24, 16, 182, 182, 182, 182, 182, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 9, 9, 176, 16, 138, 209, 17, 182, 182, 182, 182, 183, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 18, 128, 55, 18, 228, 17, 16, 182, 182, 182, 182, 182, 17, 16, 209, 17, 16, 0, 16, 18, 209, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 1, 23, 30, 31, 24, 16, 182, 182, 182
	                                  DB                   182, 17, 16, 139, 67, 65, 164, 164, 164, 65, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 1, 23, 28, 31, 24, 16, 182, 182, 182, 16, 23, 24, 16, 24, 65, 65, 67, 24, 65, 163, 16, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 105
	                                  DB                   22, 30, 31, 20, 16, 17, 18, 183, 16, 25, 31, 229, 16, 0, 16, 138, 66, 65, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 128, 26, 23, 16, 159, 26, 27, 159, 16, 29, 29, 18, 0, 0, 0, 16
	                                  DB                   23, 21, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 200, 199, 16, 17, 26, 25, 25, 20, 17, 21, 16, 0, 0, 0, 0, 17, 25, 21, 16, 19, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 17, 16, 16, 140, 138, 16
	                                  DB                   17, 16, 16, 16, 16, 16, 0, 17, 24, 26, 21, 18, 19, 224, 246, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 17, 209, 137, 163, 24, 66, 66, 66, 66, 65, 164, 236, 16, 0, 21, 26, 19, 18, 243, 19, 223, 246
	                                  DB                   247, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16
	                                  DB                   210, 140, 12, 65, 67, 67, 66, 66, 66, 66, 66, 67, 67, 67, 65, 16, 21, 27, 21, 235, 183, 18, 224, 18, 245, 19, 16, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 211, 12, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 67, 66, 65, 66, 91, 164
	                                  DB                   16, 18, 174, 21, 39, 4, 18, 19, 18, 19, 194, 112, 40, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 17, 164, 66, 65, 12, 12, 66, 66, 66, 66, 66, 66, 65, 164, 139, 139, 65, 66, 66, 66, 16, 0, 16, 16, 208, 135, 21, 20, 18, 23, 26, 111, 40, 4, 4, 4
	                                  DB                   4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 65, 65, 12, 64, 12, 65, 66, 66, 66, 66, 66, 66
	                                  DB                   66, 65, 164, 65, 66, 66, 66, 66, 17, 0, 0, 0, 0, 16, 21, 23, 21, 27, 23, 4, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 164, 66, 65, 65, 12, 12, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 164, 65, 67, 66, 16, 0, 0, 0, 0, 0, 19, 26
	                                  DB                   224, 197, 136, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 208, 164, 65, 65, 164, 139, 12, 12
	                                  DB                   65, 66, 66, 65, 140, 140, 66, 66, 66, 66, 66, 65, 138, 138, 26, 24, 16, 0, 0, 0, 0, 0, 16, 18, 16, 0, 4, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
	                                  DB                   4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 137, 65, 65, 65, 65, 184, 184, 12, 65, 65, 67, 164, 22, 27, 28, 23, 65, 66, 66, 66, 65, 139, 28, 102, 23
	                                  DB                   17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 66
	                                  DB                   65, 12, 65, 139, 184, 185, 24, 12, 66, 164, 23, 31, 30, 23, 23, 164, 66, 66, 66, 65, 25, 31, 136, 111, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4
	                                  DB                   4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 16, 164, 65, 12, 65, 65, 208, 184, 185, 65, 12, 66, 163, 27, 31, 22, 184, 111, 173
	                                  DB                   25, 66, 66, 164, 26, 100, 113, 112, 18, 16, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 16, 164, 65, 12, 66, 138, 184, 112, 186, 65, 12, 65, 23, 26, 31, 22, 184, 183, 174, 25, 67, 66, 65, 25, 101, 22, 230, 21, 16, 16, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 211, 65, 66, 140, 184, 112, 112, 208, 65, 12
	                                  DB                   66, 164, 24, 101, 27, 20, 24, 24, 211, 139, 67, 65, 21, 27, 101, 27, 209, 112, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 4, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 184, 16, 208, 210, 184, 112, 112, 184, 209, 65, 12, 65, 66, 161, 24, 103, 102, 24, 164, 185, 208, 66, 185, 185, 163, 25, 20
	                                  DB                   16, 136, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 184, 184, 112
	                                  DB                   184, 112, 112, 112, 112, 184, 164, 65, 12, 66, 66, 163, 23, 24, 65, 139, 184, 139, 67, 138, 184, 184, 186, 185, 112, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   4, 4, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 112, 112, 112, 112, 112, 112, 112, 112, 184, 210, 65, 12, 65, 66, 67, 66, 65, 139, 184
	                                  DB                   208, 66, 67, 66, 164, 137, 16, 112, 113, 12, 207, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 112, 112, 112, 112, 112, 112, 112, 112, 111, 112, 185, 164, 12, 65, 67, 65, 208, 184, 184, 16, 236, 67, 65, 65, 66, 210, 184, 111, 111, 12, 17, 17, 16, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 112, 112, 112, 111, 111, 112, 111, 111, 112, 184, 164
	                                  DB                   65, 65, 66, 65, 137, 17, 184, 16, 139, 65, 65, 164, 17, 184, 111, 112, 136, 135, 16, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 112, 111, 112, 112, 111, 111, 111, 111, 111, 112, 184, 164, 66, 164, 138, 208, 184, 112, 112, 210, 66, 65, 138, 16, 184, 111, 111, 112
	                                  DB                   12, 207, 207, 12, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 184, 111, 111, 112
	                                  DB                   111, 111, 111, 111, 111, 112, 184, 210, 208, 184, 184, 184, 112, 112, 16, 140, 139, 185, 184, 112, 111, 111, 111, 111, 135, 208, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 184, 184, 112, 112, 111, 112, 112, 185, 185
	                                  DB                   184, 112, 111, 111, 111, 111, 112, 136, 12, 160, 12, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 111, 113, 111, 111, 111, 111, 111, 12, 136, 12, 12, 16, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 112, 112, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 136, 12, 208, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 136
	                                  DB                   64, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 136, 12, 207, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 136, 135, 17, 16, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 16, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 136, 12, 208, 207, 135, 17, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111
	                                  DB                   111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 136, 12, 12, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 111, 12, 12, 17
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 16, 183, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 111, 12, 12, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183, 111, 111, 111, 111, 111, 111, 111, 112, 111, 111
	                                  DB                   136, 12, 12, 135, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 183, 183, 111, 111, 111, 136, 136, 136, 135, 135, 232, 17, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16
	                                  DB                   16, 16, 17, 17, 17, 17, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	bllt1                             DB                   0, 0, 78, 78, 53, 78, 0, 0, 0, 78, 78, 78, 53, 78, 78, 0, 78, 77, 78, 78, 53, 78, 78, 78, 77, 77, 78, 78, 53, 53, 78, 78, 77, 77, 102, 102, 78, 53, 53, 53
	                                  DB                   78, 101, 101, 101, 77, 78, 78, 53, 0, 78, 101, 102, 77, 78, 78, 0, 0, 0, 78, 77, 77, 78, 0, 0
	bllt2                             DB                   0, 0, 23, 159, 159, 156, 0, 0, 0, 158, 111, 111, 183, 183, 158, 0, 23, 4, 111, 111, 183, 183, 183, 23, 12, 4, 111, 111, 183, 183, 183, 134, 12, 4, 4, 4, 111, 183, 183, 134
	                                  DB                   23, 4, 40, 40, 4, 111, 111, 23, 0, 158, 40, 4, 4, 111, 158, 0, 0, 0, 23, 12, 159, 23, 0, 0
	NUM0                              DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 0, 0
	                                  DB                   0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 0, 0
	                                  DB                   0, 0, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0
	                                  DB                   0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	NUM1                              DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47
	                                  DB                   47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47
	                                  DB                   47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	NUM2                              DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47
	                                  DB                   47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0
	                                  DB                   0, 0, 47, 47, 47, 47, 47, 47, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	NUM3                              DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 0, 0
	                                  DB                   0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 0, 0, 0, 0, 0, 0, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	NUM4                              DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 0
	                                  DB                   0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 47, 47, 47, 47, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	NUM5                              DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 0, 0, 0
	                                  DB                   0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	NUM6                              DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 47, 47, 47, 47, 47, 47, 0, 0
	                                  DB                   0, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47
	                                  DB                   47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	NUM7                              DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47
	                                  DB                   47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47
	                                  DB                   47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	NUM8                              DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 47, 47, 47, 47, 47, 47, 0, 0
	                                  DB                   0, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0
	                                  DB                   0, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	NUM9                              DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47
	                                  DB                   47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 47, 47, 47, 47, 47, 47, 0, 0
	                                  DB                   0, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 0, 47, 47, 47, 47, 47, 47, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47
	                                  DB                   47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0
	                                  DB                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	;/////////////////////////////////////////////////////////////////////////////////////
	;/////////////////////////////////DATA INITIALIZATION/////////////////////////////////
	; Strings
	message1                          db                   "Enter the first player name: $"
	                                  First_Player_buffer  Label byte                                                                                                                                                                                    	; First player name
	First_Player_buffersize           db                   30
	First_Player_ActualSize           db                   ?
	First_Player_name                 db                   30 dup('$')
	                                  Second_Player_buffer Label byte                                                                                                                                                                                    	; Second player name
	Second_Player_buffersize          db                   30
	Second_Player_ActualSize          db                   ?
	Second_Player_name                db                   30 dup('$')

	message2                          db                   "Press any key to continue$"

	message3                          db                   "To start chatting press F1 $"
	message4                          db                   "To start Paint-ball fighting press F2 $"
	message5                          db                   "To end the program pres esc $"
	message6                          db                   "Enter the Second player name: $"

	line                              db                   "___________________________________________________________________________________$"

	Part_1_of_End_message_in_chatting db                   "- to end chatting with $"
	Part_2_of_End_message_in_chatting db                   "Press F3 $"

	Winning_Message                   db                   " Won $"
	;_______________________________________________________
	set                               dw                   0
	level                             dw                   1
	rad                               dw                   36
	x1                                dw                   118
	y1                                dw                   351
	origin1                           dw                   0
	flag1                             dw                   ?
	rad1                              dw                   ?
	x2                                dw                   518
	y2                                dw                   351
	origin2                           dw                   0
	flag2                             dw                   ?
	rad2                              dw                   ?
	pixcl                             db                   ?
	pix2cl                            db                   ?
	boxw                              equ                  40
	boxh                              equ                  40
	imgw                              equ                  64
	imgh                              equ                  64
	player1currentXpos                dw                   ?
	player1currentYpos                dw                   ?
	sbarr                             dw                   ?
	dead1                             dw                   ?
	player2currentXpos                dw                   ?
	player2currentYpos                dw                   ?
	tbarr                             dw                   ?
	dead2                             dw                   ?
	;_______________________________________________________
	Power_Up_1_X_location             dw                   200
	Power_Up_1_Y_location             dw                   200
	Power_Up_2_X_location             dw                   300
	Power_Up_2_Y_location             dw                   120
	Power_Up_3_X_location             dw                   440
	Power_Up_3_Y_location             dw                   280
	
	Power_Up_1_Activation             dw                   ?
	Power_Up_2_Activation             dw                   ?
	Power_Up_3_Activation             dw                   ?
	Power_Ups_Counts                  db                   ?

	Power_Up_1_End_X_location         dw                   180
	Power_Up_1_End_Y_location         dw                   180
	Power_Up_2_End_X_location         dw                   280
	Power_Up_2_End_Y_location         dw                   100
	Power_Up_3_End_X_location         dw                   420
	Power_Up_3_End_Y_location         dw                   260

	Box_1_X_location                  dw                   210
	Box_1_Y_location                  dw                   210
	Box_2_X_location                  dw                   310
	Box_2_Y_location                  dw                   130
	Box_3_X_location                  dw                   450
	Box_3_Y_location                  dw                   290

	Box_1_End_X_location              dw                   170
	Box_1_End_Y_location              dw                   170
	Box_2_End_X_location              dw                   270
	Box_2_End_Y_location              dw                   90
	Box_3_End_X_location              dw                   410
	Box_3_End_Y_location              dw                   250

	Box_1_Activation                  dw                   ?
	Box_2_Activation                  dw                   ?
	Box_3_Activation                  dw                   ?



	Player1_HB                        dw                   ?                                                                                                                                                                                             	; player1 hp
	Player1_Rank                      db                   1                                                                                                                                                                                             	; player1 rank
	Player1_Bullets                   db                   ?                                                                                                                                                                                             	; Number of bullets that player 1 currently holds


	Player2_HB                        dw                   ?                                                                                                                                                                                             	; player2 hp
	Player2_Rank                      db                   1                                                                                                                                                                                             	; player2 rank
	Player2_Bullets                   db                   ?

	GunBullet1xpos                    dw                   0                                                                                                                                                                                             	;new year
	GunBullet1ypos                    dw                   0
	SwitchGunBullet1                  dw                   ?                                                                                                                                                                                             	; 0 means switch off don't repeat bullet 1 means switch ON
	GunBullet2xpos                    dw                   0
	GunBullet2ypos                    dw                   0
	SwitchGunBullet2                  dw                   ?                                                                                                                                                                                             	; 0 means switch off don't repeat bullet 1 means switch ON
	
	temporary_Box_Start_X_Location    dw                   ?
	temporary_Box_Start_Y_Location    dw                   ?
	temporary_Box_End_X_Location      dw                   ?
	temporary_Box_End_Y_Location      dw                   ?

	temporary_data                    dw                   ?
	temporary_Activation_Box_Data     dw                   ?
	;_______________________________________________________
;/////////////////////////////////////////////////////////////////////////////////////
.code


	;/////////////////////////////////////////////////////////////////////////////////////
	;///////////////////////////////////GAME PROCEDURES///////////////////////////////////


WriteF4EXIT proc
	                                    mov       al, 0
	                                    mov       bh, 0
	                                    mov       bl, 00011111b
	                                    mov       cx, 8                                       	; calculate message size.
	                                    mov       dl, 35
	                                    mov       dh, 1
	                                    push      cs
	                                    pop       es
	                                    mov       bp, offset msg1
	                                    mov       ah, 13h
	                                    int       10h
	                                    jmp       msg1end
	msg1                                db        "F4: Exit"
	msg1end:                            
	                                    ret
WriteF4EXIT endp

setdevisor proc

	                                    mov       dx,3fbh                                     	; Line Control Register
	                                    mov       al,10000000b                                	;Set Divisor Latch Access Bit
	                                    out       dx,al

	                                    mov       dx,3f8h
	                                    mov       al,0ch
	                                    out       dx,al

	                                    mov       dx,3f9h
	                                    mov       al,00h
	                                    out       dx,al

	                                    mov       dx,3fbh
	                                    mov       al,00011011b

	                                    out       dx,al



	                                    ret
setdevisor endp


ChatProc PROC
	                                    MOV       AX, @DATA
	                                    MOV       DS, AX
		
	                   
		
	                                    MOV       AX, 0600h                                   	; Scroll up function
	                                    mov       cx, 0
	                                    MOV       DX, 184FH                                   	; lower right corner DH=row, DL=column
	                                    MOV       BH, 07
	                                    INT       10H
		
	                                    Cursor    0, 0
		
	                                    Cursor    00H, 0CH

	                                    MOV       AH, 9                                       	;Display string function
	                                    MOV       DX, OFFSET Divisor                          	;offset of the string
	                                    INT       21H
		
	                                    Cursor    0, 0
		
		
		
	;MAIN LOOP ==> Infinite LOOP as long as the program is running
	CHECKCHAT:                          
	                                    MOV       CharRecieved, '$'
	;We have two possibilities: 1) Sending 2) Recieve
	                                    MOV       AH, 1                                       	;keep scanning the keyboard continously
	                                    INT       16H                                         	;drX execution
	                                    JNZ       SEND                                        	;A key is pressed maybe char to send or exit chat request
	                                    JMP       RES                                         	;No keys are pressed then go check receiving end
			
	SEND:                               

	                                    cmp       AH, 61
	                                    jZ        End_Of_Chat_Module

	                                    MOV       AH, 0                                       	;wait for a key press
	                                    INT       16H                                         	;drX execution

	                                    CMP       AH, 1CH                                     	;ENTER key
	                                    JZ        EnterCheck
				
	                                    CMP       AL, 27                                      	;ESC key
	                                    JZ        EscapeFix
				
	                                    CMP       AL, 08                                      	;Backspace
	                                    JZ        Backspace
				
	                                    MOV       Char, AL
	                                    Cursor    X_1, Y_1
	                                    MOV       AH, 9                                       	;Display string
	                                    MOV       DX, offset Char                             	;offset of the string
	                                    INT       21H
	                                    SENDING   Char
				
	                                    INC       X_1
	                                    CMP       X_1, 80
	                                    JE        ColLimitPassFix
	BACKSEND:                           
	                                    JMP       RES
			
			
	EnterCheck:                         
	                                    MOV       X_1, 0
	                                    ADD       Y_1, 1
	                                    CMP       Y_1, 12
	                                    JE        NewLine1
	ContinueSending:                    
	                                    Cursor    X_1, Y_1
	                                    SENDING   0CH
	                                    JMP       ENDSEND
				
	EscapeFix:                          
	                                    MOV       AX, 0600h                                   	; Scroll up function
	                                    XOR       CX, CX                                      	; Upper left corner CH=row, CL=column 0
	                                    MOV       DX, 184FH                                   	; Bottom right corner DH=row, DL=column
	                                    MOV       BH, 07
	                                    INT       10H
	                                    Cursor    0, 0
	                                    MOV       AH, 9                                       	;Display string function
	                                    INT       21H
	ColLimitPassFix:                    
	                                    JMP       COLOVERFLOW
	Backspace:                          
	                                    Cursor    X_1, Y_1
	                                    MOV       AH, 9                                       	;Display string function
	                                    MOV       DX, OFFSET Space_chat                       	;offset of the string
	                                    INT       21H
	                                    DEC       X_1
	                                    Cursor    X_1, Y_1
	                                    SENDING   Space_chat
	                                    JMP       ENDSEND
			
	JMPCHECKCHAT:                       
	                                    JMP       CHECKCHAT
			
	NewLine1:                           
	                                    SCROLL    0, 0, 79, 11
	                                    MOV       Y_1, 11
	                                    JMP       ContinueSending
				
	COLOVERFLOW:                        
	                                    MOV       X_1, 0
	                                    INC       Y_1
	                                    CMP       Y_1, 12
	                                    JE        ROWOVERFLOW
	BACKCOLOVERFLOW:                    
	                                    JMP       BACKSEND
	ROWOVERFLOW:                        
	                                    SCROLL    0, 0, 79, 11
	                                    MOV       Y_1, 11
	                                    JMP       BACKCOLOVERFLOW
			

	ENDSEND:                            
	RES:                                
	                                    RECEIVING CharRecieved
	                                    CMP       CharRecieved, '$'
	                                    JE        JMPCHECKCHAT
				
	                                    CMP       CharRecieved, 0CH
	                                    JE        ENTRES
				
	                                    CMP       CharRecieved, 32
	                                    JE        BackspaceRES
				
	                                    Cursor    X_2, Y_2
	                                    MOV       AH, 9                                       	;Display string function
	                                    MOV       DX, offset CharRecieved                     	;offset of the string
	                                    INT       21H
	                                    INC       X_2
	                                    CMP       X_2, 80
	                                    JE        ColLimitCheckRec
	BACKSENDRES:                        
	                                    JMP       JMPCHECKCHAT
				
	ENTRES:                             
	                                    MOV       X_2, 0
	                                    ADD       Y_2, 1
	                                    CMP       Y_2, 24
	                                    JE        NewLine2
	ContinueReceiving:                  
	                                    Cursor    X_2, Y_2
	                                    JMP       JMPCHECKCHAT
				
	BackspaceRES:                       
	                                    Cursor    X_2, Y_2
	                                    MOV       AH, 9                                       	;Display string function
	                                    MOV       DX, offset Space_chat                       	;offset of the string
	                                    INT       21H
	                                    DEC       X_2
	                                    Cursor    X_2, Y_2
	                                    JMP       JMPCHECKCHAT
				
	NewLine2:                           
	                                    SCROLL    0, 0DH, 79, 24
	                                    Cursor    0, 12
	                                    MOV       AH, 9                                       	;Display string function
	                                    MOV       DX, offset Divisor                          	;offset of the string
	                                    INT       21H
	                                    MOV       Y_2, 23
	                                    JMP       ContinueReceiving
				
	ColLimitCheckRec:                   
	                                    MOV       X_2, 0
	                                    INC       Y_2
	                                    CMP       Y_2, 24
	                                    JE        RowLimitCheckRec
	ColLimitCheckFixRecBACK:            
	                                    JMP       BACKSENDRES
				
	RowLimitCheckRec:                   
	                                    SCROLL    0, 0DH, 79, 24
	                                    Cursor    0, 12
	                                    MOV       AH, 9                                       	;Display string function
	                                    MOV       DX, offset Divisor                          	;offset of the string
	                                    INT       21H
	                                    MOV       Y_2, 23
	                                    JMP       ColLimitCheckFixRecBACK
	
	                                    JMP       CHECKCHAT
		
	End_Of_Chat_Module:                 ret
	                   
ChatProc ENDP


Draw_Power_Up_Square proc
	
	                                    mov       si, offset Power_Up_1_X_location
	                                    lea       di, Power_Up_1_Activation
	                                    push      di
	                                    mov       di, offset Power_Up_1_End_X_location
	                                    mov       bl, Power_Ups_Counts
	                                    mov       bh, 0
	                                    mov       ax, Power_Up_1_Activation
	
	
	Start_Of_Draw_Power_Ups:            
	                                    cmp       ax, 0
	                                    Jz        Increment_Of_Power_Up_Data
	                                    mov       cx, 0
	                                    mov       dx, 0
	
	                                    mov       cx, [si]
	                                    add       si, 2
	                                    mov       dx, [si]
	                                    sub       si, 2

	                                    mov       ah, 0ch
	                                    mov       al, 0Eh

	Draw_Power_Up_1:                    int       10h
	                                    dec       cx
	                                    cmp       cx, [di]
	                                    jnz       Draw_Power_Up_1
	;mov si, offset Power_Up_1_X_location
	                                    mov       cx, [si]
	                                    dec       dx
	                                    cmp       dx, [di] +  2
	                                    jnz       Draw_Power_Up_1

	
	Increment_Of_Power_Up_Data:         
	                                    mov       ax, di
	                                    pop       di
	                                    add       di, 2
	                                    push      di
	                                    push      ax
	                                    mov       ax, [di]
	                                    pop       di
	                                    add       si, 4
	                                    add       di, 4
	                                    dec       bl
	                                    jnz       Start_Of_Draw_Power_Ups

	                                    pop       si

	                                    ret
Draw_Power_Up_Square endp
Draw_Box_Square proc
	
	                                    mov       si, offset Box_1_X_location
	                                    lea       di, Box_1_Activation
	                                    push      di
	                                    mov       di, offset Box_1_End_X_location
	                                    mov       bl, Power_Ups_Counts
	                                    mov       bh, 0
	                                    mov       ax, Box_1_Activation
	
	
	Start_Of_Draw_Box:                  
	                                    cmp       ax, 0
	                                    Jz        Increment_Of_Box_Data
	                                    mov       cx, 0
	                                    mov       dx, 0
	
	                                    mov       cx, [si]
	                                    add       si, 2
	                                    mov       dx, [si]
	                                    sub       si, 2

	                                    mov       ah, 0ch
	                                    mov       al, 06h

	Draw_Box_1:                         int       10h
	                                    dec       cx
	                                    cmp       cx, [di]
	                                    jnz       Draw_Box_1
	;mov si, offset Power_Up_1_X_location
	                                    mov       cx, [si]
	                                    dec       dx
	                                    cmp       dx, [di] +  2
	                                    jnz       Draw_Box_1

	
	Increment_Of_Box_Data:              
	                                    mov       ax, di
	                                    pop       di
	                                    add       di, 2
	                                    push      di
	                                    push      ax
	                                    mov       ax, [di]
	                                    pop       di
	                                    add       si, 4
	                                    add       di, 4
	                                    dec       bl
	                                    jnz       Start_Of_Draw_Box

	                                    pop       si

	                                    ret
Draw_Box_Square endp
Block_Movement_Of_Player_1_Boxes proc
	                                    lea       di, Box_1_Activation
	                                    lea       si, Box_1_End_X_location
	                                    mov       al, 0

	Start_Of_Block:                     
	                                    cmp       [di], 0
	                                    jZ        Return_Of_Block_Player_1
		
		
		
		
	                                    mov       bx, player1currentXpos
	;lea si, Power_Up_1_X_location

	                                    cmp       bx, [si]
	                                    Ja        Return_Of_Block_Player_1
	                                    add       bx, imgW
	                                    cmp       bx, [si]
	                                    Jb        Return_Of_Block_Player_1

	;jmp Return_Of_Heal_Player_1

	CmpToY_Block:                       
	                                    mov       bx, player1currentYpos
	                                    add       si, 2

	                                    cmp       bx, [si]
	                                    Ja        Return_Of_Block_Player_1
	                                    add       bx, imgH
	                                    cmp       bx, [si]
	                                    Jb        Return_Of_Block_Player_1

	                                    sub       si, 2
	;jmp Return_Of_Heal_Player_1

	                                
	                                    mov       bx, 0
	                                    cmp       [di], 0
	                                    Jnz       Go_To_Return
	                                    jmp       Return_Of_Block_Player_1


	Return_Of_Block_Player_1:           
	                                    add       di, 2
	                                    add       si, 4
	                                    inc       al
	                                    cmp       al, 3
	                                    Jnz       Start_Of_Block
	                                    mov       bx, 1
									

	;call Draw_Power_Up_Square
	
	Go_To_Return:                       ret

Block_Movement_Of_Player_1_Boxes endp
Block_Movement_Of_Player_2_Boxes proc
	                                    lea       di, Box_1_Activation
	                                    lea       si, Box_1_End_X_location
	                                    mov       al, 0

	Start_Of_Block_2:                   
	                                    cmp       [di], 0
	                                    jZ        Return_Of_Block_Player_2
		
		
		
		
	                                    mov       bx, player2currentXpos
	;lea si, Power_Up_1_X_location

	                                    cmp       bx, [si]
	                                    Ja        Return_Of_Block_Player_2
	                                    add       bx, imgW
	                                    cmp       bx, [si]
	                                    Jb        Return_Of_Block_Player_2

	;jmp Return_Of_Heal_Player_1

	CmpToY_Block_2:                     
	                                    mov       bx, player2currentYpos
	                                    add       si, 2

	                                    cmp       bx, [si]
	                                    Ja        Return_Of_Block_Player_2
	                                    add       bx, imgH
	                                    cmp       bx, [si]
	                                    Jb        Return_Of_Block_Player_2

	                                    sub       si, 2
	;jmp Return_Of_Heal_Player_1

	                                
	                                    mov       bx, 0
	                                    cmp       [di], 0
	                                    Jnz       Go_To_Return_2
	                                    jmp       Return_Of_Block_Player_2


	Return_Of_Block_Player_2:           
	                                    add       di, 2
	                                    add       si, 4
	                                    inc       al
	                                    cmp       al, 3
	                                    Jnz       Start_Of_Block_2
	                                    mov       bx, 1
									

	;call Draw_Power_Up_Square
	
	Go_To_Return_2:                     ret

Block_Movement_Of_Player_2_Boxes endp
drawbox proc                                                                              		;mov  di, offset crkbox
	                                    mov       cx,temporary_Box_Start_X_Location           	;set start position in x
	                                    mov       dx,temporary_Box_Start_Y_Location           	;set start position in y
	                                    mov       ah,0Ch                                      	;draw command
	                                    jmp       cond                                        	;check conditions
	draw_Box:                           
	                                    mov       al, [di]                                    	;color of the current pixel
	                                    cmp       al,0
	                                    jz        cond
	                                    int       10h                                         	;print pixel
	cond:                               
	                                    inc       di                                          	;advacnce to next color pixel
	                                    dec       cx                                          	;proceed to next y location
	                                    cmp       cx,temporary_Box_End_X_Location             	;set back to zero position
	                                    jnz       draw_Box                                    	;draw row of pixels
	                                    mov       cx,temporary_Box_Start_X_Location           	;check for complete row
	                                    dec       dx                                          	;proceed to new row in different y
	                                    cmp       dx,temporary_Box_End_Y_Location             	;check for complete row in all cols
	                                    jz        finish                                      	;finish drawing object
	                                    Jmp       draw_Box
	finish:                             ret
drawbox endp
Draw_Box_version_2 proc

	                                    mov       bl, Power_Ups_Counts
	                                    lea       si, Box_1_Activation
	                                    mov       temporary_Activation_Box_Data, si
	                                    lea       si, Box_1_X_location
	                                    mov       ax, [si]
	                                    mov       temporary_Box_Start_X_Location, ax
	                                    lea       si, Box_1_Y_location
	                                    mov       ax, [si]
	                                    mov       temporary_Box_Start_Y_Location, ax
	                                    lea       si, Box_1_End_X_location
	                                    mov       ax, [si]
	                                    mov       temporary_Box_End_X_Location, ax
	                                    lea       si, Box_1_End_Y_location
	                                    mov       ax, [si]
	                                    mov       temporary_Box_End_Y_Location, ax

	                                    lea       si, Box_1_X_location
	                                    mov       ax, si
	                                    mov       temporary_data, ax
	                                    lea       si, Box_1_End_X_location

	                                    cmp       bl, 0
	                                    Jz        Return_Of_Draw_Boxes_Procedure
	

	Call_Draw_Box:                      
	                                    mov       di, temporary_Activation_Box_Data
	                                    cmp       [di], 2
	                                    Jz        Set_DI_To_Box
	                                    cmp       [di], 1
	                                    Jz        Set_DI_To_crk_Box
	                                    cmp       [di], 0
	                                    Jz        Update_Temporary_Data
	
	Set_DI_To_Box:                      lea       di, box
	                                    jmp       Actual_Draw_Of_Box
	Set_DI_To_crk_Box:                  lea       di, crkbox
	                                    jmp       Actual_Draw_Of_Box

	Actual_Draw_Of_Box:                 
	                                    call      drawbox
	
	Update_Temporary_Data:              
	                                    add       temporary_Activation_Box_Data, 2
	                                    add       si, 4
	                                    mov       ax, [si]
	                                    mov       temporary_Box_End_X_Location, ax
	                                    add       si, 2
	                                    mov       ax, [si]
	                                    mov       temporary_Box_End_Y_Location, ax
	                                    sub       si, 2
	                                    mov       di, temporary_data
	                                    add       di, 4
	                                    mov       ax, [di]
	                                    mov       temporary_Box_Start_X_Location, ax
	                                    add       di, 2
	                                    mov       ax, [di]
	                                    mov       temporary_Box_Start_Y_Location, ax
	                                    sub       di, 2
	                                    mov       temporary_data, di
	                                    dec       bl
	                                    cmp       bl, 0
	                                    jnz       Call_Draw_Box

	Return_Of_Draw_Boxes_Procedure:     
	                                    ret
Draw_Box_version_2 endp
Draw_Bullet_Player_1 proc

	                                    mov       al, 1
	                                    mov       ah, 0ch
	                                    mov       cx, 80
	                                    mov       dx, 30

	Draw_Rect_Of_Bullet_1:              int       10H
	                                    inc       cx
	                                    cmp       cx, 120
	                                    Jnz       Draw_Rect_Of_Bullet_1

	                                    mov       cx, 80
	                                    inc       dx
	                                    cmp       dx, 52
	                                    Jnz       Draw_Rect_Of_Bullet_1

	                                    mov       cx, 120
	                                    mov       dx, 30
	                                    mov       al, 8

	Draw_Black_Rect_Of_Bullet_1:        int       10H
	                                    inc       cx
	                                    cmp       cx, 122
	                                    Jnz       Draw_Black_Rect_Of_Bullet_1

	                                    mov       cx, 120
	                                    inc       dx
	                                    cmp       dx, 52
	                                    Jnz       Draw_Black_Rect_Of_Bullet_1

	; draw a shape like a semi circle

	                                    mov       cx, 122
	                                    mov       dx, 30
	                                    mov       bx, 52
	                                    mov       al, 1
	                                    mov       di, 0

	Draw_Semi_Circle_1:                 int       10H
	                                    inc       dx
	                                    cmp       dx, bx
	                                    jnz       Draw_Semi_Circle_1

	                                    inc       cx
	                                    inc       di
	                                    mov       dx, 30
	                                    add       dx, di
	                                    dec       bx
	                                    cmp       dx, 41
	                                    JNZ       Draw_Semi_Circle_1

	                                    mov       al, 4
	                                    mov       cx, 520
	                                    mov       dx, 30

	Draw_Rect_Of_Bullet_2:              int       10h
	                                    inc       cx
	                                    cmp       cx, 560
	                                    jnz       Draw_Rect_Of_Bullet_2

	                                    mov       cx, 520
	                                    inc       dx
	                                    cmp       dx, 52
	                                    jnz       Draw_Rect_Of_Bullet_2

	                                    mov       cx, 518
	                                    mov       dx, 30
	                                    mov       al, 8

	Draw_Black_Rect_Of_Bullet_2:        int       10H
	                                    inc       dx
	                                    cmp       dx, 52
	                                    jnz       Draw_Black_Rect_Of_Bullet_2

	                                    mov       cx, 516
	                                    mov       dx, 30
	                                    mov       bx, 52
	                                    mov       di, 0
	                                    mov       al, 4

	Draw_Semi_Circle_2:                 int       10H
	                                    inc       dx
	                                    cmp       dx, bx
	                                    jnz       Draw_Semi_Circle_2

	                                    dec       cx
	                                    inc       di
	                                    mov       dx, 30
	                                    add       dx, di
	                                    dec       bx
	                                    cmp       dx, 41
	                                    JNZ       Draw_Semi_Circle_2


	                                    ret
Draw_Bullet_Player_1 endp
draw_health_bars proc
	                                    mov       cx, 100
	                                    mov       dx, 37
	                                    mov       ah, 0ch
	                                    mov       al, 0

	Draw_hbar_Left:                     int       10H
	                                    inc       cx
	                                    cmp       cx, 250
	                                    jnz       Draw_hbar_Left

	                                    mov       cx, 100
	                                    inc       dx
	                                    cmp       dx, 50
	                                    jnz       Draw_hbar_Left
    
	                                    mov       dx, 37
	                                    mov       al, 2fh
	                                    mov       cx, 100

	                                    mov       bx, 100
	                                    add       bx, Player1_HB
	                                    cmp       bx, 100
	                                    jbe       end1

	Draw_Green_Hbar_left:               int       10H
	                                    inc       cx
	                                    cmp       cx, bx
	                                    jnz       Draw_Green_Hbar_left

	                                    mov       cx, 100
	                                    inc       dx
	                                    cmp       dx, 50
	                                    jnz       Draw_Green_Hbar_left

	end1:                               mov       cx, 390
	                                    mov       dx, 37
	                                    mov       al, 0

	Draw_hbar_right:                    int       10H
	                                    inc       cx
	                                    cmp       cx, 540
	                                    jnz       Draw_hbar_right

	                                    mov       cx, 390
	                                    inc       dx
	                                    cmp       dx, 50
	                                    jnz       Draw_hbar_right

	                                    mov       dx, 37
	                                    mov       al, 2fh
	                                    mov       bx, 540

	                                    mov       cx, 540
	                                    sub       cx, Player2_HB
	                                    cmp       cx, 540
	                                    jae       end2

	Draw_Green_Hbar_right:              int       10H
	                                    inc       cx
	                                    cmp       cx, bx
	                                    JNZ       Draw_Green_Hbar_right

	                                    mov       cx, 540
	                                    sub       cx, Player2_HB
	                                    inc       dx
	                                    cmp       dx, 50
	                                    jnz       Draw_Green_Hbar_right
	end2:                               mov       cx,100
	                                    mov       dx,36
	                                    mov       al,0fh
	frame11:                                                                                  	;draw upper frames for both hp bars
	                                    int       10h
	                                    inc       cx                                          	;iterate pixels in row
	                                    cmp       cx,250                                      	;cmp pixels drawn with block width
	                                    jnz       frame11                                     	;continue row

	                                    mov       cx,390
	frame21:                            
	                                    int       10h
	                                    inc       cx
	                                    cmp       cx,540
	                                    jnz       frame21

	                                    mov       cx,100
	                                    mov       dx,50
	                                    mov       al,0fh
	frame13:                                                                                  	;draw lower frames for both hp bars
	                                    int       10h
	                                    inc       cx
	                                    cmp       cx,250
	                                    jnz       frame13
    
	                                    mov       cx,390
	frame23:                            
	                                    int       10h
	                                    inc       cx
	                                    cmp       cx,540
	                                    jnz       frame23

	                                    mov       cx,99
	                                    mov       dx,37
	col14:                                                                                    	;draw left side-frame of hp bar1
	                                    int       10h
	                                    inc       dx
	                                    cmp       dx,50
	                                    jnz       col14
	                                    mov       cx,250
	                                    mov       dx,37
	col12:                                                                                    	;draw right side-frame of hp bar1
	                                    int       10h
	                                    inc       dx
	                                    cmp       dx,50
	                                    jnz       col12

	                                    mov       cx,389
	                                    mov       dx,37
	col24:                                                                                    	;draw left side-frame of hp bar2
	                                    int       10h
	                                    inc       dx
	                                    cmp       dx,50
	                                    jnz       col24
	                                    mov       cx,540
	                                    mov       dx,37
	col22:                                                                                    	;draw right side-frame of hp bar2
	                                    int       10h
	                                    inc       dx
	                                    cmp       dx,50
	                                    jnz       col22
	;corner point
	                                    mov       al,018h
	                                    mov       dx,36
	                                    mov       cx,99
	                                    int       10h
	                                    mov       cx,250
	                                    int       10h
	                                    mov       cx,389
	                                    int       10h
	                                    mov       cx,540
	                                    int       10h
	                                    mov       dx,50
	                                    mov       cx,99
	                                    int       10h
	                                    mov       cx,250
	                                    int       10h
	                                    mov       cx,389
	                                    int       10h
	                                    mov       cx,540
	                                    int       10h
	                                    ret
draw_health_bars endp
Draw_Player_1_Rank proc

	; selection of players rank

	                                    lea       si, Player1_Rank
	                                    mov       bl, [si]

	                                    cmp       bl,0
	                                    Jz        case0
	                                    cmp       bl,1
	                                    Jz        case1
	                                    cmp       bl,2
	                                    Jz        case2
	                                    cmp       bl,3
	                                    Jz        case3
	                                    cmp       bl,4
	                                    Jz        case4
	                                    cmp       bl,5
	                                    Jz        case5
	                                    cmp       bl,6
	                                    Jz        case6
	                                    cmp       bl,7
	                                    Jz        case7
	                                    cmp       bl,8
	                                    Jz        case8
	                                    cmp       bl,9
	                                    Jz        case9

	case0:                              lea       di, NUM0
	                                    jmp       Draw
	case1:                              lea       di, NUM1
	                                    jmp       Draw
	case2:                              lea       di, NUM2
	                                    jmp       Draw
	case3:                              lea       di, NUM3
	                                    jmp       Draw
	case4:                              lea       di, NUM4
	                                    jmp       Draw
	case5:                              lea       di, NUM5
	                                    jmp       Draw
	case6:                              lea       di, NUM6
	                                    jmp       Draw
	case7:                              lea       di, NUM7
	                                    jmp       Draw
	case8:                              lea       di, NUM8
	                                    jmp       Draw
	case9:                              lea       di, NUM9
	                                    jmp       Draw

	Draw:                               

	                                    MOV       AH,0Bh                                      	;set the configuration
	                                    mov       bl, 4h
	                                    int       10h
	                                    MOV       CX, 92                                      	;set the width (X) up to 64 (based on image resolution)
	                                    MOV       DX, 50                                      	;set the hieght (Y) up to 64 (based on image resolution)
	;mov DI, offset NUM0	; to iterate over the pixels
	                                    jmp       Start_OF_AMMAR                              	;Avoid drawing before the calculations
	Drawit_OF_AMMAR:                    
	                                    MOV       AH,0Ch                                      	;set the configuration to writing a pixel
	                                    mov       al, [di]                                    	; color of the current coordinates
	                                    MOV       BH,00h                                      	;set the page number
	                                    INT       10h                                         	;execute the configuration
	Start_OF_AMMAR:                     
	                                    inc       DI
	                                    DEC       Cx                                          	;  loop iteration in x direction
	                                    cmp       cx, 76
	                                    JNZ       Drawit_OF_AMMAR                             	;  check if we can draw c urrent x and y and excape the y iteration
	                                    mov       Cx, 92                                      	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                                    DEC       DX                                          	;  loop iteration in y direction
	                                    cmp       dx, 34
	                                    JZ        ENDING                                      	;  both x and y reached 00 so end program
	                                    Jmp       Drawit_OF_AMMAR

	ENDING:                             
	                                    ret
Draw_Player_1_Rank endp
Draw_Player_1_Number_Of_Bullets proc

	; selection of players, Bullets

	                                    lea       si, Player1_Bullets
	                                    mov       bl, [si]

	                                    cmp       bl,0
	                                    Jz        N0
	                                    cmp       bl,1
	                                    Jz        N1
	                                    cmp       bl,2
	                                    Jz        N2
	                                    cmp       bl,3
	                                    Jz        N3
	                                    cmp       bl,4
	                                    Jz        N4
	                                    cmp       bl,5
	                                    Jz        N5
	                                    cmp       bl,6
	                                    Jz        N6
	                                    cmp       bl,7
	                                    Jz        N7
	                                    cmp       bl,8
	                                    Jz        N8
	                                    cmp       bl,9
	                                    Jz        N9

	N0:                                 lea       di, NUM0
	                                    jmp       Drw
	N1:                                 lea       di, NUM1
	                                    jmp       Drw
	N2:                                 lea       di, NUM2
	                                    jmp       Drw
	N3:                                 lea       di, NUM3
	                                    jmp       Drw
	N4:                                 lea       di, NUM4
	                                    jmp       Drw
	N5:                                 lea       di, NUM5
	                                    jmp       Drw
	N6:                                 lea       di, NUM6
	                                    jmp       Drw
	N7:                                 lea       di, NUM7
	                                    jmp       Drw
	N8:                                 lea       di, NUM8
	                                    jmp       Drw
	N9:                                 lea       di, NUM9
	                                    jmp       Drw

	Drw:                                

	                                    MOV       AH,0Bh                                      	;set the configuration
	                                    mov       bl, 4h
	                                    int       10h
	                                    MOV       CX, 134                                     	;set the width (X) up to 64 (based on image resolution)
	                                    MOV       DX, 26                                      	;set the hieght (Y) up to 64 (based on image resolution)
	                                    jmp       Start2_By_Ammar                             	;Avoid drawing before the calculations
	Drawit2_By_Ammar:                   
	                                    MOV       AH,0Ch                                      	;set the configuration to writing a pixel
	                                    mov       al, [di]                                    	; color of the current coordinates
	                                    MOV       BH,00h                                      	;set the page number
	                                    INT       10h                                         	;execute the configuration
	Start2_By_Ammar:                    
	                                    inc       DI
	                                    DEC       Cx                                          	;  loop iteration in x direction
	                                    cmp       cx, 118
	                                    JNZ       Drawit2_By_Ammar                            	;  check if we can draw c urrent x and y and excape the y iteration
	                                    mov       Cx, 134                                     	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                                    DEC       DX                                          	;  loop iteration in y direction
	                                    cmp       dx, 10
	                                    JZ        ENDING2                                     	;  both x and y reached 00 so end program
	                                    Jmp       Drawit2_By_Ammar

	ENDING2:                            
	                                    ret
Draw_Player_1_Number_Of_Bullets endp
Draw_Player_2_Rank proc

	; selection of players rank

	                                    lea       si, Player2_Rank
	                                    mov       bl, [si]

	                                    cmp       bl,0
	                                    Jz        case20
	                                    cmp       bl,1
	                                    Jz        case21
	                                    cmp       bl,2
	                                    Jz        case22
	                                    cmp       bl,3
	                                    Jz        case23
	                                    cmp       bl,4
	                                    Jz        case24
	                                    cmp       bl,5
	                                    Jz        case25
	                                    cmp       bl,6
	                                    Jz        case26
	                                    cmp       bl,7
	                                    Jz        case27
	                                    cmp       bl,8
	                                    Jz        case28
	                                    cmp       bl,9
	                                    Jz        case29

	case20:                             lea       di, NUM0
	                                    jmp       Draw3
	case21:                             lea       di, NUM1
	                                    jmp       Draw3
	case22:                             lea       di, Num2
	                                    jmp       Draw3
	case23:                             lea       di, NUM3
	                                    jmp       Draw3
	case24:                             lea       di, NUM4
	                                    jmp       Draw3
	case25:                             lea       di, NUM5
	                                    jmp       Draw3
	case26:                             lea       di, NUM6
	                                    jmp       Draw3
	case27:                             lea       di, NUM7
	                                    jmp       Draw3
	case28:                             lea       di, NUM8
	                                    jmp       Draw3
	case29:                             lea       di, NUM9
	                                    jmp       Draw3

	Draw3:                              

	                                    MOV       AH,0Bh                                      	;set the configuration
	                                    mov       bl, 4h
	                                    int       10h
	                                    MOV       CX, 563                                     	;set the width (X) up to 64 (based on image resolution)
	                                    MOV       DX, 50                                      	;set the hieght (Y) up to 64 (based on image resolution)
	;mov DI, offset NUM0	; to iterate over the pixels
	                                    jmp       Start3                                      	;Avoid drawing before the calculations
	Drawit3:                            
	                                    MOV       AH,0Ch                                      	;set the configuration to writing a pixel
	                                    mov       al, [di]                                    	; color of the current coordinates
	                                    MOV       BH,00h                                      	;set the page number
	                                    INT       10h                                         	;execute the configuration
	Start3:                             
	                                    inc       DI
	                                    DEC       Cx                                          	;  loop iteration in x direction
	                                    cmp       cx, 547
	                                    JNZ       Drawit3                                     	;  check if we can draw c urrent x and y and excape the y iteration
	                                    mov       Cx, 563                                     	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                                    DEC       DX                                          	;  loop iteration in y direction
	                                    cmp       dx, 34
	                                    JZ        ENDING3                                     	;  both x and y reached 00 so end program
	                                    Jmp       Drawit3
	ENDING3:                            
	                                    ret
Draw_Player_2_Rank endp
Draw_Player_2_Number_Of_Bullets proc                                                      		;selection of players, Bullets

	                                    lea       si, Player2_Bullets
	                                    mov       bl, [si]

	                                    cmp       bl,0
	                                    Jz        N20
	                                    cmp       bl,1
	                                    Jz        N21
	                                    cmp       bl,2
	                                    Jz        N22
	                                    cmp       bl,3
	                                    Jz        N23
	                                    cmp       bl,4
	                                    Jz        N24
	                                    cmp       bl,5
	                                    Jz        N25
	                                    cmp       bl,6
	                                    Jz        N26
	                                    cmp       bl,7
	                                    Jz        N27
	                                    cmp       bl,8
	                                    Jz        N28
	                                    cmp       bl,9
	                                    Jz        N29

	N20:                                lea       di, NUM0
	                                    jmp       Drw3
	N21:                                lea       di, NUM1
	                                    jmp       Drw3
	N22:                                lea       di, NUM2
	                                    jmp       Drw3
	N23:                                lea       di, NUM3
	                                    jmp       Drw3
	N24:                                lea       di, NUM4
	                                    jmp       Drw3
	N25:                                lea       di, NUM5
	                                    jmp       Drw3
	N26:                                lea       di, NUM6
	                                    jmp       Drw3
	N27:                                lea       di, NUM7
	                                    jmp       Drw3
	N28:                                lea       di, NUM8
	                                    jmp       Drw3
	N29:                                lea       di, NUM9
	                                    jmp       Drw3

	Drw3:                               

	                                    MOV       AH,0Bh                                      	;set the configuration
	                                    mov       bl, 4h
	                                    int       10h
	                                    MOV       CX, 519                                     	;set the width (X) up to 64 (based on image resolution)
	                                    MOV       DX, 26                                      	;set the hieght (Y) up to 64 (based on image resolution)
	                                    jmp       Start4                                      	;Avoid drawing before the calculations
	Drawit4:                            
	                                    MOV       AH,0Ch                                      	;set the configuration to writing a pixel
	                                    mov       al, [di]                                    	; color of the current coordinates
	                                    MOV       BH,00h                                      	;set the page number
	                                    INT       10h                                         	;execute the configuration
	Start4:                             
	                                    inc       DI
	                                    DEC       Cx                                          	;  loop iteration in x direction
	                                    cmp       cx, 503
	                                    JNZ       Drawit4                                     	;  check if we can draw c urrent x and y and excape the y iteration
	                                    mov       Cx, 519                                     	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                                    DEC       DX                                          	;  loop iteration in y direction
	                                    cmp       dx, 10
	                                    JZ        ENDING4                                     	;  both x and y reached 00 so end program
	                                    Jmp       Drawit4

	ENDING4:                            
	                                    ret
Draw_Player_2_Number_Of_Bullets endp
set_cursor proc                                                                           		;INPUT : DL=X, DH=Y.

	                                    mov       ah, 2                                       	;◄■■ SERVICE TO SET CURSOR POSITION.
	                                    mov       bh, 0                                       	;◄■■ VIDEO PAGE.
	                                    int       10h                                         	;◄■■ BIOS SERVICES.
	                                    RET
set_cursor endp
PlayerWinsScreen proc

	                                    cmp       Player1_HB, 0
	                                    jz        Player2_Won

	                                    cmp       Player2_HB, 0
	                                    jz        Player1_Won

	Player2_Won:                        mov       cx, offset Second_Player_name
	                                    jmp       Continue_Wining_Message

	Player1_Won:                        mov       cx, offset First_Player_name
	                                    jmp       Continue_Wining_Message

	Continue_Wining_Message:            mov       ah,0
	                                    mov       al, 3
	                                    int       10h

	                                    mov       dl, 10
	                                    mov       dh, 10
	                                    call      set_cursor

	                                    mov       ah, 9

	                                    mov       dx, cx
	                                    int       21h

	                                    mov       dl, 10
	                                    sub       cl, 1
	                                    mov       si, cx
	                                    add       dl, [si]
	                                    mov       dh, 10
	                                    call      set_cursor

	                                    mov       ah, 9
	                                    mov       dx, offset Winning_Message
	                                    int       21h

	                                    mov       dl, 10
	                                    mov       dh, 11
	                                    call      set_cursor

	                                    mov       ah, 9
	                                    mov       dx, offset message2
	                                    int       21h

	                                    mov       ah, 0
	                                    int       16h

	                                    ret
PlayerWinsScreen endp
delay proc
	                                    mov       al, 0
	                                    mov       ah, 86h
	                                    mov       cx, 1
	                                    mov       dx, 2
	                                    int       15h
	                                    ret
delay endp
delay15h proc
	                                    mov       al, 0
	                                    mov       ah, 86h
	                                    mov       cx, 3
	                                    mov       dx, 2
	                                    int       15h
	                                    ret
delay15h endp
pix proc
	                                    mov       al,pixcl                                    	;set pixel color
	                                    mov       ah,0ch                                      	;draw pixel
	                                    int       10h
	                                    ret
pix endp
pix2 proc
	                                    mov       al,pix2cl                                   	;set pixel color
	                                    mov       ah,0ch                                      	;draw pixel
	                                    int       10h
	                                    ret
pix2 endp
drawstack1 proc
	                                    mov       origin1,0
	                                    mov       ax,rad
	                                    mov       rad1, ax
	                                    mov       flag1,ax
	                                    neg       flag1                                       	;flag = - (rad)
	drawcirc1:                                                                                	;divide circle into 8 equal parts and draw them parallelly
	                                    mov       cx,x1
	                                    add       cx,origin1
	                                    mov       dx,y1
	                                    sub       dx,rad1
	                                    call      pix                                         	;(x+origin,y-rad)		90:45

	                                    mov       dx,y1
	                                    add       dx,rad1
	                                    call      pix                                         	;(x+origin,y+rad)		270:315


	                                    mov       dx,y1
	                                    add       dx,origin1
	                                    mov       cx,x1
	                                    sub       cx,rad1
	                                    call      pix                                         	;(x-rad,y+origin)		180:225

	                                    mov       cx,x1
	                                    add       cx,rad1
	                                    call      pix                                         	;(x+rad,y+origin)		0:315
              

	                                    mov       cx,x1
	                                    sub       cx,origin1
	                                    mov       dx,y1
	                                    sub       dx,rad1
	                                    call      pix                                         	;(x-origin,y-rad)		90:135

	                                    mov       dx,y1
	                                    add       dx,rad1
	                                    call      pix                                         	;(x-origin,y+rad)		270:225


	                                    mov       dx,y1
	                                    sub       dx,origin1
	                                    mov       cx,x1
	                                    sub       cx,rad1
	                                    call      pix                                         	;(x-rad,y-origin)		180:135

	                                    mov       cx,x1
	                                    add       cx,rad1
	                                    call      pix                                         	;(x+rad,y-origin)		0:45


	                                    mov       ax,flag1
	                                    add       ax,origin1
	                                    add       ax,origin1
	                                    mov       flag1,ax                                    	;flag(r) = flag(r-1) + 2 × origin
	                                    cmp       flag1,0
	                                    jl        incorigin1
	                                    dec       rad1
	                                    mov       ax,flag1                                    	;flag(r+1) = flag(r) - 2 × rad
	                                    sub       ax,rad1
	                                    sub       ax,rad1
	                                    mov       flag1,ax
	incorigin1:                         
	                                    inc       origin1
	                                    mov       ax,origin1
	                                    cmp       ax,rad1
	;call delay
	                                    jg        finzone1
	                                    jmp       drawcirc1
               
	finzone1:                           ret
drawstack1 endp
drawstack2 proc
	                                    mov       origin2,0
	                                    mov       ax,rad
	                                    mov       rad2, ax
	                                    mov       flag2,ax
	                                    neg       flag2                                       	;flag = - (rad)
	drawcirc2:                                                                                	;divide circle into 8 equal parts and draw them parallelly
	                                    mov       cx,x2
	                                    add       cx,origin2
	                                    mov       dx,y2
	                                    sub       dx,rad2
	                                    call      pix2                                        	;(x+origin,y-rad)		90:45

	                                    mov       dx,y2
	                                    add       dx,rad2
	                                    call      pix2                                        	;(x+origin,y+rad)		270:315


	                                    mov       dx,y2
	                                    add       dx,origin2
	                                    mov       cx,x2
	                                    sub       cx,rad2
	                                    call      pix2                                        	;(x-rad,y+origin)		180:225

	                                    mov       cx,x2
	                                    add       cx,rad2
	                                    call      pix2                                        	;(x+rad,y+origin)		0:315
              

	                                    mov       cx,x2
	                                    sub       cx,origin2
	                                    mov       dx,y2
	                                    sub       dx,rad2
	                                    call      pix2                                        	;(x-origin,y-rad)		90:135

	                                    mov       dx,y2
	                                    add       dx,rad2
	                                    call      pix2                                        	;(x-origin,y+rad)		270:225


	                                    mov       dx,y2
	                                    sub       dx,origin2
	                                    mov       cx,x2
	                                    sub       cx,rad2
	                                    call      pix2                                        	;(x-rad,y-origin)		180:135

	                                    mov       cx,x2
	                                    add       cx,rad2
	                                    call      pix2                                        	;(x+rad,y-origin)		0:45


	                                    mov       ax,flag2
	                                    add       ax,origin2
	                                    add       ax,origin2
	                                    mov       flag2,ax                                    	;flag(r) = flag(r-1) + 2 × origin
	                                    cmp       flag2,0
	                                    jl        incorigin2
	                                    dec       rad2
	                                    mov       ax,flag2                                    	;flag(r+1) = flag(r) - 2 × rad
	                                    sub       ax,rad2
	                                    sub       ax,rad2
	                                    mov       flag2,ax
	incorigin2:                         
	                                    inc       origin2
	                                    mov       ax,origin2
	                                    cmp       ax,rad2
	;call delay
	                                    jg        finzone2
	                                    jmp       drawcirc2
               
	finzone2:                           ret
drawstack2 endp
pixrow proc
	row:                                
	                                    int       10h
	                                    inc       cx                                          	;iterate pixels in row
	                                    cmp       cx,640                                      	;cmp pixels drawn with block width
	                                    jnz       row                                         	;continue row
	                                    ret
pixrow endp
pixcol proc
	                                    mov       dx,2
	col:                                
	                                    int       10h
	                                    inc       dx
	                                    cmp       dx,54
	                                    jnz       col
	                                    ret
pixcol endp
frame proc
	                                    mov       cx,0                                        	;draw upper frame
	                                    mov       dx,0
	                                    mov       al,01h
	                                    mov       ah,0ch
	                                    call      pixrow
	                                    mov       cx,0
	                                    inc       dx
	                                    call      pixrow
	                                    mov       cx,0
	                                    inc       dx
	                                    mov       al,0b0h
	                                    call      pixrow
	                                    mov       cx,0
	                                    inc       dx
	                                    call      pixrow
	                                    mov       cx,0
	                                    mov       dx,52                                       	;draw lower frame
	                                    mov       al,01h
	                                    mov       ah,0ch
	                                    call      pixrow
	                                    mov       cx,0
	                                    inc       dx
	                                    call      pixrow
	                                    mov       cx,0
	                                    inc       dx
	                                    mov       al,0b0h
	                                    call      pixrow
	                                    mov       cx,0
	                                    inc       dx
	                                    call      pixrow
	                                    mov       cx,0                                        	;draw left frame
	                                    call      pixcol
	                                    inc       cx
	                                    call      pixcol
	                                    inc       cx
	                                    call      pixcol
	                                    inc       cx
	                                    call      pixcol
	                                    mov       cx,52                                       	;draw avatar1 frame
	                                    call      pixcol
	                                    inc       cx
	                                    call      pixcol
	                                    inc       cx
	                                    call      pixcol
	                                    inc       cx
	                                    call      pixcol
	                                    mov       cx,584                                      	;draw avatar 2 frame
	                                    call      pixcol
	                                    inc       cx
	                                    call      pixcol
	                                    inc       cx
	                                    call      pixcol
	                                    inc       cx
	                                    call      pixcol
	                                    mov       cx,636                                      	;draw right frame
	                                    call      pixcol
	                                    inc       cx
	                                    call      pixcol
	                                    inc       cx
	                                    call      pixcol
	                                    inc       cx
	                                    call      pixcol
frame endp
drawavatar1 proc
	                                    mov       di, offset ava1                             	;choose which type of avatar to draw
	                                    mov       cx,51                                       	;set start position in x
	                                    mov       dx,50                                       	;set start position in y
	                                    mov       ah,0Ch                                      	;draw command
	                                    jmp       cond1                                       	;check conditions
	drawava1:                           
	                                    mov       al, [di]                                    	;color of the current pixel
	                                    cmp       al,0
	                                    jz        cond1
	                                    int       10h                                         	;print pixel
	cond1:                              
	                                    inc       di                                          	;advacnce to next color pixel
	                                    dec       cx                                          	;proceed to next y location
	                                    cmp       cx,51-avaW                                  	;set back to zero position
	                                    jnz       drawava1                                    	;draw row of pixels
	                                    mov       cx,51                                       	;check for complete row
	                                    dec       dx                                          	;proceed to new row in different y
	                                    cmp       dx,50-avaH                                  	;check for complete row in all cols
	                                    jz        finish1                                     	;finish drawing object
	                                    jmp       drawava1
	finish1:                            ret
drawavatar1 endp
drawavatar2 proc
	                                    mov       di, offset ava2                             	;choose which type of avatar to draw
	                                    mov       cx,636                                      	;set start position in x
	                                    mov       dx,50                                       	;set start position in y
	                                    mov       ah,0Ch                                      	;draw command
	                                    jmp       cond2                                       	;check conditions
	drawava2:                           
	                                    mov       al, [di]                                    	;color of the current pixel
	                                    cmp       al,0
	                                    jz        cond2
	                                    int       10h                                         	;print pixel
	cond2:                              
	                                    inc       di                                          	;advacnce to next color pixel
	                                    dec       cx                                          	;proceed to next y location
	                                    cmp       cx,636-avaW                                 	;set back to zero position
	                                    jnz       drawava2                                    	;draw row of pixels
	                                    mov       cx,636                                      	;check for complete row
	                                    dec       dx                                          	;proceed to new row in different y
	                                    cmp       dx,50-avaH                                  	;check for complete row in all cols
	                                    jz        finish2                                     	;finish drawing object
	                                    jmp       drawava2
	finish2:                            ret
drawavatar2 endp
drawbluegun proc
	                                    mov       di, offset blugun                           	;choose which type of gun to draw
	                                    mov       cx,117                                      	;set start position in x
	                                    mov       dx,41                                       	;set start position in y
	                                    mov       ah,0Ch                                      	;draw command
	                                    jmp       condg1                                      	;check conditions
	drawgun1:                           
	                                    mov       al, [di]                                    	;color of the current pixel
	                                    cmp       al,0
	                                    jz        condg1
	                                    int       10h                                         	;print pixel
	condg1:                             
	                                    inc       di                                          	;advacnce to next color pixel
	                                    dec       cx                                          	;proceed to next y location
	                                    cmp       cx,117-gunW                                 	;set back to zero position
	                                    jnz       drawgun1                                    	;draw row of pixels
	                                    mov       cx,117                                      	;check for complete row
	                                    dec       dx                                          	;proceed to new row in different y
	                                    cmp       dx,41-gunH                                  	;check for complete row in all cols
	                                    jz        finishg1                                    	;finish drawing object
	                                    jmp       drawgun1
	finishg1:                           ret
drawbluegun endp
drawredgun proc
	                                    mov       di, offset redgun                           	;choose which type of gun to draw
	                                    mov       cx,579                                      	;set start position in x
	                                    mov       dx,41                                       	;set start position in y
	                                    mov       ah,0Ch                                      	;draw command
	                                    jmp       condg2                                      	;check conditions
	drawgun2:                           
	                                    mov       al, [di]                                    	;color of the current pixel
	                                    cmp       al,0
	                                    jz        condg2
	                                    int       10h                                         	;print pixel
	condg2:                             
	                                    inc       di                                          	;advacnce to next color pixel
	                                    dec       cx                                          	;proceed to next y location
	                                    cmp       cx,579-gunW                                 	;set back to zero position
	                                    jnz       drawgun2                                    	;draw row of pixels
	                                    mov       cx,579                                      	;check for complete row
	                                    dec       dx                                          	;proceed to new row in different y
	                                    cmp       dx,41-gunH                                  	;check for complete row in all cols
	                                    jz        finishg2                                    	;finish drawing object
	                                    jmp       drawgun2
	finishg2:                           ret
drawredgun endp
roundtxt proc
	                                    mov       di, offset round                            	;point to text to draw
	                                    mov       cx,357                                      	;set start position in x
	                                    mov       dx,50                                       	;set start position in y
	                                    mov       ah,0Ch                                      	;draw command
	                                    jmp       condtxt                                     	;check conditions
	drawtxt:                            
	                                    mov       al, [di]                                    	;color of the current pixel
	                                    cmp       al,0
	                                    jz        condtxt
	                                    int       10h                                         	;print pixel
	condtxt:                            
	                                    inc       di                                          	;advacnce to next color pixel
	                                    dec       cx                                          	;proceed to next y location
	                                    cmp       cx,357-roundW                               	;set back to zero position
	                                    jnz       drawtxt                                     	;draw row of pixels
	                                    mov       cx,357                                      	;check for complete row
	                                    dec       dx                                          	;proceed to new row in different y
	                                    cmp       dx,50-roundH                                	;check for complete row in all cols
	                                    jz        finishtxt                                   	;finish drawing object
	                                    jmp       drawtxt
	finishtxt:                          ret
roundtxt endp
roundnum proc
	                                    lea       si, level
	                                    mov       bl, [si]
	                                    cmp       bl,1
	                                    Jz        rnd1
	                                    cmp       bl,2
	                                    Jz        rnd2
	                                    cmp       bl,3
	                                    Jz        rnd3
	rnd1:                               lea       di, NUM1
	                                    jmp       drawrndnum
	rnd2:                               lea       di, NUM2
	                                    jmp       drawrndnum
	rnd3:                               lea       di, NUM3
	drawrndnum:                         
	                                    mov       cx,377                                      	;set start position in x
	                                    mov       dx,50                                       	;set start position in y
	                                    mov       ah,0Ch                                      	;draw command
	                                    jmp       condrnd                                     	;check conditions
	drawrnd:                            
	                                    mov       al, [di]                                    	;color of the current pixel
	                                    cmp       al,0
	                                    jz        drawblack
	                                    mov       al,44
	                                    int       10h                                         	;print pixel
	condrnd:                            
	                                    inc       di                                          	;advacnce to next color pixel
	                                    dec       cx                                          	;proceed to next y location
	                                    cmp       cx,377-16                                   	;set back to zero position
	                                    jnz       drawrnd                                     	;draw row of pixels
	                                    mov       cx,377                                      	;check for complete row
	                                    dec       dx                                          	;proceed to new row in different y
	                                    cmp       dx,50-16                                    	;check for complete row in all cols
	                                    jz        finishrnd                                   	;finish drawing object
	                                    jmp       drawrnd

	drawblack:                          int       10h                                         	;print black pixel
	                                    jmp       condrnd
	finishrnd:                          ret


roundnum endp
statusbar proc
	                                    call      frame                                       	;draw frame
	                                    call      drawavatar1                                 	;draw avatar1		samer
	                                    call      drawavatar2                                 	;draw avatar2		tamer
	                                    call      drawbluegun                                 	;draw blue gun
	                                    call      Draw_Player_1_Number_Of_Bullets             	;draw number of bullets of blue gun
	                                    call      drawredgun                                  	;draw red gun
	                                    call      Draw_Player_2_Number_Of_Bullets             	;draw number of bullets of red gun
	                                    call      Draw_Player_1_Rank                          	;draw rank of samer
	                                    call      Draw_Player_2_Rank                          	;draw rank of tamer
	                                    call      draw_health_bars                            	;draw health bars
	                                    call      roundtxt                                    	;draw round
	                                    call      roundnum                                    	;draw round number
	                                    ret
statusbar endp
DrawPlayer1 PROC
                   
	                                    MOV       CX, imgW                                    	;width of player
	                                    MOV       DX, imgH                                    	;hieght of player
	                                    ADD       CX,player1currentXpos                       	;start x position
	                                    ADD       DX,player1currentYpos                       	;start y position
	                                    jmp       Start1                                      	;check calculations
	Drawit1:                            
	                                    MOV       AH,0Ch                                      	;set the configuration to writing a pixel
	                                    mov       al, [DI]                                    	;color of the current coordinates
	                                    cmp       al,0                                        	;if pixel is transparent (convention 0 = transparent)
	                                    jz        Start1                                      	;skip
	                                    MOV       BH,00h                                      	;set the page number
	                                    INT       10h                                         	;execute the configuration
	Start1:                             
	                                    inc       DI
	                                    DEC       Cx                                          	;loop iteration in x direction
	                                    CMP       CX,player1currentXpos
	                                    JNZ       Drawit1                                     	;print in same row or advance to next one
	                                    mov       Cx, imgW                                    	;check printed row length
	                                    ADD       CX,player1currentXpos
	                                    DEC       DX                                          	;iterate in y
	                                    CMP       DX,player1currentYpos
	                                    JZ        ReturnDrawplayer1                           	;finish drawing
	                                    JNZ       Drawit1                                     	;continue drawing

	ReturnDrawplayer1:                  RET
DrawPlayer1 endp
DMGPlayer1 PROC
                   
	                                    MOV       CX, imgW                                    	;width of player
	                                    MOV       DX, imgH                                    	;hieght of player
	                                    ADD       CX,player1currentXpos                       	;start x position
	                                    ADD       DX,player1currentYpos                       	;start y position
	                                    jmp       StartDMG1                                   	;check calculations
	DrawitDMG1:                         
	                                    MOV       AH,0Ch                                      	;set the configuration to writing a pixel
	                                    mov       al, [DI]                                    	;color of the current coordinates
	                                    cmp       al,0                                        	;if pixel is transparent (convention 0 = transparent)
	                                    jz        StartDMG1                                   	;skip
	                                    MOV       AL,28H
	                                    MOV       BH,00h                                      	;set the page number
	                                    INT       10h                                         	;execute the configuration
	StartDMG1:                          
	                                    inc       DI
	                                    DEC       Cx                                          	;loop iteration in x direction
	                                    CMP       CX,player1currentXpos
	                                    JNZ       DrawitDMG1                                  	;print in same row or advance to next one
	                                    mov       Cx, imgW                                    	;check printed row length
	                                    ADD       CX,player1currentXpos
	                                    DEC       DX                                          	;iterate in y
	                                    CMP       DX,player1currentYpos
	                                    JZ        ReturnDMGplayer1                            	;finish drawing
	                                    JNZ       DrawitDMG1                                  	;continue drawing

	ReturnDMGplayer1:                   RET
DMGPlayer1 ENDP
DrawPlayer2 PROC
                   
	                                    MOV       CX, imgW                                    	;width of player
	                                    MOV       DX, imgH                                    	;hieght of player
	                                    ADD       CX,player2currentXpos                       	;start x position
	                                    ADD       DX,player2currentYpos                       	;start y position
	                                    jmp       Start2                                      	;check calculations
	Drawit2:                            
	                                    MOV       AH,0Ch                                      	;set the configuration to writing a pixel
	                                    mov       al, [DI]                                    	;color of the current coordinates
	                                    cmp       al,0                                        	;if pixel is transparent (convention 0 = transparent)
	                                    jz        Start2                                      	;skip
	                                    MOV       BH,00h                                      	;set the page number
	                                    INT       10h                                         	;execute the configuration
	Start2:                             
	                                    inc       DI
	                                    DEC       Cx                                          	;loop iteration in x direction
	                                    CMP       CX,player2currentXpos
	                                    JNZ       Drawit2                                     	;print in same row or advance to next one
	                                    mov       Cx, imgW                                    	;check printed row length
	                                    ADD       CX,player2currentXpos
	                                    DEC       DX                                          	;iterate in y
	                                    CMP       DX,player2currentYpos
	                                    JZ        ReturnDrawplayer2                           	;finish drawing
	                                    JNZ       Drawit2                                     	;continue drawing

	ReturnDrawplayer2:                  RET
DrawPlayer2 ENDP
DMGPlayer2 PROC
                   
	                                    MOV       CX, imgW                                    	;width of player
	                                    MOV       DX, imgH                                    	;hieght of player
	                                    ADD       CX,player2currentXpos                       	;start x position
	                                    ADD       DX,player2currentYpos                       	;start y position
	                                    jmp       StartDMG2                                   	;check calculations
	DrawitDMG2:                         
	                                    MOV       AH,0Ch                                      	;set the configuration to writing a pixel
	                                    mov       al, [DI]                                    	;color of the current coordinates
	                                    cmp       al,0                                        	;if pixel is transparent (convention 0 = transparent)
	                                    jz        StartDMG2                                   	;skip
	                                    MOV       AL,28H
	                                    MOV       BH,00h                                      	;set the page number
	                                    INT       10h                                         	;execute the configuration
	StartDMG2:                          
	                                    inc       DI
	                                    DEC       Cx                                          	;loop iteration in x direction
	                                    CMP       CX,player2currentXpos
	                                    JNZ       DrawitDMG2                                  	;print in same row or advance to next one
	                                    mov       Cx, imgW                                    	;check printed row length
	                                    ADD       CX,player2currentXpos
	                                    DEC       DX                                          	;iterate in y
	                                    CMP       DX,player2currentYpos
	                                    JZ        ReturnDMGplayer2                            	;finish drawing
	                                    JNZ       DrawitDMG2                                  	;continue drawing

	ReturnDMGplayer2:                   RET
DMGPlayer2 ENDP
grid proc

	gride:                              
	           
	                                    mov       cx,0                                        	;x coordinate
	                                    mov       dx,56                                       	;y coordinate, end of status bar and start of grid
	                                    mov       ah,0ch                                      	;draw pixel
	                                    inc       cx
	                                    mov       bx,32                                       	;block width jump
	                                    mov       si,70                                       	;block height jump
			 
	pixrow1:                            mov       al,30                                       	;color
	                                    int       10h
	                                    inc       cx                                          	;iterate pixels in row
	                                    cmp       cx,bx                                       	;cmp pixels drawn with block width
	                                    jnz       pixrow1                                     	;continue row


	advrow1:                            cmp       bx,640                                      	;iterate pixels of col & check screen size
	                                    jz        col1                                        	;full row
	                                    mov       al,20                                       	;brick space color
	                                    int       10h                                         	;fill space
	                                    add       bx,32                                       	;advance to next brick in row by _brick width_
	                                    inc       cx                                          	;leave brick space
	                                    jmp       pixrow1

	col1:                               mov       bx,32                                       	;brick width
	                                    mov       cx,1
	                                    inc       dx                                          	;advance pixrow
	                                    cmp       dx,si                                       	;check screen size
	                                    jz        advcol1
	                                    jnz       pixrow1
	     
	advcol1:                            cmp       dx,392                                      	;check full screen
	                                    jge       grido                                       	;full screen
	                                    mov       cx,0                                        	;back to zero position
	                                    mov       al,20                                       	;color
	                                    call      pixrow
	                                    mov       cx,1
	                                    add       dx,15                                       	;advance to next brick in row by _brick width_
	                                    add       si,29
	                                    jmp       pixrow1


	grido:                              cmp       dx,400
	                                    mov       cx,17                                       	;x coordinate
	                                    mov       dx,71                                       	;y coordinate, end of status bar and start of grid
	                                    mov       bx,48                                       	;block width jump
	                                    mov       si,84                                       	;block height jump
			 
	pixrow2:                            mov       al,30                                       	;color
	                                    int       10h
	                                    inc       cx                                          	;iterate pixels in row
	                                    cmp       cx,bx                                       	;cmp pixels drawn with block width
	                                    jnz       pixrow2                                     	;continue row

			   

	advrow2:                            cmp       bx,624                                      	;iterate pixels of col & check screen size
	                                    jz        col2                                        	;full row
	                                    mov       al,20                                       	;brick space color
	                                    int       10h                                         	;fill space
	                                    add       bx,32                                       	;advance to next brick in row by _brick width_
	                                    inc       cx                                          	;leave brick space
	                                    jmp       pixrow2

	col2:                               mov       cx,17                                       	;back to zero position
	                                    mov       bx,48                                       	;brick width
	                                    inc       dx                                          	;advance pixrow
	                                    cmp       dx,si                                       	;check screen size
	                                    jz        advcol2
	                                    jnz       pixrow2
	     
	advcol2:                            cmp       dx,400                                      	;check full screen
	                                    jge       brick                                       	;full screen
	                                    mov       cx,0                                        	;back to zero position
	                                    mov       al,20                                       	;color
	                                    call      pixrow
	                                    mov       cx,17
	                                    add       dx,15                                       	;advance to next brick in row by _brick width_
	                                    add       si,29
	                                    inc       dx
	                                    jmp       pixrow2

	brick:                              
	                                    mov       cx,0                                        	;x coordinate
	                                    mov       dx,71                                       	;y coordinate, end of status bar and start of grid
	                                    mov       bx,16                                       	;block width jump
	                                    mov       si,84                                       	;block height jump
			 
	bricrow:                            mov       al,29                                       	;color
	                                    int       10h
	                                    inc       cx                                          	;iterate pixels in row
	                                    cmp       cx,bx                                       	;cmp pixels drawn with block width
	                                    jnz       bricrow                                     	;continue row

	advbricrow:                         cmp       bx,640
	                                    jz        briccol
	                                    mov       al,20                                       	;brick space color
	                                    int       10h                                         	;fill space
	                                    add       bx,624                                      	;advance to next brick in row by _brick width_
	                                    mov       cx,624                                      	;leave brick space
	                                    jmp       space


	briccol:                            mov       cx,0                                        	;back to zero position
	                                    mov       bx,16                                       	;brick width
	                                    inc       dx                                          	;advance pixrow
	                                    cmp       dx,si                                       	;check screen size
	                                    jz        advbricol
	                                    jnz       bricrow
	     
	advbricol:                          cmp       dx,400                                      	;check full screen
	                                    jge       returngrid                                  	;full screen
	                                    add       dx,15                                       	;advance to next brick in row by _brick width_
	                                    add       si,29
	                                    inc       dx
	                                    jmp       bricrow

	space:                              int       10h                                         	;fill second space
	                                    inc       cx                                          	;next half-brick position
	                                    jmp       bricrow

	returngrid:                         
	stack1:                             call      drawstack1                                  	;draw circle of stack1
	                                    dec       rad                                         	;dec radius to draw inner cirlces
	                                    cmp       rad,0
	                                    jnz       stack1
	                                    mov       rad,36                                      	;set radius bac to orignial length
	stack2:                             call      drawstack2                                  	;draw circle of stack2
	                                    dec       rad                                         	;dec radius to draw inner cirlces
	                                    cmp       rad,0
	                                    jnz       stack2
	                                    mov       rad,36                                      	;set radius bac to orignial length
	                                    ret
grid endp
DrawBulletGun1 PROC
	                                    cmp       SwitchGunBullet1,0
	                                    jz        DrawBulletGun1ret
	                                    MOV       CX, 8                                       	;width of player
	                                    MOV       DX, 8                                       	;hieght of player
	                                    ADD       CX, GunBullet1xpos                          	;start x of bullet
	                                    ADD       DX, GunBullet1ypos                          	; start y of bullet
	                                    mov       DI, offset bllt1
	                                    jmp       StartGun1                                   	;check calculations
	DrawitGun1:                         
	                                    MOV       AH,0Ch                                      	;set the configuration to writing a pixel
	                                    mov       al, [DI]                                    	;color of the current coordinates
	                                    cmp       al,0                                        	;if pixel is transparent (convention 0 = transparent)
	                                    jz        StartGun1                                   	;skip
	                                    MOV       BH,00h                                      	;set the page number
	                                    INT       10h                                         	;execute the configuration
	StartGun1:                          
	                                    inc       DI
	                                    DEC       Cx                                          	;loop iteration in x direction
	                                    CMP       CX,GunBullet1xpos
	                                    JNZ       DrawitGun1                                  	;print in same row or advance to next one
	                                    mov       Cx, 8                                       	;check printed row length
	                                    ADD       CX,GunBullet1xpos
	                                    DEC       DX                                          	;iterate in y
	                                    CMP       DX,GunBullet1ypos
	                                    JZ        DrawBulletGun1ret                           	;finish drawing
	                                    JNZ       DrawitGun1

	DrawBulletGun1ret:                  RET
DrawBulletGun1 ENDP
DrawBulletGun2 PROC
	                                    cmp       SwitchGunBullet2,0
	                                    jz        DrawBulletGun2ret
	                                    MOV       CX, 8                                       	;width of player  new year
	                                    MOV       DX, 8                                       	;hieght of player
	                                    ADD       CX, GunBullet2xpos                          	;start x of bullet
	                                    ADD       DX, GunBullet2ypos                          	; start y of bullet
	                                    mov       DI, offset bllt2
	                                    jmp       StartGun2                                   	;check calculations
	DrawitGun2:                         
	                                    MOV       AH,0Ch                                      	;set the configuration to writing a pixel
	                                    mov       al, [DI]                                    	;color of the current coordinates
	                                    cmp       al,0                                        	;if pixel is transparent (convention 0 = transparent)
	                                    jz        StartGun2                                   	;skip
	                                    MOV       BH,00h                                      	;set the page number
	                                    INT       10h                                         	;execute the configuration
	StartGun2:                          
	                                    inc       DI
	                                    DEC       Cx                                          	;loop iteration in x direction
	                                    CMP       CX,GunBullet2xpos
	                                    JNZ       DrawitGun2                                  	;print in same row or advance to next one
	                                    mov       Cx, 8                                       	;check printed row length
	                                    ADD       CX,GunBullet2xpos
	                                    DEC       DX                                          	;iterate in y
	                                    CMP       DX,GunBullet2ypos
	                                    JZ        DrawBulletGun2ret                           	;finish drawing
	                                    JNZ       DrawitGun2

	DrawBulletGun2ret:                  RET
DrawBulletGun2 ENDP
drawgrid proc
	
	                                    call      grid
	                                    call      Draw_Power_Up_Square
	                                    call      Draw_Box_version_2
	gun1:                               cmp       sbarr,0                                     	;if samer didnt cross the barrier
	                                    jz        enabled1                                    	;keep his gun enabled
	                                    cmp       sbarr,1                                     	;if samer crossed the barrier
	                                    jz        disabled1                                   	;disable his gun
	enabled1:                           mov       DI, offset samer00                          	;choose which character frame to draw
	                                    call      DrawPlayer1
	                                    jmp       gun2                                        	;proceed to check tamer gun
	disabled1:                          mov       DI, offset samer01                          	;choose which character frame to draw
	                                    call      DrawPlayer1
	                                    jmp       gun2                                        	;proceed to check tamer gun
	gun2:                               cmp       tbarr,0                                     	;if tamer didnt cross the barrier
	                                    jz        enabled2                                    	;keep his gun enabled
	                                    cmp       tbarr,1                                     	;if tamer crossed the barrier
	                                    jz        disabled2                                   	;disable his gun
	enabled2:                           mov       DI, offset tamer00                          	;choose which character frame to draw
	                                    call      DrawPlayer2
	                                    jmp       next                                        	;proceed to update bullets
	disabled2:                          mov       DI, offset tamer01                          	;choose which character frame to draw
	                                    call      DrawPlayer2
	                                    jmp       next                                        	;proceed to update bullets
	next:                               call      DrawBulletGun1
	                                    call      DrawBulletGun2
	returngame:                         ret
drawgrid endp
Damage_Box_By_Bullet_1 proc

	                                    lea       di, Box_1_Activation
	                                    lea       si, Box_1_End_X_location
	                                    mov       bl, Power_Ups_Counts

	                                    cmp       bl, 0
	                                    Jz        Return_Damage_Box_By_Bullet_1

	                                    cmp       SwitchGunBullet1, 0
	                                    Jz        Return_Damage_Box_By_Bullet_1

	Check_Cordiantes_Of_Box_And_Bullet: 
	
	                                    cmp       [di], 0
	                                    Jz        Check_Next_Box

	
	
	                                    mov       cx, [si]
	                                    mov       dx, GunBullet1xpos
	                                    cmp       cx, dx
	                                    ja        Check_Next_Box
	                                    add       cx, 40
	                                    cmp       cx, dx
	                                    jb        Check_Next_Box

	                                    add       si, 2
	                                    mov       cx, [si]
	                                    sub       si, 2
	                                    mov       dx, GunBullet1ypos
	                                    cmp       cx, dx
	                                    ja        Check_Next_Box
	                                    add       cx, 40
	                                    cmp       cx, dx
	                                    jb        Check_Next_Box

	                                    mov       ax, [di]
	                                    dec       ax
	                                    mov       [di],ax
	                                    mov       SwitchGunBullet1, 0
	                                    jmp       Return_Damage_Box_By_Bullet_1

	Check_Next_Box:                     
	                                    dec       bl
	                                    cmp       bl, 0
	                                    Jz        Return_Damage_Box_By_Bullet_1
	                                    add       si, 4
	                                    add       di, 2
	                                    jmp       Check_Cordiantes_Of_Box_And_Bullet

	Return_Damage_Box_By_Bullet_1:      
	                                    call      drawgrid
	                                    ret
Damage_Box_By_Bullet_1 endp
Damage_Box_By_Bullet_2 proc

	                                    lea       di, Box_1_Activation
	                                    lea       si, Box_1_End_X_location
	                                    mov       bl, Power_Ups_Counts

	                                    cmp       bl, 0
	                                    Jz        Return_Damage_Box_By_Bullet_2

	                                    cmp       SwitchGunBullet2, 0
	                                    Jz        Return_Damage_Box_By_Bullet_2

	Check_Cordiantes_Of_Box_And_Bullet2:
	
	                                    cmp       [di], 0
	                                    Jz        Check_Next_Box2

	
	
	                                    mov       cx, [si]
	                                    mov       dx, GunBullet2xpos
	                                    cmp       cx, dx
	                                    ja        Check_Next_Box2
	                                    add       cx, 40
	                                    cmp       cx, dx
	                                    jb        Check_Next_Box2

	                                    add       si, 2
	                                    mov       cx, [si]
	                                    sub       si, 2
	                                    mov       dx, GunBullet2ypos
	                                    cmp       cx, dx
	                                    ja        Check_Next_Box2
	                                    add       cx, 40
	                                    cmp       cx, dx
	                                    jb        Check_Next_Box2

	                                    mov       ax, [di]
	                                    dec       ax
	                                    mov       [di],ax
	                                    mov       SwitchGunBullet2, 0
	                                    jmp       Return_Damage_Box_By_Bullet_2

	Check_Next_Box2:                    
	                                    dec       bl
	                                    cmp       bl, 0
	                                    Jz        Return_Damage_Box_By_Bullet_2
	                                    add       si, 4
	                                    add       di, 2
	                                    jmp       Check_Cordiantes_Of_Box_And_Bullet2

	Return_Damage_Box_By_Bullet_2:      
	                                    call      drawgrid
	                                    ret
Damage_Box_By_Bullet_2 endp


SEND_MoveDown1 PROC
	                                    CMP       AH,1FH                                      	;scan code of arrow down
	                                    JNZ       MoveDown1Return
	                                    cmp       dead1,1
	                                    JZ        MoveDown1Return
	IncDown1:                           MOV       BX,player1currentYpos                       	;changed 4lines from 337 to 440
	                                    ADD       BX,80d
	                                    CMP       BX,380d
	                                    JA        MoveDown1Return
	                                    cmp       BX,player2currentYpos                       	;NEW
	                                    JNZ       ContinueMoveDown1
	                                    MOV       BX,player1currentXpos
	                                    ADD       BX,10d
	                                    cmp       BX,player2currentXpos
	                                    JZ        MoveDown1Return
	ContinueMoveDown1:                  
	                                    ADD       player1currentYpos,80d
	                                    call      Block_Movement_Of_Player_1_Boxes
	                                    cmp       bx, 0
	                                    Jz        Decrement_Player_1_Current_Ypos
	                                    jmp       Continue_Normal_down1

	Decrement_Player_1_Current_Ypos:    
	                                    sub       player1currentYpos,80d

	Continue_Normal_down1:              call      drawgrid
	MoveDown1Return:                    ret                                                   	;Jmp  Motion

SEND_MoveDown1 ENDP
SEND_MoveUp1 PROC
	                                    CMP       AH,11H                                      	;scan code of arrow down
	                                    JNZ       MoveUp1Return
	                                    cmp       dead1,1
	                                    JZ        MoveUp1Return
	DecUp1:                             MOV       BX,player1currentYpos                       	;changed 4lines from 337 to 440
	                                    SUB       BX,80d
	                                    CMP       BX,64d
	                                    JL        MoveUp1Return
	                                    cmp       BX,player2currentYpos                       	;NEW
	                                    JNZ       ContinueMoveUp1
	                                    MOV       BX,player1currentXpos
	                                    ADD       BX,10d
	                                    cmp       BX,player2currentXpos
	                                    JZ        MoveUp1Return
	ContinueMoveUp1:                    
	                                    SUB       player1currentYpos,80d
	                                    call      Block_Movement_Of_Player_1_Boxes
	                                    cmp       bx, 0
	                                    Jz        Decrement_Player_1_Current_Y2pos
	                                    jmp       Continue_Normal_up1

	Decrement_Player_1_Current_Y2pos:   
	                                    add       player1currentypos,80d

	Continue_Normal_up1:                call      drawgrid
	MoveUp1Return:                      ret                                                   	;Jmp  Motion
SEND_MoveUp1 ENDP
SEND_MoveLeft1 PROC
	                                    CMP       AH,1EH                                      	;scan code of arrow down
	                                    JNZ       MoveLeft1Return
	                                    cmp       dead1,1
	                                    JZ        MoveLeft1Return
	DecLeft1:                           MOV       BX,player1currentXpos                       	;changed 4lines from 337 to 440
	                                    SUB       BX,80d
	                                    CMP       BX,0d
	                                    JL        MoveLeft1Return
	                                    ADD       BX,10d
	                                    cmp       BX,player2currentXpos                       	;NEW
	                                    JNZ       ContinueMoveLeft1
	                                    MOV       BX,player1currentYpos
	                                    cmp       BX,player2currentYpos
	                                    JZ        MoveLeft1Return
	ContinueMoveLeft1:                  
	                                    SUB       player1currentXpos,80d
	                                    call      Block_Movement_Of_Player_1_Boxes
	                                    cmp       bx, 0
	                                    Jz        Increment_Player_1_Current_Xpos
	                                    jmp       checkgunL1

	Increment_Player_1_Current_Xpos:    add       player1currentXpos,80d
	checkgunL1:                         cmp       player1currentXpos,320                      	;if samer crossed the barrier
	                                    jge       Continue_Normal_left1
	                                    mov       sbarr,0                                     	;his gun is disabled
	Continue_Normal_left1:              
	                                    call      drawgrid
	MoveLeft1Return:                    ret                                                   	;Jmp  Motion
SEND_MoveLeft1 ENDP
SEND_MoveRight1 PROC
	                                    CMP       aH,20H                                      	;scan code of arrow down
	                                    JNZ       MoveRight1Return
	                                    cmp       dead1,1
	                                    JZ        MoveRight1Return
	IncRight1:                          MOV       BX,player1currentXpos                       	;changed 4lines from 337 to 440
	                                    ADD       BX,80d
	                                    CMP       BX,556
	                                    JA        MoveRight1Return
	                                    ADD       BX,10d
	                                    cmp       BX,player2currentXpos                       	;NEW
	                                    JNZ       ContinueMoveRight1
	                                    MOV       BX,player1currentYpos
	                                    cmp       BX,player2currentYpos
	                                    JZ        MoveRight1Return
	ContinueMoveRight1:                 
	                                
	;sub bx, 10
	;call
									
	                                    ADD       player1currentXpos,80d
	                                    call      Block_Movement_Of_Player_1_Boxes
	                                    cmp       bx, 0
	                                    Jz        Decrement_Player_1_Current_Xpos
	                                    jmp       checkgunR1

	Decrement_Player_1_Current_Xpos:    sub       player1currentXpos,80d
	checkgunR1:                         cmp       player1currentXpos,320                      	;if samer crossed the barrier
	                                    jl        Continue_Normal
	                                    mov       sbarr,1                                     	;his gun is disabled
	Continue_Normal:                    call      drawgrid
	MoveRight1Return:                   ret                                                   	;Jmp  Motion

SEND_MoveRight1 ENDP

instack1 proc
	                                    cmp       dead1,1
	                                    JZ        player2instack1
	                                    cmp       player1currentXpos,80                       	;if samer's x position is in stack
	                                    jz        check1                                      	;check y position too
	                                    jnz       notinstack1                                 	;if not return

	check1:                             cmp       player1currentYpos,304                      	;if samer is in stack
	                                    jz        incbullts1                                  	;increase bullets
	                                    jnz       notinstack1                                 	;if not return
	incbullts1:                         cmp       Player1_Bullets,9                           	;if samer has max bullets
	                                    jz        notinstack1                                 	;return
	                                    inc       Player1_Bullets                             	;else increase bullets one at a time
	                                    call      Draw_Player_1_Number_Of_Bullets             	;update status bar
	                                    jmp       notinstack1
	player2instack1:                    
	                                    cmp       player2currentXpos,96                       	;if tamer's x position is in stack
	                                    jc        checkplayer2                                	;check y position too
	                                    jnz       notinstack1                                 	;if not return

	checkplayer2:                       cmp       player2currentYpos,304                      	;if tamer is in stack
	                                    jz        incrank2                                    	;increase rank
	                                    jnz       notinstack1
	incrank2:                           inc       Player2_Rank
	                                    inc       level                                       	;advance level
	                                    mov       set,1                                       	;set flag with 1 to advance to next level
	                                    call      delay15h
	                                    call      Draw_Player_2_Rank
	notinstack1:                        ret
instack1 endp
Heal_Player_2 proc
	                                    cmp       dead2,1
	                                    JZ        Return_Of_Heal_player2
	                                    lea       di, Power_Up_1_Activation
	                                    lea       si, Power_Up_1_X_location
	                                    mov       al, 0

	Start_Of_effect_player2:            
	                                    cmp       [di], 0
	                                    jZ        Return_Of_Heal_player2
		
		
		
		
	                                    mov       bx, player2currentXpos
	;lea si, Power_Up_1_X_location

	                                    cmp       bx, [si]
	                                    Ja        Return_Of_Heal_player2
	                                    add       bx, imgW
	                                    cmp       bx, [si]
	                                    Jb        Return_Of_Heal_player2

	;jmp Return_Of_Heal_Player_1

	CmpToY_player2:                     
	                                    mov       bx, player2currentYpos
	                                    add       si, 2

	                                    cmp       bx, [si]
	                                    Ja        Return_Of_Heal_player2
	                                    add       bx, imgH
	                                    cmp       bx, [si]
	                                    Jb        Return_Of_Heal_player2

	                                    sub       si, 2
	;jmp Return_Of_Heal_Player_1

	                                    cmp       [di], 1
	                                    JZ        AddHp_player2
	                                    cmp       [di], 2
	                                    JZ        SubHp_player2
	                                    cmp       [di], 3
	                                    Jz        Set_Number_Of_Bullets_9_player2
	                                    jmp       Return_Of_Heal_player2

	AddHp_player2:                      cmp       Player2_HB,150
	                                    jz        Return_Of_Heal_Player2
	                                    mov       [di], 0
	;lea si, Player1_HB
	                                    add       Player2_HB, 40
	                                    cmp       Player2_HB, 150
	                                    Ja        Mkae_it_Equal_To_150_player2
	                                    call      Draw_Health_Bars
	                                    jmp       Return_Of_Heal_player2

	Mkae_it_Equal_To_150_player2:       mov       Player2_HB, 150
	                                    call      Draw_Health_Bars

	                                    jmp       Return_Of_Heal_player2

	SubHp_player2:                      mov       [di], 0
	                                    cmp       Player2_HB, 40
	                                    jbe       Set_Hp_To_Zero_player2
	                                    sub       Player2_HB, 40
	                                    call      Draw_Health_Bars
	                                    jmp       Return_Of_Heal_player2

	Set_Hp_To_Zero_player2:             mov       Player2_HB, 0
	                                    call      Draw_Health_Bars
	                                    jmp       Return_Of_Heal_player2

	Set_Number_Of_Bullets_9_player2:    cmp       Player2_Bullets,9
	                                    jz        Return_Of_Heal_Player2
	                                    mov       [di], 0
	                                    mov       Player2_Bullets, 9
	                                    call      Draw_Player_2_Number_Of_Bullets


	Return_Of_Heal_player2:             
	                                    add       di, 2
	                                    add       si, 4
	                                    inc       al
	                                    cmp       al, 3
	                                    Jnz       Start_Of_effect_player2
	                                    call      drawgrid

	;call Draw_Power_Up_Square
	
	                                    ret
Heal_Player_2 endp




Player1HitsPlayer2 PROC
	                                    MOV       CX,GunBullet1xpos
	                                    MOV       DX,player2currentXpos
	                                    CMP       DX,Cx
	                                    JA        Player1HitsPlayer2ret
	                                    ADD       DX, imgW+32                                 	;both 16 & 16 between bullet before and after hit
	                                    CMP       DX,Cx
	                                    JB        Player1HitsPlayer2ret

	                                    MOV       CX,GunBullet1ypos
	                                    MOV       DX,player2currentYpos
	                                    CMP       DX,Cx
	                                    JA        Player1HitsPlayer2ret
	                                    ADD       DX, 64d
	                                    CMP       DX,Cx
	                                    JB        Player1HitsPlayer2ret
	                                    cmp       tbarr,0                                     	;if tamer didn't cross the barrier
	                                    jz        nrmlsub12                                   	;subtract normal the value from hp
	                                    cmp       tbarr,1                                     	;if tamer crossed the barrier
	                                    jz        dbllsub12                                   	;subtract double the value from hp
	nrmlsub12:                          CMP       Player2_HB,10                               	;if tamer is defeated
	                                    JB        CasePlayer2HBis0                            	;let hp = 0
	                                    mov       DI, offset tamer00
	                                    call      DMGPlayer2                                  	;show damage on player (red color)
	                                    SUB       Player2_HB,10
	                                    call      delay                                       	;delay is called to see effect momentarly
	                                    call      DrawPlayer2                                 	;draw original player position
	                                    JMP       CallDrawHealthBarsBlueBullets
	dbllsub12:                          CMP       Player2_HB,20                               	;if tamer is defeated
	                                    JB        CasePlayer2HBis0                            	;let hp = 0
	                                    mov       DI, offset tamer01
	                                    call      DMGPlayer2                                  	;show damage on player (red color)
	                                    SUB       Player2_HB,20
	                                    call      delay                                       	;delay is called to see effect momentarly
	                                    call      DrawPlayer2                                 	;draw original player position
	                                    JMP       CallDrawHealthBarsBlueBullets
	CasePlayer2HBis0:                   MOV       Player2_HB,0
	CallDrawHealthBarsBlueBullets:      call      Draw_Health_Bars
	                                    MOV       SwitchGunBullet1,0
	                                    call      drawgrid
	                                    call      Heal_Player_2
	Player1HitsPlayer2ret:              RET
Player1HitsPlayer2 ENDP
RepeatBulletGun1 PROC
	AddOnXbulletGun1:                                                                         	;call delay						;dealy called to debug for errors
	                                    MOV       CX,40d                                      	;Bullet Speedddd
	                                    ADD       GunBullet1xpos,CX
	                                    MOV       CX,GunBullet1xpos
	                                    CMP       CX,640d
	                                    JNA       BeforeRepeatBulletGun1ret
	                                    MOV       SwitchGunBullet1,0d
	                                    JMP       RepeatBulletGun1ret
	BeforeRepeatBulletGun1ret:          
	                                    call      drawgrid
	RepeatBulletGun1ret:                call      Damage_Box_By_Bullet_1
	                                    call      Player1HitsPlayer2
	                                    RET
RepeatBulletGun1 ENDP

	;//////////////////////////////////////////////////

SENDfire1 proc
	                                    cmp       dead1,1
	                                    JZ        fire1ret
	                                    cmp       Player1_Bullets, 0                          	;if samer has no ammo
	                                    Jz        fire1ret                                    	;return - don't fire
	                                    cmp       SwitchGunBullet1,1d                         	;if it is recoil time
	                                    jz        fire1ret                                    	;return - wait for cooldown
	                                    cmp       sbarr,1                                     	;if samer crossed the barrier
	                                    jz        fire1ret                                    	;his gun is disabled
	                                    cmp       ah,57                                       	;check pressed key with _SpaceBar_
	                                    jnz       fire1ret                                    	;return if not
	firep1:                             dec       Player1_Bullets                             	;dec the bullets by the fired ones (only one per shot)
	                                    call      Draw_Player_1_Number_Of_Bullets             	;update status bar
	                                    call      grid                                        	;update grid
	                                    call      Draw_Power_Up_Square
	                                    call      Draw_Box_version_2
	                                    mov       DI, offset samer10                          	;choose player shooting frame to draw
	                                    call      DrawPlayer1
	gunchk1:                            cmp       tbarr,0                                     	;if tamer didnt cross the barrier
	                                    jz        enabled21                                   	;keep his gun enabled
	                                    cmp       tbarr,1                                     	;if tamer crossed the barrier
	                                    jz        disabled21                                  	;disable his gun
	enabled21:                          mov       DI, offset tamer00                          	;choose which character frame to draw
	                                    call      DrawPlayer2
	                                    jmp       calldelay                                   	;proceed to next commands
	disabled21:                         mov       DI, offset tamer01                          	;choose which character frame to draw
	                                    call      DrawPlayer2
	calldelay:                          call      delay
	                                    call      drawgrid                                    	;draw default grid
	                                    MOV       CX, player1currentXpos                      	;new year
	                                    ADD       CX, 64d
	                                    MOV       GunBullet1xpos,cx
	                                    MOV       CX, player1currentYpos
	                                    ADD       CX, 30d
	                                    MOV       GunBullet1ypos,cx
	                                    call      DrawBulletGun1
	                                    MOV       CX,1d
	                                    MOV       SwitchGunBullet1,CX                         	;new year
	fire1ret:                           ret
SENDfire1 endp
SEND_MoveDown2 PROC
	                                    CMP       AH,80d                                      	;scan code of arrow down
	                                    JNZ       MoveDownReturn
	                                    cmp       dead2,1
	                                    JZ        MoveDownReturn
	IncDown:                            MOV       BX,player2currentYpos                       	;changed 4lines from 337 to 440
	                                    ADD       BX,80d
	                                    CMP       BX,380d
	                                    JA        MoveDownReturn
	                                    cmp       BX,player1currentYpos                       	;NEW
	                                    JNZ       ContinueMoveDown
	                                    MOV       BX,player2currentXpos
	                                    SUB       BX,10d
	                                    cmp       BX,player1currentXpos
	                                    JZ        MoveDownReturn
	ContinueMoveDown:                   
	                                    ADD       player2currentYpos,80d
	                                    call      Block_Movement_Of_Player_2_Boxes
	                                    cmp       bx, 0
	                                    Jz        Decrement_Player_2_Current_Ypos
	                                    jmp       Continue_Normal_down2

	Decrement_Player_2_Current_Ypos:    
	                                    sub       player2currentYpos,80d

	Continue_Normal_down2:              call      drawgrid
	MoveDownReturn:                     ret                                                   	;Jmp  Motion

SEND_MoveDown2 ENDP
SEND_MoveUp2 PROC
	                                    CMP       AH,72d                                      	;scan code of arrow down
	                                    JNZ       MoveUpReturn
	                                    cmp       dead2,1
	                                    JZ        MoveUpReturn
	DecUp:                              MOV       BX,player2currentYpos                       	;changed 4lines from 337 to 440
	                                    SUB       BX,80d
	                                    CMP       BX,64
	                                    JL        MoveUpReturn
	                                    cmp       BX,player1currentYpos                       	;NEW
	                                    JNZ       ContinueMoveUp
	                                    MOV       BX,player2currentXpos
	                                    SUB       BX,10d
	                                    cmp       BX,player1currentXpos
	                                    JZ        MoveUpReturn
	ContinueMoveUp:                     
	                                    SUB       player2currentYpos,80d
	                                    call      Block_Movement_Of_Player_2_Boxes
	                                    cmp       bx, 0
	                                    Jz        Decrement_Player_2_Current_Y2pos
	                                    jmp       Continue_Normal_up2

	Decrement_Player_2_Current_Y2pos:   
	                                    add       player2currentypos,80d

	Continue_Normal_up2:                call      drawgrid
	MoveUpReturn:                       ret                                                   	;Jmp  Motion

SEND_MoveUp2 ENDP
SEND_MoveLeft2 PROC
	                                    CMP       AH,75d                                      	;scan code of arrow down
	                                    JNZ       MoveLeftReturn
	                                    cmp       dead2,1
	                                    JZ        MoveLeftReturn
	DecLeft:                            MOV       BX,player2currentXpos                       	;changed 4lines from 337 to 440
	                                    SUB       BX,80d
	                                    CMP       BX,64d
	                                    JL        MoveLeftReturn
	                                    SUB       BX,10d
	                                    cmp       BX,player1currentXpos                       	;NEW
	                                    JNZ       ContinueMoveLeft
	                                    MOV       BX,player2currentYpos
	                                    cmp       BX,player1currentYpos
	                                    JZ        MoveLeftReturn
	ContinueMoveLeft:                   
	                                    SUB       player2currentXpos,80d
	                                    call      Block_Movement_Of_Player_2_Boxes
	                                    cmp       bx, 0
	                                    Jz        Increment_Player_2_Current_Xpos
	                                    jmp       checkgunL2

	Increment_Player_2_Current_Xpos:    add       player2currentXpos,80d
	checkgunL2:                         cmp       player2currentXpos,320                      	;if samer crossed the barrier
	                                    jg        Continue_Normal_left2
	                                    mov       tbarr,1

	Continue_Normal_left2:              call      drawgrid
	MoveLeftReturn:                     ret                                                   	;Jmp  Motion

SEND_MoveLeft2 ENDP
SEND_MoveRight2 PROC
	                                    CMP       AH,77d                                      	;scan code of arrow down
	                                    JNZ       MoveRightReturn
	                                    cmp       dead2,1
	                                    JZ        MoveRightReturn
	IncRight:                           MOV       BX,player2currentXpos                       	;changed 4lines from 337 to 440
	                                    ADD       BX,80d
	                                    CMP       BX,640d
	                                    JA        MoveRightReturn
	                                    SUB       BX,10d
	                                    cmp       BX,player1currentXpos                       	;NEW
	                                    JNZ       ContinueMoveRight
	                                    MOV       BX,player2currentYpos
	                                    cmp       BX,player1currentYpos
	                                    JZ        MoveRightReturn
	ContinueMoveRight:                  
	                                    ADD       player2currentXpos,80d
	                                    call      Block_Movement_Of_Player_2_Boxes
	                                    cmp       bx, 0
	                                    Jz        Decrement_Player_2_Current_Xpos
	                                    jmp       checkgunR2

	Decrement_Player_2_Current_Xpos:    sub       player2currentXpos,80d
	checkgunR2:                         cmp       player2currentXpos,320                      	;if samer crossed the barrier
	                                    jle       Continue_Normal_2
	                                    mov       tbarr,0                                     	;his gun is disabled

	Continue_Normal_2:                  call      drawgrid
	MoveRightReturn:                    ret                                                   	;Jmp  Motion
SEND_MoveRight2 ENDP

RECfire1 proc
	                                    cmp       dead1,1
	                                    JZ        fire1ret_R
	                                    cmp       Player1_Bullets, 0                          	;if samer has no ammo
	                                    Jz        fire1ret_R                                  	;return - don't fire
	                                    cmp       SwitchGunBullet1,1d                         	;if it is recoil time
	                                    jz        fire1ret_R                                  	;return - wait for cooldown
	                                    cmp       sbarr,1                                     	;if samer crossed the barrier
	                                    jz        fire1ret_R                                  	;his gun is disabled
	                                    cmp       ah,78                                       	;check pressed key with _SpaceBar_
	                                    jnz       fire1ret_R                                  	;return if not
	firep1_R:                           dec       Player1_Bullets                             	;dec the bullets by the fired ones (only one per shot)
	                                    call      Draw_Player_1_Number_Of_Bullets             	;update status bar
	                                    call      grid                                        	;update grid
	                                    call      Draw_Power_Up_Square
	                                    call      Draw_Box_version_2
	                                    mov       DI, offset samer10                          	;choose player shooting frame to draw
	                                    call      DrawPlayer1
	gunchk1_R:                          cmp       tbarr,0                                     	;if tamer didnt cross the barrier
	                                    jz        enabled21_R                                 	;keep his gun enabled
	                                    cmp       tbarr,1                                     	;if tamer crossed the barrier
	                                    jz        disabled21_R                                	;disable his gun
	enabled21_R:                        mov       DI, offset tamer00                          	;choose which character frame to draw
	                                    call      DrawPlayer2
	                                    jmp       calldelay_R                                 	;proceed to next commands
	disabled21_R:                       mov       DI, offset tamer01                          	;choose which character frame to draw
	                                    call      DrawPlayer2
	calldelay_R:                        call      delay
	                                    call      drawgrid                                    	;draw default grid
	                                    MOV       CX, player1currentXpos                      	;new year
	                                    ADD       CX, 64d
	                                    MOV       GunBullet1xpos,cx
	                                    MOV       CX, player1currentYpos
	                                    ADD       CX, 30d
	                                    MOV       GunBullet1ypos,cx
	                                    call      DrawBulletGun1
	                                    MOV       CX,1d
	                                    MOV       SwitchGunBullet1,CX                         	;new year
	fire1ret_R:                         ret
RECfire1 endp
REC_MoveDown2 PROC
	                                    CMP       AH,1FH                                      	;scan code of arrow down
	                                    JNZ       MoveDownReturn_R
	                                    cmp       dead2,1
	                                    JZ        MoveDownReturn_R
	IncDown_R:                          MOV       BX,player2currentYpos                       	;changed 4lines from 337 to 440
	                                    ADD       BX,80d
	                                    CMP       BX,380d
	                                    JA        MoveDownReturn_R
	                                    cmp       BX,player1currentYpos                       	;NEW
	                                    JNZ       ContinueMoveDown_R
	                                    MOV       BX,player2currentXpos
	                                    SUB       BX,10d
	                                    cmp       BX,player1currentXpos
	                                    JZ        MoveDownReturn_R
	ContinueMoveDown_R:                 
	                                    ADD       player2currentYpos,80d
	                                    call      Block_Movement_Of_Player_2_Boxes
	                                    cmp       bx, 0
	                                    Jz        Decrement_Player_2_Current_Ypos_R
	                                    jmp       Continue_Normal_down2_R

	Decrement_Player_2_Current_Ypos_R:  
	                                    sub       player2currentYpos,80d

	Continue_Normal_down2_R:            call      drawgrid
	MoveDownReturn_R:                   ret                                                   	;Jmp  Motion

REC_MoveDown2 ENDP
REC_MoveUp2 PROC
	                                    CMP       AH,11H                                      	;scan code of arrow down
	                                    JNZ       MoveUpReturn_R
	                                    cmp       dead2,1
	                                    JZ        MoveUpReturn_R
	DecUp_R:                            MOV       BX,player2currentYpos                       	;changed 4lines from 337 to 440
	                                    SUB       BX,80d
	                                    CMP       BX,64
	                                    JL        MoveUpReturn_R
	                                    cmp       BX,player1currentYpos                       	;NEW
	                                    JNZ       ContinueMoveUp_R
	                                    MOV       BX,player2currentXpos
	                                    SUB       BX,10d
	                                    cmp       BX,player1currentXpos
	                                    JZ        MoveUpReturn_R
	ContinueMoveUp_R:                   
	                                    SUB       player2currentYpos,80d
	                                    call      Block_Movement_Of_Player_2_Boxes
	                                    cmp       bx, 0
	                                    Jz        Decrement_Player_2_Current_Y2pos_R
	                                    jmp       Continue_Normal_up2_R

	Decrement_Player_2_Current_Y2pos_R: 
	                                    add       player2currentypos,80d

	Continue_Normal_up2_R:              call      drawgrid
	MoveUpReturn_R:                     ret                                                   	;Jmp  Motion

REC_MoveUp2 ENDP
REC_MoveLeft2 PROC
	                                    CMP       AH,20H                                      	;scan code of arrow down
	                                    JNZ       MoveLeftReturn_R
	                                    cmp       dead2,1
	                                    JZ        MoveLeftReturn_R
	DecLeft_R:                          MOV       BX,player2currentXpos                       	;changed 4lines from 337 to 440
	                                    SUB       BX,80d
	                                    CMP       BX,64d
	                                    JL        MoveLeftReturn_R
	                                    SUB       BX,10d
	                                    cmp       BX,player1currentXpos                       	;NEW
	                                    JNZ       ContinueMoveLeft_R
	                                    MOV       BX,player2currentYpos
	                                    cmp       BX,player1currentYpos
	                                    JZ        MoveLeftReturn_R
	ContinueMoveLeft_R:                 
	                                    SUB       player2currentXpos,80d
	                                    call      Block_Movement_Of_Player_2_Boxes
	                                    cmp       bx, 0
	                                    Jz        Increment_Player_2_Current_Xpos_R
	                                    jmp       checkgunL2_R

	Increment_Player_2_Current_Xpos_R:  add       player2currentXpos,80d
	checkgunL2_R:                       cmp       player2currentXpos,320                      	;if samer crossed the barrier
	                                    jg        Continue_Normal_left2_R
	                                    mov       tbarr,1

	Continue_Normal_left2_R:            call      drawgrid
	MoveLeftReturn_R:                   ret                                                   	;Jmp  Motion

REC_MoveLeft2 ENDP
REC_MoveRight2 PROC
	                                    CMP       AH,1EH                                      	;scan code of arrow down
	                                    JNZ       MoveRightReturn2_R
	                                    cmp       dead2,1
	                                    JZ        MoveRightReturn2_R
	IncRight_R:                         MOV       BX,player2currentXpos                       	;changed 4lines from 337 to 440
	                                    ADD       BX,80d
	                                    CMP       BX,640d
	                                    JA        MoveRightReturn2_R
	                                    SUB       BX,10d
	                                    cmp       BX,player1currentXpos                       	;NEW
	                                    JNZ       ContinueMoveRight_R
	                                    MOV       BX,player2currentYpos
	                                    cmp       BX,player1currentYpos
	                                    JZ        MoveRightReturn2_R
	ContinueMoveRight_R:                
	                                    ADD       player2currentXpos,80d
	                                    call      Block_Movement_Of_Player_2_Boxes
	                                    cmp       bx, 0
	                                    Jz        Decrement_Player_2_Current_Xpos_R
	                                    jmp       checkgunR2_R

	Decrement_Player_2_Current_Xpos_R:  sub       player2currentXpos,80d
	checkgunR2_R:                       cmp       player2currentXpos,320                      	;if samer crossed the barrier
	                                    jle       Continue_Normal_2_R
	                                    mov       tbarr,0                                     	;his gun is disabled

	Continue_Normal_2_R:                call      drawgrid
	MoveRightReturn2_R:                 ret                                                   	;Jmp  Motion
REC_MoveRight2 ENDP


instack2 proc
	                                    cmp       dead2,1
	                                    JZ        player1instack2
	                                    cmp       player2currentXpos,490                      	;if tamer's x position is in stack
	                                    jz        check2                                      	;check y position too
	                                    jnz       notinstack2                                 	;if not return

	check2:                             cmp       player2currentYpos,304                      	;if tamer is in stack
	                                    jz        incbullts2                                  	;increase bullets
	                                    jnz       notinstack2                                 	;if not return
	incbullts2:                         cmp       Player2_Bullets,9                           	;if tamer has max bullets
	                                    jz        notinstack2                                 	;return
	                                    inc       Player2_Bullets                             	;else increase bullets one at a time
	                                    call      Draw_Player_2_Number_Of_Bullets             	;update status bar
	                                    jmp       notinstack2

	player1instack2:                    
	                                    cmp       player1currentXpos,474                      	;if samer's x position is in stack
	                                    jnc       checkplayer1                                	;check y position too
	                                    jnz       notinstack2                                 	;if not return

	checkplayer1:                       cmp       player1currentYpos,304                      	;if samer is in stack
	                                    jz        incrank1                                    	;increase rank
	                                    jnz       notinstack2
	incrank1:                           inc       Player1_Rank
	                                    inc       level                                       	;advance level
	                                    mov       set,1                                       	;set flag with 1 to advance to next level
	                                    call      delay15h
	                                    call      Draw_Player_1_Rank
	notinstack2:                        ret
instack2 endp
Heal_Player_1 proc
	                                    cmp       dead1,1
	                                    JZ        Return_Of_Heal_Player_1
	                                    lea       di, Power_Up_1_Activation
	                                    lea       si, Power_Up_1_X_location
	                                    mov       al, 0

	Start_Of_effect:                    
	                                    cmp       [di], 0
	                                    jZ        Return_Of_Heal_Player_1
		
		
		
		
	                                    mov       bx, player1currentXpos
	;lea si, Power_Up_1_X_location

	                                    cmp       bx, [si]
	                                    Ja        Return_Of_Heal_Player_1
	                                    add       bx, imgW
	                                    cmp       bx, [si]
	                                    Jb        Return_Of_Heal_Player_1

	;jmp Return_Of_Heal_Player_1

	CmpToY:                             
	                                    mov       bx, player1currentYpos
	                                    add       si, 2

	                                    cmp       bx, [si]
	                                    Ja        Return_Of_Heal_Player_1
	                                    add       bx, imgH
	                                    cmp       bx, [si]
	                                    Jb        Return_Of_Heal_Player_1

	                                    sub       si, 2
	;jmp Return_Of_Heal_Player_1

	                                    cmp       [di], 1
	                                    JZ        AddHp
	                                    cmp       [di], 2
	                                    JZ        SubHp
	                                    cmp       [di], 3
	                                    Jz        Set_Number_Of_Bullets_9
	                                    jmp       Return_Of_Heal_Player_1

	AddHp:                              cmp       Player1_HB,150
	                                    jz        Return_Of_Heal_Player_1
	                                    mov       [di], 0
	;lea si, Player1_HB
	                                    add       Player1_HB, 40
	                                    cmp       Player1_HB, 150
	                                    Ja        Mkae_it_Equal_To_150
	                                    call      Draw_Health_Bars
	                                    jmp       Return_Of_Heal_Player_1

	Mkae_it_Equal_To_150:               mov       Player1_HB, 150
	                                    call      Draw_Health_Bars

	                                    jmp       Return_Of_Heal_Player_1

	SubHp:                              mov       [di], 0
	                                    cmp       Player1_HB, 40
	                                    jbe       Set_Hp_To_Zero
	                                    sub       Player1_HB, 40
	                                    call      Draw_Health_Bars
	                                    jmp       Return_Of_Heal_Player_1

	Set_Hp_To_Zero:                     mov       Player1_HB, 0
	                                    call      Draw_Health_Bars
	                                    jmp       Return_Of_Heal_Player_1

	Set_Number_Of_Bullets_9:            cmp       Player1_Bullets,9
	                                    jz        Return_Of_Heal_Player_1
	                                    mov       [di], 0
	                                    mov       Player1_Bullets, 9
	                                    call      Draw_Player_1_Number_Of_Bullets


	Return_Of_Heal_Player_1:            
	                                    add       di, 2
	                                    add       si, 4
	                                    inc       al
	                                    cmp       al, 3
	                                    Jnz       Start_Of_effect
	                                    call      drawgrid
									

	;call Draw_Power_Up_Square
	
	                                    ret
Heal_Player_1 endp


REC_MoveDown1 PROC
	                                    CMP       AH,80d                                      	;scan code of arrow down
	                                    JNZ       MoveDown1Return_R
	                                    cmp       dead1,1
	                                    JZ        MoveDown1Return_R
	IncDown1_R:                         MOV       BX,player1currentYpos                       	;changed 4lines from 337 to 440
	                                    ADD       BX,80d
	                                    CMP       BX,380d
	                                    JA        MoveDown1Return_R
	                                    cmp       BX,player2currentYpos                       	;NEW
	                                    JNZ       ContinueMoveDown1_R
	                                    MOV       BX,player1currentXpos
	                                    ADD       BX,10d
	                                    cmp       BX,player2currentXpos
	                                    JZ        MoveDown1Return_R
	ContinueMoveDown1_R:                
	                                    ADD       player1currentYpos,80d
	                                    call      Block_Movement_Of_Player_1_Boxes
	                                    cmp       bx, 0
	                                    Jz        Decrement_Player_1_Current_Ypos_R
	                                    jmp       Continue_Normal_down1_R

	Decrement_Player_1_Current_Ypos_R:  
	                                    sub       player1currentYpos,80d

	Continue_Normal_down1_R:            call      drawgrid
	MoveDown1Return_R:                  ret                                                   	;Jmp  Motion

REC_MoveDown1 ENDP
REC_MoveUp1 PROC
	                                    CMP       AH,72d                                      	;scan code of arrow down
	                                    JNZ       MoveUp1Return_R
	                                    cmp       dead1,1
	                                    JZ        MoveUp1Return_R
	DecUp1_R:                           MOV       BX,player1currentYpos                       	;changed 4lines from 337 to 440
	                                    SUB       BX,80d
	                                    CMP       BX,64d
	                                    JL        MoveUp1Return_R
	                                    cmp       BX,player2currentYpos                       	;NEW
	                                    JNZ       ContinueMoveUp1_R
	                                    MOV       BX,player1currentXpos
	                                    ADD       BX,10d
	                                    cmp       BX,player2currentXpos
	                                    JZ        MoveUp1Return_R
	ContinueMoveUp1_R:                  
	                                    SUB       player1currentYpos,80d
	                                    call      Block_Movement_Of_Player_1_Boxes
	                                    cmp       bx, 0
	                                    Jz        Decrement_Player_1_Current_Y2pos_R
	                                    jmp       Continue_Normal_up1_R

	Decrement_Player_1_Current_Y2pos_R: 
	                                    add       player1currentypos,80d

	Continue_Normal_up1_R:              call      drawgrid
	MoveUp1Return_R:                    ret                                                   	;Jmp  Motion
REC_MoveUp1 ENDP
REC_MoveLeft1 PROC
	                                    CMP       AH,77d                                      	;scan code of arrow down
	                                    JNZ       MoveLeft1Return_R
	                                    cmp       dead1,1
	                                    JZ        MoveLeft1Return_R
	DecLeft1_R:                         MOV       BX,player1currentXpos                       	;changed 4lines from 337 to 440
	                                    SUB       BX,80d
	                                    CMP       BX,0d
	                                    JL        MoveLeft1Return_R
	                                    ADD       BX,10d
	                                    cmp       BX,player2currentXpos                       	;NEW
	                                    JNZ       ContinueMoveLeft1_R
	                                    MOV       BX,player1currentYpos
	                                    cmp       BX,player2currentYpos
	                                    JZ        MoveLeft1Return_R
	ContinueMoveLeft1_R:                
	                                    SUB       player1currentXpos,80d
	                                    call      Block_Movement_Of_Player_1_Boxes
	                                    cmp       bx, 0
	                                    Jz        Increment_Player_1_Current_Xpos_R
	                                    jmp       checkgunL1_R

	Increment_Player_1_Current_Xpos_R:  add       player1currentXpos,80d
	checkgunL1_R:                       cmp       player1currentXpos,320                      	;if samer crossed the barrier
	                                    jge       Continue_Normal_left1_R
	                                    mov       sbarr,0                                     	;his gun is disabled
	Continue_Normal_left1_R:            
	                                    call      drawgrid
	MoveLeft1Return_R:                  ret                                                   	;Jmp  Motion
REC_MoveLeft1 ENDP
REC_MoveRight1 PROC
	                                    CMP       aH,75d                                      	;scan code of arrow down
	                                    JNZ       MoveRight1Return_R
	                                    cmp       dead1,1
	                                    JZ        MoveRight1Return_R
	IncRight1_R:                        MOV       BX,player1currentXpos                       	;changed 4lines from 337 to 440
	                                    ADD       BX,80d
	                                    CMP       BX,556
	                                    JA        MoveRight1Return_R
	                                    ADD       BX,10d
	                                    cmp       BX,player2currentXpos                       	;NEW
	                                    JNZ       ContinueMoveRight1_R
	                                    MOV       BX,player1currentYpos
	                                    cmp       BX,player2currentYpos
	                                    JZ        MoveRight1Return_R
	ContinueMoveRight1_R:               
	                                
	;sub bx, 10
	;call
									
	                                    ADD       player1currentXpos,80d
	                                    call      Block_Movement_Of_Player_1_Boxes
	                                    cmp       bx, 0
	                                    Jz        Decrement_Player_1_Current_Xpos_R
	                                    jmp       checkgunR1_R

	Decrement_Player_1_Current_Xpos_R:  sub       player1currentXpos,80d
	checkgunR1_R:                       cmp       player1currentXpos,320                      	;if samer crossed the barrier
	                                    jl        Continue_Normal_R
	                                    mov       sbarr,1                                     	;his gun is disabled
	Continue_Normal_R:                  call      drawgrid
										call 		Heal_Player_1
	MoveRight1Return_R:                 ret                                                   	;Jmp  Motion

REC_MoveRight1 ENDP


Player2HitsPlayer1 PROC
	                                    MOV       CX,GunBullet2xpos
	                                    MOV       DX,player1currentXpos
	                                    CMP       DX,Cx
	                                    JA        Player2HitsPlayer1ret
	                                    ADD       DX, imgW+32                                 	;both 16 & 16 between bullet before and after hit
	                                    CMP       DX,Cx
	                                    JB        Player2HitsPlayer1ret

	                                    MOV       CX,GunBullet2ypos
	                                    MOV       DX,player1currentYpos
	                                    CMP       DX,Cx
	                                    JA        Player2HitsPlayer1ret
	                                    ADD       DX, 64d
	                                    CMP       DX,Cx
	                                    JB        Player2HitsPlayer1ret
	                                    cmp       sbarr,0                                     	;if samer didn't cross the barrier
	                                    jz        nrmlsub21                                   	;subtract normal the value from hp
	                                    cmp       sbarr,1                                     	;if samer crossed the barrier
	                                    jz        dbllsub21                                   	;subtract double the value from hp
	nrmlsub21:                          CMP       Player1_HB,10                               	;if samer is defeated
	                                    JB        CasePlayer1HBis0                            	;let hp = 0
	                                    mov       DI, offset samer00
	                                    call      DMGPlayer1                                  	;show damage on player (red color)
	                                    SUB       Player1_HB,10
	                                    call      delay                                       	;delay is called to see effect momentarly
	                                    call      DrawPlayer1                                 	;draw original player position
	                                    JMP       CallDrawHealthBarsRedBullets
	dbllsub21:                          CMP       Player1_HB,20                               	;if samer is defeated
	                                    JB        CasePlayer1HBis0                            	;let hp = 0
	                                    mov       DI, offset samer01
	                                    call      DMGPlayer1                                  	;show damage on player (red color)
	                                    SUB       Player1_HB,20
	                                    call      delay                                       	;delay is called to see effect momentarly
	                                    call      DrawPlayer1                                 	;draw original player position
	                                    JMP       CallDrawHealthBarsRedBullets
	CasePlayer1HBis0:                   MOV       Player1_HB,0
	CallDrawHealthBarsRedBullets:       call      Draw_Health_Bars
	                                    MOV       SwitchGunBullet2,0
	                                    call      drawgrid
	                                    call      Heal_Player_1
	Player2HitsPlayer1ret:              RET
Player2HitsPlayer1 ENDP
RepeatBulletGun2 PROC
	AddOnXbulletGun2:                                                                         	;call delay
	                                    MOV       CX,40d                                      	;Bullet Speedddd     new year
	                                    SUB       GunBullet2xpos,CX
	                                    MOV       CX,GunBullet2xpos
	                                    CMP       CX,0d
	                                    JG        BeforeRepeatBulletGun2ret
	                                    MOV       SwitchGunBullet2,0d
	                                    JMP       RepeatBulletGun2ret
	BeforeRepeatBulletGun2ret:          
	                                    call      drawgrid
	RepeatBulletGun2ret:                call      Damage_Box_By_Bullet_2
	                                    call      Player2HitsPlayer1
	                                    RET
RepeatBulletGun2 ENDP


SEND_fire2 proc
	                                    cmp       dead2,1
	                                    JZ        fire2ret
	                                    cmp       Player2_Bullets, 0                          	;if tamer has no ammo
	                                    Jz        fire2ret                                    	;return - don't fire
	                                    cmp       SwitchGunBullet2,1d                         	;if it is recoil time
	                                    jz        fire2ret                                    	;return - wait for cooldown
	                                    cmp       tbarr,1                                     	;if tamer crossed the barrier
	                                    jz        fire2ret                                    	;his gun is disabled
	                                    cmp       ah,78                                       	;check pressed key with _num(+)_
	                                    jnz       fire2ret                                    	;return if not
	firep2:                             dec       Player2_Bullets                             	;dec the bullets by the fired ones (only one per shot)
	                                    call      Draw_Player_2_Number_Of_Bullets             	;update status bar
	                                    call      grid                                        	;update grid
	                                    call      Draw_Power_Up_Square
	                                    call      Draw_Box_version_2
	gunchk2:                            cmp       sbarr,0                                     	;if samer didnt cross the barrier
	                                    jz        enabled12                                   	;keep his gun enabled
	                                    cmp       sbarr,1                                     	;if samer crossed the barrier
	                                    jz        disabled12                                  	;disable his gun
	enabled12:                          mov       DI, offset samer00                          	;choose which character frame to draw
	                                    call      DrawPlayer1
	                                    jmp       gun2pos                                     	;proceed to next commands
	disabled12:                         mov       DI, offset samer01                          	;choose which character frame to draw
	                                    call      DrawPlayer1
	gun2pos:                            mov       DI, offset tamer10                          	;choose player shooting frame to draw
	                                    call      DrawPlayer2
	                                    call      delay
	                                    call      drawgrid                                    	;draw default grid
	                                    MOV       CX, player2currentXpos                      	;new year
	                                    SUB       CX, 8d
	                                    MOV       GunBullet2xpos,cx
	                                    MOV       CX, player2currentYpos
	                                    ADD       CX, 30d
	                                    MOV       GunBullet2ypos,cx
	                                    call      DrawBulletGun2
	                                    MOV       CX,1d
	                                    MOV       SwitchGunBullet2,CX                         	;turn the switch ON ;new year
	fire2ret:                           ret
SEND_fire2 endp

REC_fire2 proc
	                                    cmp       dead2,1
	                                    JZ        fire2ret_R
	                                    cmp       Player2_Bullets, 0                          	;if tamer has no ammo
	                                    Jz        fire2ret_R                                  	;return - don't fire
	                                    cmp       SwitchGunBullet2,1d                         	;if it is recoil time
	                                    jz        fire2ret_R                                  	;return - wait for cooldown
	                                    cmp       tbarr,1                                     	;if tamer crossed the barrier
	                                    jz        fire2ret_R                                  	;his gun is disabled
	                                    cmp       ah,57                                       	;check pressed key with _num(+)_
	                                    jnz       fire2ret_R                                  	;return if not
	firep2_R:                           dec       Player2_Bullets                             	;dec the bullets by the fired ones (only one per shot)
	                                    call      Draw_Player_2_Number_Of_Bullets             	;update status bar
	                                    call      grid                                        	;update grid
	                                    call      Draw_Power_Up_Square
	                                    call      Draw_Box_version_2
	gunchk2_R:                          cmp       sbarr,0                                     	;if samer didnt cross the barrier
	                                    jz        enabled12_R                                 	;keep his gun enabled
	                                    cmp       sbarr,1                                     	;if samer crossed the barrier
	                                    jz        disabled12_R                                	;disable his gun
	enabled12_R:                        mov       DI, offset samer00                          	;choose which character frame to draw
	                                    call      DrawPlayer1
	                                    jmp       gun2pos_R                                   	;proceed to next commands
	disabled12_R:                       mov       DI, offset samer01                          	;choose which character frame to draw
	                                    call      DrawPlayer1
	gun2pos_R:                          mov       DI, offset tamer10                          	;choose player shooting frame to draw
	                                    call      DrawPlayer2
	                                    call      delay
	                                    call      drawgrid                                    	;draw default grid
	                                    MOV       CX, player2currentXpos                      	;new year
	                                    SUB       CX, 8d
	                                    MOV       GunBullet2xpos,cx
	                                    MOV       CX, player2currentYpos
	                                    ADD       CX, 30d
	                                    MOV       GunBullet2ypos,cx
	                                    call      DrawBulletGun2
	                                    MOV       CX,1d
	                                    MOV       SwitchGunBullet2,CX                         	;turn the switch ON ;new year
	fire2ret_R:                         ret
REC_fire2 endp


SENDAction proc                                                                           		;SNED INPUT & check if the input is one of these defined ones or not and excecute them if they are
	                                    mov       AH,01h
	                                    int       16h
	                                    jz        returnmain1
	                                    mov       endflag, 1
	                                    cmp       ah, 62
	                                    JZ        returnmain1
	                                    mov       endflag, 0
	                                    mov       ah,00h
	                                    int       16h
	                                    mov       sent,ah
	                                    SENDING   sent
	;call      SEND_MoveDown1
	;call      SEND_MoveUp1
	;call      SEND_MoveLeft1
	;call      SEND_MoveRight1
	;call      SENDfire1
	                                    call      SEND_MoveDown2
	                                    call      SEND_MoveUp2
	                                    call      SEND_MoveLeft2
	                                    call      SEND_MoveRight2
	                                    call      SEND_fire2
	                                    call      Heal_Player_1
	                                    call      Heal_Player_2
										
	returnmain1:                        ret
SENDAction endp

RECAction proc                                                                            		;check if the input is one of these defined ones or not and excecute them if they are
	                                    RECEIVING rect
	                                    mov       ah, rect
	                                    call      REC_MoveDown1
	                                    call      REC_MoveUp1
	                                    call      REC_MoveLeft1
	                                    call      REC_MoveRight1
	                                    call      RECfire1
									
	;call      REC_MoveDown2
	;call      REC_MoveUp2
	;call      REC_MoveLeft2
	;call      REC_MoveRight2
	;call      REC_fire2
	returnmain2:                        mov       rect,00h
	                                    ret
RECAction endp



setlevel proc
	                                    mov       player1currentXpos,80
	                                    mov       player1currentYpos,144
	                                    mov       sbarr,0
	                                    mov       dead1,0
	                                    mov       Player1_HB,150
	                                    mov       Player1_Bullets,9
	                                    mov       SwitchGunBullet1,0
	                                    mov       player2currentXpos,490
	                                    mov       player2currentYpos,144
	                                    mov       tbarr,0
	                                    mov       dead2,0
	                                    mov       Player2_HB,150
	                                    mov       Player2_Bullets,9
	                                    mov       SwitchGunBullet2,0
	                                    mov       pixcl,35h
	                                    mov       pix2cl,0ch
	                                    cmp       level,1
	                                    jz        level1
	                                    cmp       level,2
	                                    jz        level2
	                                    cmp       level,3
	                                    jz        level3
	level1:                             mov       Power_Up_1_Activation,1
	                                    mov       Power_Up_2_Activation,0
	                                    mov       Power_Up_3_Activation,0
	                                    mov       Power_Ups_Counts,1
	                                    mov       Box_1_Activation,2
	                                    mov       Box_2_Activation,0
	                                    mov       Box_3_Activation,0
	                                    jmp       levelret

	level2:                             mov       Power_Up_1_Activation,1
	                                    mov       Power_Up_2_Activation,2
	                                    mov       Power_Up_3_Activation,0
	                                    mov       Power_Ups_Counts,2
	                                    mov       Box_1_Activation,2
	                                    mov       Box_2_Activation,2
	                                    mov       Box_3_Activation,0
	                                    jmp       levelret

	level3:                             mov       Power_Up_1_Activation,1
	                                    mov       Power_Up_2_Activation,2
	                                    mov       Power_Up_3_Activation,3
	                                    mov       Power_Ups_Counts,3
	                                    mov       Box_1_Activation,2
	                                    mov       Box_2_Activation,2
	                                    mov       Box_3_Activation,2
	                                    jmp       levelret

	levelret:                           call      statusbar
	                                    call      drawgrid                                    	;set default game = start
	                                    ret

setlevel endp
	;/////////////////////////////////////////////////////////////////////////////////////
	;//////////////////////////////////////MAIN GAME//////////////////////////////////////

main proc far
	                                    mov       ax,@data
	                                    mov       ds,ax
	                                    call      setdevisor                                  	; Make the connection

	                                    mov       ah, 0                                       	; clear the screen
	                                    mov       al,3
	                                    int       10h

	                                    mov       dh, 5
	                                    mov       dl, 4
	                                    call      set_cursor

	                                    mov       dx, offset message1
	                                    mov       ah, 9
	                                    int       21h

	                                    mov       dx, offset Second_Player_buffer
	                                    mov       ah, 0AH
	                                    int       21h

	                                    mov       dh, 6
	                                    mov       dl, 4
	                                    call      set_cursor

	                                    mov       dx, offset message6
	                                    mov       ah, 9
	                                    int       21h

	                                    mov       dx, offset First_Player_buffer
	                                    mov       ah, 0AH
	                                    int       21h
     
	                                    mov       dh, 7
	                                    mov       dl, 4
	                                    call      set_cursor

	                                    mov       dx, offset message2
	                                    mov       ah, 9
	                                    int       21h

	                                    mov       ah, 0
	                                    int       16h

	Select_Window:                      
	                                    mov       ah, 0                                       	; clear the screen
	                                    mov       al,3
	                                    int       10h

	                                    mov       dh, 4
	                                    mov       dl, 3
	                                    call      set_cursor

	                                    mov       dx, offset message3
	                                    mov       ah, 9
	                                    int       21h

	                                    mov       dh, 5
	                                    mov       dl, 3
	                                    call      set_cursor

	                                    mov       dx, offset message4
	                                    mov       ah, 9
	                                    int       21h

	                                    mov       dh, 6
	                                    mov       dl, 3
	                                    call      set_cursor

	                                    mov       dx, offset message5
	                                    mov       ah, 9
	                                    int       21h

	Get_Input:                          mov       ah, 0
	                                    int       16h
										
	                                    cmp       ah, 1
	                                    JZ        Go_to_END
	                                    cmp       ah, 60
	                                    JZ        Go_TO_Start
	                                    cmp       ah, 59
	                                    JZ        Chatting_Window
	                                    jmp       Get_Input

	; start of chatting widow

	Chatting_Window:                    
	                                    call      ChatProc
	; mov  ah, 0                                       	; clear the screen
	; mov  al,3
	; int  10h

	; mov  dl, 0
	; mov  dh, 0
	; call set_cursor

	; mov  ah, 9
	; mov  dx, offset First_Player_name
	; int  21H

	; mov  dl, 0
	; mov  dh, 9
	; call set_cursor

	; mov  dx, offset line
	; mov  ah, 9
	; int  21h

	                                    jmp       skip
	aa:                                 jmp       Select_Window
	skip:                               

	                                    mov       dl, 0
	                                    mov       dh, 10
	                                    call      set_cursor

	                                    jmp       skip3
	Go_TO_Start:                        jmp       Start_Of_Game
	skip3:                              

	                                    mov       ah, 9
	                                    mov       dx, offset Second_Player_name
	                                    int       21H

	                                    mov       dl, 0
	                                    mov       dh, 22
	                                    call      set_cursor

	                                    mov       dx, offset line
	                                    mov       ah, 9
	                                    int       21h

	                                    mov       dl, 0
	                                    mov       dh, 23
	                                    call      set_cursor

	                                    mov       ah, 9
	                                    mov       dx, offset Part_1_of_End_message_in_chatting
	                                    int       21H

	                                    mov       dl, 23
	                                    mov       dh, 23
	                                    call      set_cursor

	                                    mov       ah, 9
	                                    mov       dx, offset Second_Player_name
	                                    int       21H

	                                    jmp       skip2
	Go_to_END:                          jmp       End_Of_Program
	skip2:                              

	                                    mov       dl, 24
	                                    mov       si, offset Second_Player_ActualSize
	                                    add       dl, [si]
	                                    mov       dh, 23
	                                    call      set_cursor

	                                    mov       ah, 9
	                                    mov       dx, offset Part_2_of_End_message_in_chatting
	                                    int       21H

	Enter_Input_For_Chat:               
	                                    mov       ah, 0
	                                    int       16h
	                                    cmp       ah, 61
	                                    JZ        aa
	                                    jmp       Enter_Input_For_Chat



	Start_Of_Game:                      mov       ax, 4F02h
	                                    mov       bx, 0100h                                   	;640x400 screen graphics mode
	                                    int       10h                                         	;enter graphics mode
	                                    call      WriteF4EXIT
	                                    call      setlevel                                    	;draw initial game of round 1
	game:                               cmp       Player1_HB,0                                	;check if player 1 is dead
	                                    ja        player2hp
	                                    mov       player1currentXpos,640
	                                    mov       player1currentYpos,400
	                                    call      drawgrid
	                                    mov       dead1,1                                     	;make him dead
	player2hp:                          cmp       Player2_HB,0                                	;check if player 1 is dead
	                                    ja        instack_check
	                                    mov       player2currentXpos,640
	                                    mov       player2currentYpos,400
	                                    call      drawgrid
	                                    mov       dead2,1                                     	;make him dead
	instack_check:                      call      instack1                                    	;if player 1 in stack 1, inc bullets				if player 1 is dead and player 2 is in stack 1, inc rank and advance level
	                                    cmp       set,1                                       	;mark set flag to advance level
	                                    jz        advancelevel
	                                    call      instack2                                    	;if player 2 in stack 2, inc bullets				if player 2 is dead and player 1 is in stack 2, inc rank and advance level
	                                    cmp       set,1                                       	;mark set flag to advance level
	                                    jz        advancelevel
	                                    call      SENDAction                                  	;take input from user
	                                    cmp       endflag,1
	                                    jz        End_Of_Program
	                                    call      RECAction
	                                    call      delay                                       	;delay for the next loop
	RepeatgunBullet1EveryCycle:         cmp       SwitchGunBullet1,1d                         	;activate recoil of gun
	                                    JNZ       RepeatgunBullet2EveryCycle
	                                    call      RepeatBulletGun1                            	;advance bullet position
	RepeatgunBullet2EveryCycle:         cmp       SwitchGunBullet2,1d                         	;activate recoil of gun
	                                    JNZ       game
	                                    call      RepeatBulletGun2                            	;advance bullet position
	                                    jmp       game                                        	;iterate to next commands
	advancelevel:                       cmp       level,4                                     	;if they finished playing 3 rounds, it is certain that one has won
	                                    jz        Display_Wining_Player
	                                    cmp       level,3                                     	;if two rounds are finished, propably one of them has one case -> 2:0
	                                    jz        checkr2
	                                    jmp       roundup
	checkr2:                            cmp       Player2_Rank,1
	                                    jz        Display_Wining_Player
	                                    cmp       Player1_Rank,1
	                                    jz        Display_Wining_Player
	roundup:                            
	                                    call      setlevel
	                                    mov       set,0
	                                    jmp       game                                        	;iterate to next commands
	Display_Wining_Player:              call      PlayerWinsScreen
	End_Of_Program:                     
	                                    mov       ah,0
	                                    mov       al, 3
	                                    int       10h
	                                    mov       ah, 4Ch
	                                    int       21h
	
main endp
end main